.版本 2
.支持库 spec

.程序集 游戏类
.程序集变量 太鼓Bar, Age_精灵
.程序集变量 太鼓Bar红, Age_精灵
.程序集变量 标题bar, Age_精灵
.程序集变量 标题文字精灵, Age_文字
.程序集变量 标题文字, 文本型
.程序集变量 Bar现行透明度, 整数型
.程序集变量 bar透明度, 整数型
.程序集变量 BAR透明事件, 整数型
.程序集变量 太鼓, Age_精灵
.程序集变量 太鼓咚, Age_精灵
.程序集变量 太鼓哒, Age_精灵
.程序集变量 太鼓咚反, Age_精灵
.程序集变量 太鼓哒反, Age_精灵
.程序集变量 咚哒事件, 整数型, , "4"
.程序集变量 咚哒音量, 整数型
.程序集变量 动态横幅, Age_精灵
.程序集变量 动态横幅黑, Age_精灵
.程序集变量 现行横幅透明度, 整数型
.程序集变量 横幅透明度, 整数型
.程序集变量 动态背景X坐标, 整数型, , "3"
.程序集变量 动态横幅变色, 整数型
.程序集变量 太鼓小人, Age_动画
.程序集变量 太鼓小人2, Age_动画
.程序集变量 太鼓高潮, 整数型
.程序集变量 红色太鼓人, Age_动画
.程序集变量 打鼓点, Age_精灵
.程序集变量 魂条, Age_精灵
.程序集变量 魂条覆盖, Age_精灵
.程序集变量 魂条百分比, 小数型
.程序集变量 红色太鼓, Age_动画
.程序集变量 蓝色太鼓, Age_动画
.程序集变量 红色太鼓大, Age_动画
.程序集变量 蓝色太鼓大, Age_动画
.程序集变量 连打太鼓, Age_动画
.程序集变量 连打太鼓大, Age_动画
.程序集变量 连打条, Age_精灵
.程序集变量 连打结束块, Age_精灵
.程序集变量 闪光精灵, Age_精灵
.程序集变量 闪光精灵透明度, 整数型
.程序集变量 COMBO连段, Age_精灵
.程序集变量 连段, 连段, , "0"
.程序集变量 太鼓X坐标, 太鼓坐标, , "0"
.程序集变量 弹出太鼓, 弹出太鼓, , "0"
.程序集变量 太鼓动画, 整数型
.程序集变量 咚左, 整数型
.程序集变量 咚右, 整数型
.程序集变量 哒左, 整数型
.程序集变量 哒右, 整数型
.程序集变量 打击标志黄, Age_精灵
.程序集变量 打击表志银, Age_精灵
.程序集变量 打击标志黄大, Age_精灵
.程序集变量 打击表志银大, Age_精灵
.程序集变量 打击标志, 打击标志, , "0"
.程序集变量 数字, Age_精灵, , "10"
.程序集变量 COMBO文字缩放变量, 整数型
.程序集变量 COMBO变量, 整数型
.程序集变量 歌曲是否有动画, 逻辑型
.程序集变量 帧数差值, 小数型
.程序集变量 火焰精灵, Age_精灵
.程序集变量 火焰开关, 逻辑型
.程序集变量 火焰透明度, 整数型
.程序集变量 魂精灵, Age_动画
.程序集变量 火魂精灵, Age_精灵
.程序集变量 魂缩放, 小数型
.程序集变量 魂粒子, Age_粒子
.程序集变量 魂粒子精灵, Age_精灵
.程序集变量 魂满人, Age_精灵
.程序集变量 普面移动倍数, 小数型
.程序集变量 难度图标, 难度图标
.程序集变量 计时延迟, 逻辑型
.程序集变量 普面音量, 整数型
.程序集变量 太鼓小人1纹理, 整数型
.程序集变量 太鼓小人2纹理, 整数型
.程序集变量 魂满太鼓小人1纹理, 整数型
.程序集变量 魂满太鼓小人2纹理, 整数型
.程序集变量 难度纹理1, 整数型
.程序集变量 难度纹理2, 整数型
.程序集变量 难度纹理3, 整数型
.程序集变量 难度纹理4, 整数型
.程序集变量 魂满人Y, 整数型
.程序集变量 MOD图标, Age_精灵
.程序集变量 MOD纹理, MOD纹理
.程序集变量 MOD纹理透明度, 小数型
.程序集变量 咚左透明度, 整数型
.程序集变量 哒左透明度, 整数型
.程序集变量 咚右透明度, 整数型
.程序集变量 哒右透明度, 整数型
.程序集变量 暂停菜单透明度, 整数型
.程序集变量 暂停菜单背景, Age_精灵
.程序集变量 暂停菜单按钮, 暂停菜单按钮
.程序集变量 暂停菜单按钮缩放, 暂停菜单按钮缩放
.程序集变量 暂停菜单声音1, Tp_音效
.程序集变量 太鼓移动坐标, 双精度小数型
.程序集变量 创建游戏, 逻辑型
.程序集变量 魂条显示长度, 小数型

.子程序 游戏初始化
.局部变量 n, 整数型

引擎.读zip (取运行目录 () ＋ “\Game.pak”)
' 纹理
太鼓小人1纹理 ＝ 引擎.载入纹理 (“太鼓人1.png”)
太鼓小人2纹理 ＝ 引擎.载入纹理 (“太鼓人2.png”)
魂满太鼓小人1纹理 ＝ 引擎.载入纹理 (“魂满太鼓人1.png”)
魂满太鼓小人2纹理 ＝ 引擎.载入纹理 (“魂满太鼓人2.png”)
难度纹理1 ＝ 引擎.载入纹理 (“松图标.png”)
难度纹理2 ＝ 引擎.载入纹理 (“竹图标.png”)
难度纹理3 ＝ 引擎.载入纹理 (“梅图标.png”)
难度纹理4 ＝ 引擎.载入纹理 (“专家图标.png”)
MOD纹理.自动MOD.纹理 ＝ 引擎.载入纹理 (“selection-mod-autoplay.png”)
MOD纹理.手电筒MOD.纹理 ＝ 引擎.载入纹理 (“selection-mod-flashlight.png”)
' 创建物体
MOD图标.创建 (MOD纹理.自动MOD, 0, 0, 65, 61)
COMBO连段.创建_从指针 (引擎.载入纹理 (“comboballoon.png”))
闪光精灵.创建_从指针 (引擎.载入纹理 (“flash.png”))
魂满人.创建_从指针 (引擎.载入纹理 (“mob.png”))
魂粒子精灵.创建_从指针 (引擎.载入纹理 (“Soul.png”))
魂粒子精灵.置中心 (魂粒子精灵.取高度 () ÷ 2, 魂粒子精灵.取宽度 () ÷ 2)
魂粒子.创建 (取运行目录 () ＋ “\psi\Soul.psi”, 魂粒子精灵)
太鼓Bar.创建_从指针 (引擎.载入纹理 (“太鼓Bar黑.png”), , , , , , )
太鼓Bar红.创建_从指针 (引擎.载入纹理 (“太鼓Bar红.png”), , , , , , )
标题bar.创建_从指针 (引擎.载入纹理 (“歌曲标题bar.png”), , , , , , )
打鼓点.创建_从指针 (引擎.载入纹理 (“打鼓点.png”), , , , , , )
魂条.创建_从指针 (引擎.载入纹理 (“魂条.png”), , , , , , )
魂条覆盖.创建_从指针 (引擎.载入纹理 (“魂条2.png”), , , , , , )
太鼓.创建_从指针 (引擎.载入纹理 (“太鼓.png”), 0, 0, 181, 200, , )
太鼓咚.创建_从指针 (引擎.载入纹理 (“太鼓咚.png”), , , , , , )
太鼓哒.创建_从指针 (引擎.载入纹理 (“太鼓哒.png”), , , , , , )
太鼓咚反.创建_从指针 (引擎.载入纹理 (“太鼓咚.png”), , , , , , )
太鼓哒反.创建_从指针 (引擎.载入纹理 (“太鼓哒.png”), , , , , , )
太鼓小人2.创建_从指针 (太鼓小人2纹理, 4, 音乐BPM ÷ 30, 0, 0, 450, 400)
红色太鼓.创建_从指针 (引擎.载入纹理 (“红色太鼓.png”), 2, 5, 0, 0, 128, 128)
蓝色太鼓.创建_从指针 (引擎.载入纹理 (“蓝色太鼓.png”), 2, 5, 0, 0, 128, 128)
红色太鼓大.创建_从指针 (引擎.载入纹理 (“红色太鼓大.png”), 2, 5, 0, 0, 128, 128)
蓝色太鼓大.创建_从指针 (引擎.载入纹理 (“蓝色太鼓大.png”), 2, 5, 0, 0, 128, 128)
连打太鼓.创建_从指针 (引擎.载入纹理 (“连打.png”), 2, 5, 0, 0, 128, 128)
连打太鼓大.创建_从指针 (引擎.载入纹理 (“连打大.png”), 2, 5, 0, 0, 128, 128)
连打条.创建_从指针 (引擎.载入纹理 (“连打条.png”), , , , , , )
连打结束块.创建_从指针 (引擎.载入纹理 (“连打结束块.png”), , , , , , )
打击标志黄.创建_从指针 (引擎.载入纹理 (“打击标志黄.png”), , , , , , )
打击表志银.创建_从指针 (引擎.载入纹理 (“打击标志银.png”), , , , , , )
打击标志黄大.创建_从指针 (引擎.载入纹理 (“打击标志黄大.png”), , , , , , )
打击表志银大.创建_从指针 (引擎.载入纹理 (“打击标志银大.png”), , , , , , )
火焰精灵.创建_从指针 (引擎.载入纹理 (“火焰.png”), , , , , , )
魂精灵.创建_从指针 (引擎.载入纹理 (“魂.png”), 9, 20, 0, 0, 80, 80)
数字 [1].创建_从指针 (引擎.载入纹理 (“数字1.png”), , , , , , )
数字 [2].创建_从指针 (引擎.载入纹理 (“数字2.png”), , , , , , )
数字 [3].创建_从指针 (引擎.载入纹理 (“数字3.png”), , , , , , )
数字 [4].创建_从指针 (引擎.载入纹理 (“数字4.png”), , , , , , )
数字 [5].创建_从指针 (引擎.载入纹理 (“数字5.png”), , , , , , )
数字 [6].创建_从指针 (引擎.载入纹理 (“数字6.png”), , , , , , )
数字 [7].创建_从指针 (引擎.载入纹理 (“数字7.png”), , , , , , )
数字 [8].创建_从指针 (引擎.载入纹理 (“数字8.png”), , , , , , )
数字 [9].创建_从指针 (引擎.载入纹理 (“数字9.png”), , , , , , )
数字 [10].创建_从指针 (引擎.载入纹理 (“数字0.png”), , , , , , )
难度图标.专家.创建_从指针 (难度纹理4, 0, 0, 450, 450, , )
动态横幅.创建_从指针 (引擎.载入纹理 (“动态背景.png”))
动态横幅黑.创建_从指针 (引擎.载入纹理 (“动态背景黑.png”))
太鼓小人.创建_从指针 (太鼓小人1纹理, 6, 音乐BPM ÷ 30, 0, 0, 362, 380)
标题文字精灵.创建 (“黑体”, 21, 假, 假, 真, #颜色_白)
暂停菜单背景.创建_从指针 (引擎.载入纹理_字节集 (#遮罩), , , )
暂停菜单按钮.返回菜单.创建_从指针 (引擎.载入纹理 (“pause-back.png”))
' 其他
太鼓咚反.翻转 (真, 假, 假)
太鼓哒反.翻转 (真, 假, 假)
动态横幅.显示区域 (0, 0, 动态横幅.取宽度 (), 动态横幅.取高度 ())
动态横幅黑.显示区域 (0, 0, 动态横幅.取宽度 (), 动态横幅.取高度 ())
' 置中心
COMBO连段.置中心 (COMBO连段.取宽度 () ÷ 2, COMBO连段.取高度 () ÷ 2)
连打条.置中心 (0, 64)
连打结束块.置中心 (0, 64)
连打太鼓大.置中心 (64, 64)
连打太鼓.置中心 (64, 64)
蓝色太鼓大.置中心 (64, 64)
红色太鼓大.置中心 (64, 64)
蓝色太鼓.置中心 (64, 64)
红色太鼓.置中心 (64, 64)
魂精灵.置中心 (40, 40)
暂停菜单按钮.返回菜单.置中心 (199, 58)
' 播放动画
太鼓小人.播放 ()
太鼓小人2.播放 ()
红色太鼓.播放 ()
蓝色太鼓.播放 ()
红色太鼓大.播放 ()
蓝色太鼓大.播放 ()
连打太鼓.播放 ()
连打太鼓大.播放 ()
魂精灵.播放 ()
' 混合模式
.计次循环首 (取数组成员数 (数字), n)
    数字 [n].置混合模式 (#混合_默认)
    数字 [n].置中心 (0, 50)
.计次循环尾 ()
COMBO连段.置混合模式 (#混合_默认)
魂满人.置混合模式 (#混合_默认)
魂粒子精灵.置混合模式 (#混合_默认)
闪光精灵.置混合模式 (#混合_Add2X)
太鼓Bar.置混合模式 (#混合_默认)
太鼓Bar红.置混合模式 (#混合_默认)
标题bar.置混合模式 (#混合_默认)
打鼓点.置混合模式 (#混合_默认)
魂条.置混合模式 (#混合_默认)
魂条覆盖.置混合模式 (#混合_默认)
太鼓.置混合模式 (#混合_默认)
太鼓咚.置混合模式 (#混合_默认)
太鼓哒.置混合模式 (#混合_默认)
太鼓咚反.置混合模式 (#混合_默认)
太鼓哒反.置混合模式 (#混合_默认)
动态横幅.置混合模式 (#混合_默认)
动态横幅黑.置混合模式 (#混合_默认)
太鼓小人.置混合模式 (#混合_默认)
太鼓小人2.置混合模式 (#混合_默认)
红色太鼓.置混合模式 (#混合_默认)
蓝色太鼓.置混合模式 (#混合_默认)
红色太鼓大.置混合模式 (#混合_默认)
蓝色太鼓大.置混合模式 (#混合_默认)
连打太鼓.置混合模式 (#混合_默认)
连打太鼓大.置混合模式 (#混合_默认)
连打条.置混合模式 (#混合_默认)
连打结束块.置混合模式 (#混合_默认)
打击标志黄.置混合模式 (#混合_默认)
打击表志银.置混合模式 (#混合_默认)
打击标志黄大.置混合模式 (#混合_默认)
打击表志银大.置混合模式 (#混合_默认)
火焰精灵.置混合模式 (#混合_默认)
魂精灵.置混合模式 (#混合_默认)
难度图标.专家.置混合模式 (#混合_默认)
暂停菜单背景.置混合模式 (#混合_默认)
暂停菜单按钮.返回菜单.置混合模式 (#混合_默认)
' 声音
引擎.De_设备创建 ()
音效 [1].句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\ka.wav”)
音效 [2].句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\dong.wav”)
音效播放.FUUCOMBO.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\fullcombo.wav”)
音效播放.combo50.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\50combo.wav”)
音效播放.combo100.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\100combo.wav”)
音效播放.combo200.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\200combo.wav”)
音效播放.combo300.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\300combo.wav”)
音效播放.combo400.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\400combo.wav”)
音效播放.combo500.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\500combo.wav”)
音效播放.combo600.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\600combo.wav”)
音效播放.combo700.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\700combo.wav”)
音效播放.combo800.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\800combo.wav”)
音效播放.combo900.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\900combo.wav”)
音效播放.combo1000.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\1000combo.wav”)
界面音效.大鼓音效.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\dong_l.wav”)
界面音效.大哒音效.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\ka_l.wav”)
暂停菜单声音1.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\menuback.wav”)
普面移动倍数 ＝ 1
灯光初始化 ()
现行横幅透明度 ＝ 255
COMBO文字缩放变量 ＝ 800
Bar现行透明度 ＝ 0

.子程序 游戏渲染
.局部变量 COMBO文字, 文本型
.局部变量 COMBO文字长度, 整数型

.如果 (歌曲是否有动画 ＝ 真)
    动画视频 ()
.否则
    动态背景 ()
.如果结束
难度图标显示 ()
太鼓人 ()
太鼓Bar ()
火焰显示 ()
太鼓 ()
调试信息 ()
太鼓.显示高级 (0, 149, 0, 0.8, 0.8)
.如果 (自动模式 ＝ 真)

.否则
    游戏按键逻辑 ()
.如果结束
自动显示 ()
COMBO显示 ()
打击标志显示 ()
魂满人群显示 ()
.如果真 (MOD开关.灯光MOD ＝ 真)
    灯光显示 ()
.如果真结束
魂条 ()
连段显示 ()
弹出太鼓显示 ()
分数 ()
魂显示 ()
MOD图标显示 ()
高潮粒子显示 ()
闪光精灵显示 ()
暂停菜单显示 ()
鼠标显示 ()

.子程序 暂停菜单显示, , , 这里渲染在游戏进行中按ESC的退出选项

.如果真 (暂停菜单透明度 ≠ 0)  ' 在透明度为0时不渲染
    暂停菜单背景.显示高级 (0, 0, 0, 分辨率.遮罩缩放X, 分辨率.遮罩缩放Y)
    暂停菜单按钮.返回菜单.显示高级 (分辨率.窗口宽度 ÷ 2, 400, 0, 暂停菜单按钮缩放.返回菜单 ÷ 1000, 暂停菜单按钮缩放.返回菜单 ÷ 1000)
.如果真结束


.子程序 调试信息, , , 显示调试信息
.局部变量 n, 整数型
.局部变量 n2, 整数型

.如果 (调试信息显示 ＝ 真)
    .计次循环首 (取数组成员数 (太鼓X坐标), n)
        .如果 (太鼓X坐标 [n].坐标鼓 [1].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≥ 1300)

        .否则
            .如果 (太鼓X坐标 [n].坐标鼓 [1].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≤ 0)

            .否则
                标题文字精灵.显示 (太鼓X坐标 [n].坐标鼓 [1].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 267, 太鼓X坐标 [n].调试信息)
            .如果结束

        .如果结束

    .计次循环尾 ()
.否则

.如果结束


.子程序 MOD图标显示, , , 也就是自动模式时显示的AUTO图标
.局部变量 n, 整数型

.如果 (自动模式 ＝ 真)
    MOD图标.置纹理_指针 (MOD纹理.自动MOD.纹理)
    MOD图标.显示高级 (分辨率.窗口宽度 － 70, 100, 0, 0.7, 0.7)
    n ＝ n ＋ 1
.否则

.如果结束
.如果 (MOD开关.灯光MOD ＝ 真)
    MOD图标.置纹理_指针 (MOD纹理.手电筒MOD.纹理)
    MOD图标.显示高级 (分辨率.窗口宽度 － 70 － 20 × n, 100, 0, 0.7, 0.7)
    n ＝ n ＋ 1
.否则

.如果结束


.子程序 难度图标显示, , , 太鼓小人旁边的难度图标

难度图标.专家.显示高级 (100, -90, 0, 0.7, 0.7)

.子程序 魂显示, , , 魂条上的魂字

.如果 (魂条百分比 ＝ 100)

.否则
    .如果 (魂条百分比 ≥ 50 且 魂条百分比 ＜ 100)
        魂精灵.置当前帧 (1)
    .否则
        魂精灵.置当前帧 (0)
    .如果结束

.如果结束
魂粒子.显示 ()
魂精灵.显示高级 (分辨率.窗口宽度 － 30, 35, 0, 魂缩放, 魂缩放)

.子程序 魂逻辑, , , 魂条上的魂字的缩放逻辑
.局部变量 a, 小数型

魂精灵.更新 (引擎.取最后帧时间 ())
.如果 (魂缩放 － 帧率数据处理 (0.05) ≤ 1)
    魂缩放 ＝ 1
.否则
    魂缩放 ＝ 魂缩放 － 帧率数据处理 (0.05)
.如果结束


.子程序 火焰显示, , , 太鼓打击点上的火焰，当歌曲高潮部分时显示

火焰精灵.置透明度 (火焰透明度)
.如果 (火焰透明度 ＝ 0)  ' 透明度为0时不渲染

.否则
    火焰精灵.显示高级 (132, 138, 0, 0.7, 0.7)
.如果结束


.子程序 分数, , , 分数的显示，包括分数排版，分数显示是使用PNG格式的图片，详见Game.PAK
.局部变量 分数文字, 文本型
.局部变量 分数文字长度, 整数型
.局部变量 n, 整数型
.局部变量 分数文字变量, 整数型, 静态
.局部变量 分数文字变量文本, 文本型
.局部变量 分数差量, 整数型

分数文字 ＝ 到文本 (分数)
分数差量 ＝ 分数 － 分数文字变量
' 分数的动态增加
.如果真 (暂停菜单 ＝ 假)
    .如果 (分数文字变量 ＋ 分数差量 ÷ 10 ≥ 分数)
        分数文字变量 ＝ 分数
    .否则
        分数文字变量 ＝ 分数文字变量 ＋ 分数差量 ÷ 10
    .如果结束

.如果真结束
分数文字变量文本 ＝ 到文本 (分数文字变量)
分数文字长度 ＝ 取文本长度 (分数文字变量文本)
.计次循环首 (10, n)
    数字 [n].置透明度 (255)
.计次循环尾 ()
' 分数排版
.计次循环首 (分数文字长度, n)
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “0”)
        数字 [10].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “1”)
        数字 [1].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “2”)
        数字 [2].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “3”)
        数字 [3].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “4”)
        数字 [4].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “5”)
        数字 [5].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “6”)
        数字 [6].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “7”)
        数字 [7].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “8”)
        数字 [8].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束
    .如果 (取文本中间 (分数文字变量文本, n, 1) ＝ “9”)
        数字 [9].显示高级 (分辨率.窗口宽度 － 30 － 分数文字长度 × 17 ＋ 17 × (n － 1), 80, 0, 0.5, 0.5)
    .否则

    .如果结束

.计次循环尾 ()

.子程序 COMBO显示, , , COMBO数显示，COMBO也就是连击
.局部变量 COMBO文字, 文本型
.局部变量 COMBO文字长度, 整数型
.局部变量 n, 整数型
.局部变量 差值, 小数型

COMBO文字 ＝ 到文本 (COMBO)
COMBO文字长度 ＝ 取文本长度 (COMBO文字)
.如果 (COMBO变量 ＝ COMBO)

.否则
    COMBO变量 ＝ COMBO
    .如果 (COMBO ＝ 0)

    .否则
        COMBO文字缩放变量 ＝ 1100
    .如果结束
    combo音效 (COMBO)  ' 调用音效，当COMBO满足条件时播放
.如果结束
.如果真 (暂停菜单 ＝ 假)
    .如果 (COMBO文字缩放变量 ≤ 800)
        COMBO文字缩放变量 ＝ 800
    .否则
        COMBO文字缩放变量 ＝ COMBO文字缩放变量 － 帧率数据处理 (30)
    .如果结束

.如果真结束
.计次循环首 (10, n)
    数字 [n].置透明度 (255)  ' 因为和分数、连段显示公用数字精灵，所以需要设置一下。
.计次循环尾 ()
' COMBO数排版显示
.计次循环首 (COMBO文字长度, n)
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “0”)
        数字 [10].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “1”)
        数字 [1].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “2”)
        数字 [2].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “3”)
        数字 [3].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “4”)
        数字 [4].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “5”)
        数字 [5].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “6”)
        数字 [6].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “7”)
        数字 [7].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “8”)
        数字 [8].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束
    .如果 (取文本中间 (COMBO文字, n, 1) ＝ “9”)
        数字 [9].显示高级 (53 － (COMBO文字长度 － 1) × 13 ＋ 25 × (n － 1), 245, 0, 0.8, COMBO文字缩放变量 ÷ 1000)
    .否则

    .如果结束

.计次循环尾 ()

.子程序 combo音效, , , 判断当COMBO满足时播放连段音效
.参数 combo数

.如果 (combo数 ＝ 50)
    引擎.Mu_播放高级 (音效播放.combo50, 100, , , 真)
    闪光 (200)
.否则

.如果结束
.如果 (combo数 ＝ 100)
    引擎.Mu_播放高级 (音效播放.combo100, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 200)
    引擎.Mu_播放高级 (音效播放.combo200, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 300)
    引擎.Mu_播放高级 (音效播放.combo300, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 400)
    引擎.Mu_播放高级 (音效播放.combo400, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 500)
    引擎.Mu_播放高级 (音效播放.combo500, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 600)
    引擎.Mu_播放高级 (音效播放.combo600, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 700)
    引擎.Mu_播放高级 (音效播放.combo700, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 800)
    引擎.Mu_播放高级 (音效播放.combo800, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 900)
    引擎.Mu_播放高级 (音效播放.combo900, 100, , , 真)
.否则

.如果结束
.如果 (combo数 ＝ 1000)
    引擎.Mu_播放高级 (音效播放.combo1000, 100, , , 真)
.否则

.如果结束


.子程序 弹出太鼓显示, , , 太鼓到达打击点时，如果正确打击，则弹出太鼓到魂条，这是一个装饰用得动画效果。
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (弹出太鼓), n)
    .如果 (弹出太鼓 [n].类型 ＝ “蓝”)
        蓝色太鼓.显示高级 (弹出太鼓 [n].X坐标, 弹出太鼓 [n].Y坐标, 0, 弹出太鼓 [n].缩放, 弹出太鼓 [n].缩放)
    .否则

    .如果结束
    .如果 (弹出太鼓 [n].类型 ＝ “红”)
        红色太鼓.显示高级 (弹出太鼓 [n].X坐标, 弹出太鼓 [n].Y坐标, 0, 弹出太鼓 [n].缩放, 弹出太鼓 [n].缩放)
    .否则

    .如果结束
    .如果 (弹出太鼓 [n].类型 ＝ “大蓝”)
        蓝色太鼓大.显示高级 (弹出太鼓 [n].X坐标, 弹出太鼓 [n].Y坐标, 0, 弹出太鼓 [n].缩放, 弹出太鼓 [n].缩放)
    .否则

    .如果结束
    .如果 (弹出太鼓 [n].类型 ＝ “大红”)
        红色太鼓大.显示高级 (弹出太鼓 [n].X坐标, 弹出太鼓 [n].Y坐标, 0, 弹出太鼓 [n].缩放, 弹出太鼓 [n].缩放)
    .否则

    .如果结束

.计次循环尾 ()

.子程序 弹出太鼓逻辑, , , 弹出太鼓的逻辑
.局部变量 n, 整数型
.局部变量 a, 小数型
.局部变量 c, 双精度小数型
.局部变量 d, 双精度小数型
.局部变量 y, 小数型

a ＝ 20 ÷ 0.017
c ＝ 13680 ÷ (分辨率.窗口宽度 － 40)
d ＝ 25200 ÷ (分辨率.窗口宽度 － 40)
' 弹出太鼓的坐标计算和缩放计算，使用的是抛物线公式Y=AX平方+BX+C
.计次循环首 (取数组成员数 (弹出太鼓), n)
    弹出太鼓 [n].X坐标 ＝ 加速度公式 (弹出太鼓 [n].X坐标, 分辨率.窗口宽度 － 40, 0.2, 0.3)
    y ＝ 弹出太鼓 [n].X坐标 － 分辨率.弹出太鼓1
    弹出太鼓 [n].Y坐标 ＝ y × y × 分辨率.弹出太鼓2 ＋ 分辨率.弹出太鼓3

    弹出太鼓 [n].缩放 ＝ (分辨率.窗口宽度 － 40 － 弹出太鼓 [n].X坐标 － 20 ＋ 帧率数据处理 (c)) ÷ 1000
    .如果 (弹出太鼓 [n].类型 ＝ “蓝” 或 弹出太鼓 [n].类型 ＝ “红”)
        .如果 (弹出太鼓 [n].缩放 ≥ 0.6)
            弹出太鼓 [n].缩放 ＝ 0.6
        .否则

        .如果结束

    .否则
        .如果 (弹出太鼓 [n].缩放 ≥ 1)
            弹出太鼓 [n].缩放 ＝ 1
        .否则

        .如果结束

    .如果结束


.计次循环尾 ()
' 当太鼓到达魂条时删除。
.计次循环首 (取数组成员数 (弹出太鼓), n)
    .如果 (弹出太鼓 [n].缩放 ＝ 0)
        删除成员 (弹出太鼓, n, 1)
        跳出循环 ()
    .否则

    .如果结束

.计次循环尾 ()

.子程序 打击标志, , , 在打击点正确打击时显示的标志
.参数 类型, 文本型
.局部变量 临时, 打击标志

.如果 (类型 ＝ “黄”)
    临时.类型 ＝ “黄”
    临时.透明度 ＝ 255
    加入成员 (打击标志, 临时)
.否则

.如果结束
.如果 (类型 ＝ “黄大”)
    临时.类型 ＝ “黄大”
    临时.透明度 ＝ 255
    加入成员 (打击标志, 临时)
.否则

.如果结束
.如果 (类型 ＝ “银”)
    临时.类型 ＝ “银”
    临时.透明度 ＝ 255
    加入成员 (打击标志, 临时)
.否则

.如果结束
.如果 (类型 ＝ “银大”)
    临时.类型 ＝ “银大”
    临时.透明度 ＝ 255
    加入成员 (打击标志, 临时)
.否则

.如果结束


.子程序 打击标志显示, , , 打击标志的显示
.局部变量 n, 整数型

.如果真 (暂停菜单 ＝ 假)
    .计次循环首 (取数组成员数 (打击标志), n)
        .如果 (打击标志 [n].类型 ＝ “银”)
            .如果 (打击标志 [n].透明度 － 帧率数据处理 (15) ≤ 0)
                打击标志 [n].透明度 ＝ 0
            .否则
                打击标志 [n].透明度 ＝ 打击标志 [n].透明度 － 帧率数据处理 (15)
            .如果结束

        .否则
        .如果结束
        .如果 (打击标志 [n].类型 ＝ “银大”)
            .如果 (打击标志 [n].透明度 － 帧率数据处理 (15) ≤ 0)
                打击标志 [n].透明度 ＝ 0
            .否则
                打击标志 [n].透明度 ＝ 打击标志 [n].透明度 － 帧率数据处理 (15)
            .如果结束

        .否则
        .如果结束
        .如果 (打击标志 [n].类型 ＝ “黄”)
            .如果 (打击标志 [n].透明度 － 帧率数据处理 (15) ≤ 0)
                打击标志 [n].透明度 ＝ 0
            .否则
                打击标志 [n].透明度 ＝ 打击标志 [n].透明度 － 帧率数据处理 (15)
            .如果结束

        .否则
        .如果结束
        .如果 (打击标志 [n].类型 ＝ “黄大”)
            .如果 (打击标志 [n].透明度 － 帧率数据处理 (15) ≤ 0)
                打击标志 [n].透明度 ＝ 0
            .否则
                打击标志 [n].透明度 ＝ 打击标志 [n].透明度 － 帧率数据处理 (15)
            .如果结束

        .否则
        .如果结束

    .计次循环尾 ()
.如果真结束
.计次循环首 (取数组成员数 (打击标志), n)
    .如果 (打击标志 [n].类型 ＝ “银”)
        打击表志银.置透明度 (打击标志 [n].透明度)
        打击表志银.显示高级 (120, 125, 0, 0.8, 0.8)
    .否则

    .如果结束
    .如果 (打击标志 [n].类型 ＝ “银大”)
        打击表志银大.置透明度 (打击标志 [n].透明度)
        打击表志银大.显示高级 (111, 117, 0, 0.8, 0.8)
    .否则

    .如果结束
    .如果 (打击标志 [n].类型 ＝ “黄”)
        打击标志黄.置透明度 (打击标志 [n].透明度)
        打击标志黄.显示高级 (120, 125, 0, 0.8, 0.8)
    .否则

    .如果结束
    .如果 (打击标志 [n].类型 ＝ “黄大”)
        打击标志黄大.置透明度 (打击标志 [n].透明度)
        打击标志黄大.显示高级 (111, 117, 0, 0.8, 0.8)
    .否则

    .如果结束

.计次循环尾 ()
' 当打击标志显示完毕后删除
.计次循环首 (取数组成员数 (打击标志), n)
    .如果 (打击标志 [n].透明度 ≤ 0)
        删除成员 (打击标志, n, 1)
        跳出循环 ()
    .否则

    .如果结束

.计次循环尾 ()

.子程序 自动显示, , , 这个是太鼓（COMBO数覆盖的那个）上的效果显示。

.如果真 (哒左透明度 ≠ 0)
    太鼓哒反.置透明度 (哒左透明度)
    太鼓哒反.显示高级 (10, 178, 0, 0.8, 0.8)
.如果真结束
.如果真 (咚右透明度 ≠ 0)
    太鼓咚反.置透明度 (咚右透明度)
    太鼓咚反.显示高级 (69, 189, 0, 0.8, 0.8)
.如果真结束
.如果真 (哒右透明度 ≠ 0)
    太鼓哒.置透明度 (哒右透明度)
    太鼓哒.显示高级 (68, 178, 0, 0.8, 0.8)
.如果真结束
.如果真 (咚左透明度 ≠ 0)
    太鼓咚.置透明度 (咚左透明度)
    太鼓咚.显示高级 (23, 189, 0, 0.8, 0.8)
.如果真结束


.子程序 自动显示逻辑, , , 同上

.如果 (咚左 ≤ 0 且 哒左 ≤ 0 且 咚右 ≤ 0 且 哒右 ≤ 0)
    难度图标.专家.置渲染区域 (0, 0, 450, 450)
.否则
    难度图标.专家.置渲染区域 (450, 0, 450, 450)
.如果结束
.如果 (咚左 ≤ 0)
    .如果 (咚左透明度 － 帧率数据处理 (30) ≤ 0)
        咚左透明度 ＝ 0
    .否则
        咚左透明度 ＝ 咚左透明度 － 帧率数据处理 (30)
    .如果结束

.否则
    咚左透明度 ＝ 255
    咚左 ＝ 咚左 － 帧率数据处理 (0.5)
.如果结束
.如果 (哒左 ≤ 0)
    .如果 (哒左透明度 － 帧率数据处理 (30) ≤ 0)
        哒左透明度 ＝ 0
    .否则
        哒左透明度 ＝ 哒左透明度 － 帧率数据处理 (30)
    .如果结束

.否则
    哒左透明度 ＝ 255
    哒左 ＝ 哒左 － 帧率数据处理 (0.5)
.如果结束
.如果 (咚右 ≤ 0)
    .如果 (咚右透明度 － 帧率数据处理 (30) ≤ 0)
        咚右透明度 ＝ 0
    .否则
        咚右透明度 ＝ 咚右透明度 － 帧率数据处理 (30)
    .如果结束

.否则
    咚右透明度 ＝ 255
    咚右 ＝ 咚右 － 帧率数据处理 (0.5)
.如果结束
.如果 (哒右 ≤ 0)
    .如果 (哒右透明度 － 帧率数据处理 (30) ≤ 0)
        哒右透明度 ＝ 0
    .否则
        哒右透明度 ＝ 哒右透明度 － 帧率数据处理 (30)
    .如果结束

.否则
    哒右透明度 ＝ 255
    哒右 ＝ 哒右 － 帧率数据处理 (0.5)
.如果结束


.子程序 太鼓, , , 太鼓的显示，也就是移动的一个个鼓
.局部变量 n, 整数型
.局部变量 X, 整数型
.局部变量 n2

.计次循环首 (取数组成员数 (太鼓X坐标), n)
    ' 用于分段画线
    .如果 (太鼓X坐标 [n].坐标鼓 [1].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X ≥ 分辨率.窗口宽度 ＋ 200)

    .否则
        .如果 (太鼓X坐标 [n].坐标鼓 [1].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X ≤ 0)

        .否则
            .如果 (太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “连打结束大” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “连打结束” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “连打条” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “连打条大” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “红” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “蓝” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “大蓝” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “大红” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “连打” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “连打大” 或 太鼓X坐标 [n].坐标鼓 [1].类型 ＝ “空”)
                引擎.画线 (太鼓X坐标 [n].坐标鼓 [1].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 158, 太鼓X坐标 [n].坐标鼓 [1].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 297, #颜色_白)
            .否则

            .如果结束

        .如果结束

    .如果结束
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “连打结束大”)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X ≥ 分辨率.窗口宽度 ＋ 200)

            .否则
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X ≤ 0)

                .否则
                    连打结束块.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 226, 0, 1, 1)
                .如果结束

            .如果结束

        .否则
        .如果结束
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “连打结束”)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≥ 分辨率.窗口宽度 ＋ 200)

            .否则
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≤ 0)

                .否则
                    连打结束块.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 221, 0, 0.6, 0.6)
                .如果结束

            .如果结束

        .否则
        .如果结束

    .计次循环尾 ()
.计次循环尾 ()
.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “连打条”)
            .计次循环首 (太鼓X坐标 [n].坐标鼓 [n2].连打长度 ＋ 1, X)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X ≥ 分辨率.窗口宽度 ＋ 200)

                .否则
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X ≤ 0)

                    .否则
                        连打条.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X, 221, 0, 1, 0.6)
                    .如果结束

                .如果结束

            .计次循环尾 ()
        .否则

        .如果结束
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “连打条大”)
            .计次循环首 (太鼓X坐标 [n].坐标鼓 [n2].连打长度, X)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X ≥ 分辨率.窗口宽度 ＋ 200)

                .否则
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X ≤ 0)

                    .否则
                        连打条.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ＋ X, 226, 0, 1, 1)
                    .如果结束

                .如果结束

            .计次循环尾 ()
        .否则

        .如果结束

    .计次循环尾 ()
.计次循环尾 ()
.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≥ 分辨率.窗口宽度 ＋ 200)

            .否则
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≤ 0)

                .否则
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “红”)
                        红色太鼓.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 227, 0, 0.6, 0.6)
                    .否则

                    .如果结束
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “蓝”)
                        蓝色太鼓.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 227, 0, 0.6, 0.6)
                    .否则

                    .如果结束
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “大蓝”)
                        蓝色太鼓大.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 221, 0, 1, 1)
                    .否则

                    .如果结束
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “大红”)
                        红色太鼓大.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 221, 0, 1, 1)
                    .否则

                    .如果结束
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “连打”)
                        连打太鼓.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 221, 0, 0.6, 0.6)
                    .否则

                    .如果结束
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “连打大”)
                        连打太鼓大.显示高级 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220, 227, 0, 1, 1)
                    .否则

                    .如果结束

                .如果结束

            .如果结束

        .否则

        .如果结束

    .计次循环尾 ()
.计次循环尾 ()

.子程序 游戏逻辑
.局部变量 最后帧时间, 小数型

最后帧时间 ＝ 引擎.取最后帧时间 ()
延迟 ()
按键检测 ()
.如果 (暂停菜单 ＝ 真)

.否则
    .如果 (创建游戏 ＝ 真)

    .否则
        遮罩切换 (“UI”, 20, &遮罩切换播放)
    .如果结束
    太鼓小人.更新 (最后帧时间)
    太鼓小人2.更新 (最后帧时间)
    魂粒子.更新 (最后帧时间)
    动画逻辑 ()
    太鼓Bar逻辑 ()
    自动显示逻辑 ()
    .如果 (太鼓动画 ＝ 1)
        红色太鼓.更新 (最后帧时间)
        蓝色太鼓.更新 (最后帧时间)
        红色太鼓大.更新 (最后帧时间)
        蓝色太鼓大.更新 (最后帧时间)
    .否则
        红色太鼓.置当前帧 (0)
        蓝色太鼓.置当前帧 (0)
        红色太鼓大.置当前帧 (0)
        蓝色太鼓大.置当前帧 (0)
    .如果结束
    .如果 (玩家COMBO ÷ (太鼓总数 ÷ 2) × 100 ≥ 100)
        魂条百分比 ＝ 100
    .否则
        魂条百分比 ＝ 玩家COMBO ÷ (太鼓总数 ÷ 2) × 100
    .如果结束
    .如果 (歌曲是否有动画 ＝ 真)

    .否则
        横幅逻辑 ()
    .如果结束
    .如果 (COMBO ≥ 50)
        太鼓动画 ＝ 1
    .否则
        太鼓动画 ＝ 0
    .如果结束
    火焰逻辑 ()
    魂逻辑 ()
    太鼓移动逻辑 ()
    弹出太鼓逻辑 ()
    高潮粒子逻辑 ()
    吉祥物逻辑 ()
    调整缩放值 ()
    连段逻辑 ()
    MOD图标逻辑 ()
    魂满人群逻辑 ()
    闪光逻辑 ()
.如果结束
暂停菜单 ()

.子程序 暂停菜单, , , ESC菜单的逻辑

.如果 (暂停菜单 ＝ 真)
    .如果 (暂停菜单透明度 ＋ 帧率数据处理 (20) ≥ 150)
        .如果真 (暂停菜单透明度 ≠ 150)
            暂停菜单透明度 ＝ 150
        .如果真结束

    .否则
        暂停菜单透明度 ＝ 暂停菜单透明度 ＋ 帧率数据处理 (20)
    .如果结束

.否则
    .如果 (暂停菜单透明度 － 帧率数据处理 (20) ≤ 0)
        .如果真 (暂停菜单透明度 ≠ 0)
            暂停菜单透明度 ＝ 0
        .如果真结束

    .否则
        暂停菜单透明度 ＝ 暂停菜单透明度 － 帧率数据处理 (20)
    .如果结束

.如果结束
暂停菜单背景.置透明度 (暂停菜单透明度)
暂停菜单按钮.返回菜单.置透明度 (暂停菜单透明度 ＋ 105)

' 暂停菜单按钮
.如果 (暂停菜单 ＝ 真)
    .如果 (判断是否进入区域 (分辨率.窗口宽度 ÷ 2 － 190, 分辨率.窗口宽度 ÷ 2 ＋ 199, 342, 458) ＝ 真)
        .如果 (引擎.取按键选中 (#鼠标左键))
            暂停菜单按钮缩放.返回菜单 ＝ 加速度公式 (暂停菜单按钮缩放.返回菜单, 900, 0.4, 0.3)
        .否则
            暂停菜单按钮缩放.返回菜单 ＝ 加速度公式 (暂停菜单按钮缩放.返回菜单, 1000, 0.4, 0.6)
        .如果结束

    .否则
        暂停菜单按钮缩放.返回菜单 ＝ 加速度公式 (暂停菜单按钮缩放.返回菜单, 800, 0.4, 0.3)
    .如果结束

    .如果 (引擎.取按键弹起 (#鼠标左键) 且 判断是否进入区域 (分辨率.窗口宽度 ÷ 2 － 190, 分辨率.窗口宽度 ÷ 2 ＋ 199, 342, 458) ＝ 真)
        遮罩切换 (“UI”, 20, &遮罩切换播放)
        引擎.Mu_播放高级 (暂停菜单声音1, 100, , , 真)
        引擎.置标题 (#游戏标题 ＋ “ ” ＋ #版本号)
    .否则

    .如果结束

.否则
    暂停菜单按钮缩放.返回菜单 ＝ 加速度公式 (暂停菜单按钮缩放.返回菜单, 0, 0.4, 0.3)
.如果结束



.子程序 MOD图标逻辑, , , AUTO那种图标的显示逻辑，非自动模式时会隐藏

.如果 (游戏开始 ＝ 真)
    .如果 (自动模式 ＝ 真)
        MOD纹理透明度 ＝ 255
    .否则
        .如果 (MOD纹理透明度 － 帧率数据处理 (10) ≤ 100)
            MOD纹理透明度 ＝ 100
        .否则
            MOD纹理透明度 ＝ MOD纹理透明度 － 帧率数据处理 (10)
        .如果结束

    .如果结束

.否则
.如果结束
MOD图标.置透明度 (MOD纹理透明度)

.子程序 连段逻辑, , , 显示连段的逻辑，连段也就是当符合COMBO数时自动弹出红色框框
.局部变量 combo数, 整数型, 静态
.局部变量 combo文本, 文本型
.局部变量 combo文本2, 文本型
.局部变量 临时连段, 连段
.局部变量 x, 整数型

combo文本 ＝ 到文本 (COMBO)
combo文本2 ＝ 取文本中间 (combo文本, 取文本长度 (combo文本) － 1, 1)
combo文本 ＝ 取文本中间 (combo文本, 取文本长度 (combo文本), 1)
.如果 (combo文本 ＝ “0” 且 COMBO ≠ 0)
    .如果 (COMBO ≥ 500)
        .如果 (combo文本2 ＝ “0” 或 combo文本2 ＝ “5”)
            .如果 (combo数 ≠ COMBO)
                临时连段.COMBO连段缩放 ＝ 1.5
                临时连段.COMBO连段数字 ＝ COMBO
                临时连段.透明度 ＝ 255
                置随机数种子 ()
                临时连段.角度 ＝ (取随机数 (100, 200) － 100) ÷ 1000
                加入成员 (连段, 临时连段)
                combo数 ＝ COMBO
            .否则
                combo数 ＝ COMBO
            .如果结束

        .否则
        .如果结束

    .否则
        .如果 (combo数 ≠ COMBO)
            临时连段.COMBO连段缩放 ＝ 1.5
            临时连段.COMBO连段数字 ＝ COMBO
            临时连段.透明度 ＝ 255
            置随机数种子 ()
            临时连段.角度 ＝ (取随机数 (100, 200) － 100) ÷ 1000
            加入成员 (连段, 临时连段)
            combo数 ＝ COMBO
        .否则
            combo数 ＝ COMBO
        .如果结束

    .如果结束

.否则
    combo数 ＝ COMBO
.如果结束
.计次循环首 (取数组成员数 (连段), x)
    .如果 (连段 [x].COMBO连段缩放 － 帧率数据处理 (0.05) ≤ 1)
        连段 [x].COMBO连段缩放 ＝ 1
    .否则
        连段 [x].COMBO连段缩放 ＝ 连段 [x].COMBO连段缩放 － 帧率数据处理 (0.05)
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (连段), x)
    .如果 (连段 [x].COMBO连段缩放 ＝ 1)
        .如果 (连段 [x].延迟 ＋ 引擎.取最后帧时间 () ≥ 1.5)
            连段 [x].延迟 ＝ 1.5
        .否则
            连段 [x].延迟 ＝ 连段 [x].延迟 ＋ 引擎.取最后帧时间 ()
        .如果结束

    .否则
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (连段), x)
    .如果 (连段 [x].延迟 ＝ 1.5)
        .如果 (连段 [x].透明度 － 帧率数据处理 (15) ≤ 0)
            连段 [x].透明度 ＝ 0
        .否则
            连段 [x].透明度 ＝ 连段 [x].透明度 － 帧率数据处理 (15)
        .如果结束

    .否则
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (连段), x)
    .如果 (连段 [x].透明度 ＝ 0)
        删除成员 (连段, x, 1)
        跳出循环 ()
    .否则

    .如果结束

.计次循环尾 ()

.子程序 魂满人群显示, , , 当魂条满时底部会出现人群上下移动

魂满人.置渲染区域 (0, 0, 400, 317)
魂满人.显示 (0, 魂满人Y)
魂满人.置渲染区域 (400, 0, 400, 317)
魂满人.显示 (分辨率.窗口宽度 － 400, 魂满人Y)

.子程序 连段显示, , , 依旧是COMBO满足时弹出的红色框框
.局部变量 x, 整数型
.局部变量 COMBO文字, 文本型
.局部变量 COMBO文字长度, 整数型
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (连段), x)
    COMBO连段.置透明度 (连段 [x].透明度)
    COMBO连段.显示高级 (300, 80, 连段 [x].角度, 连段 [x].COMBO连段缩放, 连段 [x].COMBO连段缩放)
    COMBO文字 ＝ 到文本 (连段 [x].COMBO连段数字)
    COMBO文字长度 ＝ 取文本长度 (COMBO文字)
    .计次循环首 (10, n)
        数字 [n].置透明度 (连段 [x].透明度)
    .计次循环尾 ()
    .计次循环首 (COMBO文字长度, n)
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “0”)
            数字 [10].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “1”)
            数字 [1].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “2”)
            数字 [2].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “3”)
            数字 [3].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “4”)
            数字 [4].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “5”)
            数字 [5].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “6”)
            数字 [6].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “7”)
            数字 [7].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “8”)
            数字 [8].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束
        .如果 (取文本中间 (COMBO文字, n, 1) ＝ “9”)
            数字 [9].显示高级 (310 － (COMBO文字长度 － 1) × 25 ＋ 25 × (n － 1), 100, 0, 0.8, 0.8)
        .否则

        .如果结束

    .计次循环尾 ()
.计次循环尾 ()

.子程序 魂满人群逻辑, , , 底部人群上下移动的逻辑
.局部变量 人群差值, 小数型
.局部变量 人群加速度, 小数型
.局部变量 人群速度, 小数型
.局部变量 方向, 整数型, 静态
.局部变量 百分比, 整数型, 静态

.如果 (魂条百分比 ＝ 100)
    .如果 (百分比 ≠ 魂条百分比)
        闪光 ()
        百分比 ＝ 魂条百分比
    .否则
        百分比 ＝ 魂条百分比
    .如果结束

.否则
    百分比 ＝ 魂条百分比
.如果结束
.如果 (魂条百分比 ＝ 100)
    .如果 (魂满人Y ≤ 300)
        方向 ＝ 0
    .否则

    .如果结束
    .如果 (魂满人Y ≥ 450)
        方向 ＝ 1
    .否则

    .如果结束
    .如果 (方向 ＝ 1)
        人群差值 ＝ 300 － 魂满人Y
        人群加速度 ＝ 人群差值 × 0.4
        人群速度 ＝ 人群速度 ＋ 人群加速度
        人群速度 ＝ 四舍五入 (人群速度 × 0.4, )
        魂满人Y ＝ 魂满人Y ＋ 帧率数据处理 (人群速度)
        .如果 (人群速度 ＝ 0)
            魂满人Y ＝ 300
        .否则

        .如果结束

    .否则
    .如果结束
    .如果 (方向 ＝ 0)
        人群差值 ＝ 600 － 魂满人Y
        人群加速度 ＝ 人群差值 × 0.4
        人群速度 ＝ 人群速度 ＋ 人群加速度
        人群速度 ＝ 四舍五入 (人群速度 × 0.4, )
        魂满人Y ＝ 魂满人Y ＋ 帧率数据处理 (人群速度)
        .如果 (人群速度 ＝ 0)
            魂满人Y ＝ 600
        .否则

        .如果结束

    .否则
    .如果结束

.否则
    .如果 (魂满人Y ≥ 700)
        魂满人Y ＝ 700
    .否则
        人群差值 ＝ 700 － 魂满人Y
        人群加速度 ＝ 人群差值 × 0.3
        人群速度 ＝ 人群速度 ＋ 人群加速度
        人群速度 ＝ 四舍五入 (人群速度 × 0.4, )
        魂满人Y ＝ 魂满人Y ＋ 帧率数据处理 (人群速度)

    .如果结束

.如果结束


.子程序 闪光逻辑, , , 高潮时屏幕闪一下

.如果 (闪光精灵透明度 － 帧率数据处理 (5) ≤ 0)
    闪光精灵透明度 ＝ 0
.否则
    闪光精灵透明度 ＝ 闪光精灵透明度 － 帧率数据处理 (5)
    闪光精灵.置透明度 (闪光精灵透明度)
.如果结束


.子程序 闪光, , , 高潮时屏幕闪一下
.参数 透明度, 整数型, 可空

.如果 (透明度 ＝ 0)
    闪光精灵透明度 ＝ 255
.否则
    闪光精灵透明度 ＝ 透明度
.如果结束


.子程序 按键检测, , , 检测按键。并作出判断

.如果 (引擎.取按键按下 (#Esc键))
    .如果 (计时延迟 ＝ 真)

    .否则
        .如果 (游戏开始 ＝ 真)
            计时延迟 ＝ 假
            游戏开始 ＝ 假
            暂停菜单 ＝ 真
            引擎.Mu_停止 (音效 [3])
        .否则
            计时延迟 ＝ 假
            游戏开始 ＝ 真
            引擎.Mu_播放 (音效 [3])
            暂停菜单 ＝ 假
        .如果结束

    .如果结束

.否则
.如果结束


.子程序 闪光精灵显示, , , 闪一下

.如果 (闪光精灵透明度 ＝ 0)

.否则
    闪光精灵.显示高级 (-10, -10, 0, 6, 5)
.如果结束


.子程序 吉祥物逻辑, , , 左上角上的小人

.如果 (魂条百分比 ＝ 100)
    太鼓小人.置帧数 (2)
    太鼓小人.置纹理_指针 (魂满太鼓小人1纹理)
    太鼓小人2.置纹理_指针 (魂满太鼓小人2纹理)
.否则
    太鼓小人.置帧数 (6)
    太鼓小人.置纹理_指针 (太鼓小人1纹理)
    太鼓小人2.置纹理_指针 (太鼓小人2纹理)
.如果结束


.子程序 太鼓移动逻辑, , , 核心部分，也就是太鼓在音乐播放时移动！以及自动模式的逻辑
.局部变量 n, 整数型
.局部变量 咚左右变量, 整数型, 静态
.局部变量 哒左右变量, 整数型, 静态
.局部变量 临时弹出太鼓, 弹出太鼓
.局部变量 连打交替, 整数型, 静态
.局部变量 连打交替大, 整数型, 静态
.局部变量 n2, 整数型

帧数差值 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60
.如果真 (游戏开始 ＝ 假)
    太鼓移动坐标 ＝ 太鼓移动坐标 － 帧数差值 × 引擎.取最后帧时间 ()

.如果真结束
.如果 (游戏开始 ＝ 真)
    太鼓移动坐标 ＝ 太鼓移动坐标 － 帧数差值 × 引擎.取最后帧时间 ()
    .如果 (引擎.Mu_播放取状态 (音效 [3]) ＝ 1)
        太鼓移动坐标 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60 × (－BASS_ChannelBytes2Seconds (音效 [3].句柄, BASS_ChannelGetPosition (音效 [3].句柄, 0)) － OFFSET)  ' 音乐开始播放时移动，这样计算可以更准确！
    .否则

    .如果结束

.否则
.如果结束

' 判断参数，当参数到达打击点自动执行
.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “线”)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≤ 100)
                分数叠加 ＝ 分数叠加 ＋ 叠加分数渐进
                删除成员 (太鼓X坐标 [n].坐标鼓, n2, 1)
                跳出循环 ()
            .否则

            .如果结束

        .否则
        .如果结束
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ＋ 220 ≤ 222)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “高潮”)
                    太鼓高潮 ＝ 1
                    火焰开关 ＝ 真
                    音乐高潮 ＝ 真
                    闪光 ()
                    太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                .否则

                .如果结束

            .否则
            .如果结束
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “高潮关”)
                    太鼓高潮 ＝ 0
                    火焰开关 ＝ 假
                    音乐高潮 ＝ 假
                    太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                .否则

                .如果结束

            .否则
            .如果结束
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “动态BPM”)
                    音乐BPM ＝ 太鼓X坐标 [n].动态BPM
                    太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                .否则

                .如果结束

            .否则
            .如果结束
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “游戏结束”)
                    .如果 (COMBO ＝ 太鼓总数)
                        引擎.Mu_播放高级 (音效播放.FUUCOMBO, 100, , , 真)
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束
                    设定缩放 (3)
                    遮罩切换 (“UI”, 10, &遮罩切换播放)
                    引擎.置标题 (#游戏标题 ＋ “ ” ＋ #版本号)
                .否则

                .如果结束

            .否则
            .如果结束

        .否则
        .如果结束

    .计次循环尾 ()

    ' 这里是自动模式的逻辑，判断很简单，到达指定坐标就执行一些逻辑
    .如果 (自动模式 ＝ 真)
        .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≤ 222)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “红”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        引擎.Mu_播放高级 (音效 [2], 咚哒音量, , , 真)
                        .如果 (咚左右变量 ＝ 0)
                            咚左 ＝ 4
                            咚左右变量 ＝ 1
                        .否则
                            咚右 ＝ 4
                            咚左右变量 ＝ 0
                        .如果结束
                        打击标志 (“黄”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.类型 ＝ “红”
                        临时弹出太鼓.缩放 ＝ 0.6
                        分数 ＝ 分数 ＋ 分数叠加
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        魂缩放 ＝ 1.5
                        魂粒子.启动到 (分辨率.窗口宽度 － 30, 35)
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则
                .如果结束
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “蓝”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        引擎.Mu_播放高级 (音效 [1], 咚哒音量, , , 真)
                        太鼓哒.显示高级 (68, 178, 0, 0.8, 0.8)
                        .如果 (哒左右变量 ＝ 0)
                            哒左 ＝ 4
                            哒左右变量 ＝ 1
                        .否则
                            哒右 ＝ 4
                            哒左右变量 ＝ 0
                        .如果结束
                        打击标志 (“黄”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.缩放 ＝ 0.6
                        临时弹出太鼓.类型 ＝ “蓝”
                        分数 ＝ 分数 ＋ 分数叠加
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        魂缩放 ＝ 1.5
                        魂粒子.启动到 (分辨率.窗口宽度 － 30, 35)
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则

                .如果结束
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “大蓝”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        引擎.Mu_播放高级 (界面音效.大哒音效, 咚哒音量, , , 真)
                        哒左 ＝ 4
                        哒右 ＝ 4
                        打击标志 (“黄大”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.缩放 ＝ 1
                        临时弹出太鼓.类型 ＝ “大蓝”
                        分数 ＝ 分数 ＋ 分数叠加 × 2
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        魂缩放 ＝ 1.5
                        魂粒子.启动到 (分辨率.窗口宽度 － 30, 35)
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则

                .如果结束
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “大红”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        引擎.Mu_播放高级 (界面音效.大鼓音效, 咚哒音量, , , 真)
                        咚左 ＝ 4
                        咚右 ＝ 4
                        打击标志 (“黄大”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.缩放 ＝ 1
                        临时弹出太鼓.类型 ＝ “大红”
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        分数 ＝ 分数 ＋ 分数叠加 × 2
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        魂缩放 ＝ 1.5
                        .如果 (魂条百分比 ≥ 50)
                            魂粒子.启动到 (分辨率.窗口宽度 － 30, 35)
                        .否则

                        .如果结束
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则

                .如果结束
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “隐藏连打”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        引擎.Mu_播放高级 (音效 [2], 咚哒音量, , , 真)
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.缩放 ＝ 0.6
                        临时弹出太鼓.类型 ＝ “红”
                        .如果 (咚左右变量 ＝ 0)
                            咚左 ＝ 4
                            咚左右变量 ＝ 1
                        .否则
                            咚右 ＝ 4
                            咚左右变量 ＝ 0
                        .如果结束
                        分数 ＝ 分数 ＋ 分数叠加
                        魂缩放 ＝ 1.5
                        魂粒子.启动到 (分辨率.窗口宽度 － 30, 35)
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则

                .如果结束
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “隐藏连打大”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        .如果 (连打交替 ＝ 0)
                            引擎.Mu_播放高级 (音效 [2], 咚哒音量, , , 真)
                            临时弹出太鼓.X坐标 ＝ 222
                            临时弹出太鼓.Y坐标 ＝ 221
                            临时弹出太鼓.缩放 ＝ 1
                            临时弹出太鼓.类型 ＝ “大蓝”
                            哒左 ＝ 4
                            哒右 ＝ 4
                            连打交替 ＝ 1
                            魂缩放 ＝ 1.5
                            魂粒子.启动到 (分辨率.窗口宽度 － 30, 35)

                        .否则
                            .如果 (连打交替 ＝ 1)
                                引擎.Mu_播放高级 (音效 [1], 咚哒音量, , , 真)
                                临时弹出太鼓.X坐标 ＝ 222
                                临时弹出太鼓.Y坐标 ＝ 221
                                临时弹出太鼓.缩放 ＝ 1
                                咚左 ＝ 4
                                咚右 ＝ 4
                                临时弹出太鼓.类型 ＝ “大红”
                                连打交替 ＝ 0
                                魂缩放 ＝ 1.5
                                魂粒子.启动到 (分辨率.窗口宽度 － 30, 35)
                            .否则

                            .如果结束

                        .如果结束
                        分数 ＝ 分数 ＋ 分数叠加 × 2
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则

                .如果结束

            .否则
            .如果结束

        .计次循环尾 ()
    .否则

    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .如果 (取数组成员数 (太鼓X坐标) ＞ n)

    .否则
        .如果 (取数组成员数 (太鼓X坐标 [n].坐标鼓) ＝ 0)
            删除成员 (太鼓X坐标, n, 1)
        .否则

        .如果结束
        .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
            .如果 (取数组成员数 (太鼓X坐标 [n].坐标鼓) ＞ n2)

            .否则
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 × 太鼓X坐标 [n].卷轴速度 ＋ 220 ≤ 222)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真)
                        删除成员 (太鼓X坐标 [n].坐标鼓, n2, 1)
                    .否则

                    .如果结束

                .否则
                .如果结束

            .如果结束

        .计次循环尾 ()
    .如果结束





.计次循环尾 ()

.子程序 新音乐初始化
.局部变量 分割文本, 文本型, , "0"
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 完成文本, 文本型
.局部变量 普面信息, 文本型
.局部变量 普面起始位置, 整数型
.局部变量 普面终止位置, 整数型
.局部变量 共计行数, 整数型
.局部变量 普面分析1, 文本型, , "0"
.局部变量 总坐标, 小数型, 静态
.局部变量 临时太鼓坐标, 太鼓坐标
.局部变量 延迟播放, 小数型
.局部变量 文本替换, 文本型
.局部变量 连打判断, 整数型, 静态
.局部变量 连打类型, 整数型, 静态
.局部变量 N3, 整数型
.局部变量 逗号判断, 逻辑型
.局部变量 临时合成, 文本型
.局部变量 i, 整数型
.局部变量 拍数分割, 文本型, , "0"
.局部变量 临时坐标鼓, 坐标鼓
.局部变量 临时BPM, 小数型
.局部变量 卷轴速度, 小数型
.局部变量 计数, 整数型
.局部变量 临时高潮开关, 逻辑型
.局部变量 是否计数, 逻辑型

' 菜单按钮初始化
暂停菜单按钮缩放.返回菜单 ＝ 0
魂条显示长度 ＝ 0
' 初始化
火焰开关 ＝ 假
音乐高潮 ＝ 假
暂停菜单 ＝ 假
音乐拍长度 ＝ 70
玩家COMBO ＝ 0
COMBO ＝ 0
魂条百分比 ＝ 0
太鼓总数 ＝ 0
Bar现行透明度 ＝ 0
火焰透明度 ＝ 0
太鼓高潮 ＝ 0
分数 ＝ 0
总坐标 ＝ 0
卷轴速度 ＝ 1
MOD纹理透明度 ＝ 255
暂停菜单透明度 ＝ 0
闪光精灵透明度 ＝ 0
音乐动画初始化 ()
重定义数组 (弹出太鼓, 假, 0)
重定义数组 (太鼓X坐标, 假, 0)
重定义数组 (打击标志, 假, 0)
重定义数组 (连段, 假, 0)
高潮粒子关闭 ()
魂粒子.停止 (真)
魂满人Y ＝ 700
音乐信息 ＝ 到文本 (读入文件 (取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\” ＋ 音乐文件夹 ＋ “.tja”))
.如果 (文件是否存在 (取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\” ＋ 音乐文件夹 ＋ “.tsb”) ＝ 真)
    动画地址 ＝ 取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\SB\”
    视频资源初始化 ()
    歌曲是否有动画 ＝ 真
.否则
    歌曲是否有动画 ＝ 假
.如果结束

' 截取铺面信息
分割文本 ＝ 分割文本 (音乐信息, #换行符, )
普面起始位置 ＝ 寻找文本 (音乐信息, “#START”, , 假) ＋ 7
普面终止位置 ＝ 寻找文本 (音乐信息, “#END”, , 假) ＋ 4
共计行数 ＝ 普面终止位置 － 普面起始位置
普面信息 ＝ 普面信息 ＋ 取文本中间 (音乐信息, 普面起始位置, 共计行数) ＋ #换行符
普面信息 ＝ 删全部空 (普面信息)
写到文件 (“bb.txt”, 到字节集 (普面信息))
普面分析1 ＝ 分割文本 (普面信息, #换行符, )
' 分析铺面信息
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “TITLE:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “TITLE:”, , , , 真)
        引擎.置标题 (#游戏标题 ＋ “ ” ＋ #版本号 ＋ “  正在进行:” ＋ 完成文本)
        标题文字 ＝ 完成文本
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “WAVE:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “WAVE:”, , , , 真)

        音效 [3].句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\” ＋ 完成文本)
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “BPM:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “BPM:”, , , , 真)
        音乐BPM ＝ 到小数 (完成文本)
        临时BPM ＝ 到小数 (完成文本)
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “COURSE:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “COURSE:”, , , , 真)
        .如果 (到整数 (完成文本) ≤ 4)
            谱面难度 ＝ 到整数 (完成文本)
        .否则
            谱面难度 ＝ 4
        .如果结束
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()

.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “SEVOL:”, , 假) ＝ -1)
        咚哒音量 ＝ 100
    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “SEVOL:”, , , , 真)
        咚哒音量 ＝ 到小数 (完成文本)

        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “SONGVOL:”, , 假) ＝ -1)
        普面音量 ＝ 100
    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “SONGVOL:”, , , , 真)
        普面音量 ＝ 到小数 (完成文本)
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
分数叠加 ＝ 420
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “SCOREINIT:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “SCOREINIT:”, , , , 真)
        分数叠加 ＝ 到整数 (完成文本)
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
叠加分数渐进 ＝ 50
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “SCOREDIFF:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “SCOREDIFF:”, , , , 真)
        叠加分数渐进 ＝ 到整数 (完成文本)

        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “OFFSET:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “OFFSET:”, , , , 真)
        OFFSET ＝ 到小数 (完成文本)
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()

' 分析铺面
.如果 (取文本左边 (音乐信息, 28) ＝ “Rabbit T-Aiko Game format V1”)
    太鼓移动坐标 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60 × 4
    创建游戏 ＝ 真
    .计次循环首 (取数组成员数 (普面分析1), n)
        .如果 (普面分析1 [n] ＝ “”)

        .否则
            .如果 (寻找文本 (到大写 (普面分析1 [n]), “#”, , 假) ≠ -1)
                临时太鼓坐标.动态BPM ＝ 临时BPM
                临时太鼓坐标.拍数 ＝ 音乐拍长度
                临时太鼓坐标.调试信息 ＝ 普面分析1 [n]
                临时太鼓坐标.卷轴速度 ＝ 卷轴速度
                插入成员 (太鼓X坐标, 1, 临时太鼓坐标)

                .判断开始 (寻找文本 (到大写 (普面分析1 [n]), “GOGOSTART”, , 假) ≠ -1)
                    .如果 (临时合成 ＝ “”)
                        临时坐标鼓.坐标 ＝ 总坐标
                        临时坐标鼓.类型 ＝ “高潮”
                        加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                    .否则
                        是否计数 ＝ 真
                        临时高潮开关 ＝ 真
                        计数 ＝ 取文本长度 (临时合成)
                        调试输出 ()
                    .如果结束

                .判断 (寻找文本 (到大写 (普面分析1 [n]), “GOGOEND”, , 假) ≠ -1)
                    .如果 (临时合成 ＝ “”)
                        临时坐标鼓.坐标 ＝ 总坐标
                        临时坐标鼓.类型 ＝ “高潮关”
                        加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                    .否则
                        是否计数 ＝ 真
                        临时高潮开关 ＝ 假
                        计数 ＝ 取文本长度 (临时合成)
                        调试输出 (计数)

                    .如果结束

                .判断 (寻找文本 (到大写 (普面分析1 [n]), “#MEASURE”, , 假) ≠ -1)
                    普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#MEASURE”, , , , 真)
                    普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
                    拍数分割 ＝ 分割文本 (普面分析1 [n], “/”, )
                    .如果 (取数组成员数 (拍数分割) ＜ 2)

                    .否则
                        普面移动倍数 ＝ 到小数 (拍数分割 [1]) ÷ 到小数 (拍数分割 [2])
                    .如果结束


                .判断 (寻找文本 (到大写 (普面分析1 [n]), “#DELAY”, , 假) ≠ -1)
                    普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#DELAY”, , , , 真)
                    普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
                    总坐标 ＝ 总坐标 ＋ 到小数 (普面分析1 [n]) × 音乐拍长度 × 4 × 临时BPM ÷ 60


                .判断 (寻找文本 (到大写 (普面分析1 [n]), “#SCROLL”, , 假) ≠ -1)
                    普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#SCROLL”, , , , 真)
                    普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
                    卷轴速度 ＝ 到小数 (普面分析1 [n])

                .判断 (寻找文本 (到大写 (普面分析1 [n]), “#BPMCHANGE”, , 假) ≠ -1)
                    普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#BPMCHANGE”, , , , 真)
                    临时BPM ＝ 到小数 (普面分析1 [n])
                    调试输出 (到小数 (普面分析1 [n]))


                .判断 (寻找文本 (到大写 (普面分析1 [n]), “#END”, , 假) ≠ -1)
                    临时坐标鼓.坐标 ＝ 总坐标
                    临时坐标鼓.类型 ＝ “游戏结束”
                    加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)

                .默认

                .判断结束

            .否则
                .如果 (取文本中间 (普面分析1 [n], 取文本长度 (普面分析1 [n]), 1) ＝ “,”)
                    临时太鼓坐标.动态BPM ＝ 临时BPM
                    临时太鼓坐标.拍数 ＝ 音乐拍长度
                    临时太鼓坐标.调试信息 ＝ 普面分析1 [n]
                    临时太鼓坐标.卷轴速度 ＝ 卷轴速度
                    插入成员 (太鼓X坐标, 1, 临时太鼓坐标)
                    普面分析1 [n] ＝ 临时合成 ＋ 普面分析1 [n]
                    普面分析1 [n] ＝ 子文本替换 (普面分析1 [n], “ ”, , , , 真)
                    临时合成 ＝ “”
                    .计次循环首 (取文本长度 (普面分析1 [n]) ＋ 1, n2)
                        .如果 (是否计数 ＝ 真)
                            .如果 (计数 ＝ 1)
                                .如果 (临时高潮开关 ＝ 真)
                                    临时坐标鼓.坐标 ＝ 总坐标
                                    临时坐标鼓.类型 ＝ “高潮”
                                    加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                                .否则
                                    临时坐标鼓.坐标 ＝ 总坐标
                                    临时坐标鼓.类型 ＝ “高潮关”
                                    加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)

                                .如果结束
                                是否计数 ＝ 假
                            .否则
                                计数 ＝ 计数 － 1
                            .如果结束

                        .否则

                        .如果结束



                        .如果 (连打判断 ＝ 0)
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “0”)
                                Debug ＝ Debug ＋ “0”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “空”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “1”)
                                Debug ＝ Debug ＋ “咚”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “红”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                太鼓总数 ＝ 太鼓总数 ＋ 1
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “2”)
                                Debug ＝ Debug ＋ “哒”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “蓝”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                太鼓总数 ＝ 太鼓总数 ＋ 1
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “3”)
                                Debug ＝ Debug ＋ “大咚”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “大红”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                太鼓总数 ＝ 太鼓总数 ＋ 1
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “4”)
                                Debug ＝ Debug ＋ “大哒”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “大蓝”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                太鼓总数 ＝ 太鼓总数 ＋ 1
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “5”)
                                Debug ＝ Debug ＋ “.”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “连打”
                                连打判断 ＝ 1
                                连打类型 ＝ 2
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                临时坐标鼓.类型 ＝ “连打条”
                                临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数 × 卷轴速度
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “隐藏连打”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “6”)
                                Debug ＝ Debug ＋ “.”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “连打大”
                                连打判断 ＝ 1
                                连打类型 ＝ 1
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                临时坐标鼓.类型 ＝ “连打条大”
                                临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数 × 卷轴速度
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                临时坐标鼓.类型 ＝ “隐藏连打大”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “7”)
                                Debug ＝ Debug ＋ “.”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “空”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “8”)
                                Debug ＝ Debug ＋ “.”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “空”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则

                            .如果结束

                        .否则
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “8”)
                                Debug ＝ Debug ＋ “连打”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                .如果 (连打类型 ＝ 2)
                                    临时坐标鼓.类型 ＝ “连打结束”
                                .否则
                                    临时坐标鼓.类型 ＝ “连打结束大”
                                .如果结束
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                连打判断 ＝ 0
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                .如果 (连打类型 ＝ 2)
                                    临时坐标鼓.类型 ＝ “隐藏连打”
                                .否则
                                    临时坐标鼓.类型 ＝ “隐藏连打大”
                                .如果结束
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                            .否则
                                .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “0”)
                                    Debug ＝ Debug ＋ “连打”
                                    临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                    .如果 (连打类型 ＝ 2)
                                        临时坐标鼓.类型 ＝ “连打条”
                                    .否则
                                        临时坐标鼓.类型 ＝ “连打条大”
                                    .如果结束
                                    临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数 × 卷轴速度
                                    插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                    临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                    .如果 (连打类型 ＝ 2)
                                        临时坐标鼓.类型 ＝ “隐藏连打”
                                    .否则
                                        临时坐标鼓.类型 ＝ “隐藏连打大”
                                    .如果结束
                                    插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                    总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数

                                .否则
                                    Debug ＝ Debug ＋ “连打”

                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “1”)
                                        Debug ＝ Debug ＋ “咚”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “红”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        太鼓总数 ＝ 太鼓总数 ＋ 1
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “2”)
                                        Debug ＝ Debug ＋ “哒”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “蓝”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        太鼓总数 ＝ 太鼓总数 ＋ 1
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “3”)
                                        Debug ＝ Debug ＋ “大咚”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “大红”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        太鼓总数 ＝ 太鼓总数 ＋ 1
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “4”)
                                        Debug ＝ Debug ＋ “大哒”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “大蓝”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        太鼓总数 ＝ 太鼓总数 ＋ 1
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “5”)
                                        Debug ＝ Debug ＋ “.”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “连打”
                                        连打判断 ＝ 1
                                        连打类型 ＝ 2
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        临时坐标鼓.类型 ＝ “连打条”
                                        临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数 × 卷轴速度
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “隐藏连打”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “6”)
                                        Debug ＝ Debug ＋ “.”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “连打大”
                                        连打判断 ＝ 1
                                        连打类型 ＝ 1
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        临时坐标鼓.类型 ＝ “连打条大”
                                        临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数 × 卷轴速度
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        临时坐标鼓.类型 ＝ “隐藏连打大”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “7”)
                                        Debug ＝ Debug ＋ “.”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “空”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “8”)
                                        Debug ＝ Debug ＋ “.”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “空”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (普面分析1 [n]) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束

                                .如果结束

                            .如果结束

                        .如果结束

                    .计次循环尾 ()

                .否则

                    临时合成 ＝ 临时合成 ＋ 普面分析1 [n]
                .如果结束

            .如果结束



        .如果结束








    .计次循环尾 ()

    ' 普面难度
    总长度 ＝ 总坐标
    .判断开始 (谱面难度 ＝ 3 或 谱面难度 ＝ 4)
        难度图标.专家.置纹理_指针 (难度纹理4)
    .判断 (谱面难度 ＝ 2)
        难度图标.专家.置纹理_指针 (难度纹理1)
    .判断 (谱面难度 ＝ 1)
        难度图标.专家.置纹理_指针 (难度纹理2)
    .判断 (谱面难度 ＝ 0)
        难度图标.专家.置纹理_指针 (难度纹理3)
    .默认

    .判断结束
    太鼓小人.置帧率 (音乐BPM ÷ 30)
    太鼓小人2.置帧率 (音乐BPM ÷ 30)
    计时延迟 ＝ 真

.否则
    创建游戏 ＝ 假
    信息框 (“创建游戏失败，地图文件错误！”, 0, “错误”)
.如果结束


.子程序 音乐初始化, , , 核心部分，读取TJA谱面
.局部变量 分割文本, 文本型, , "0"
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 完成文本, 文本型
.局部变量 普面信息, 文本型
.局部变量 普面起始位置, 整数型
.局部变量 普面终止位置, 整数型
.局部变量 共计行数, 整数型
.局部变量 普面分析1, 文本型, , "0"
.局部变量 总坐标, 小数型, 静态
.局部变量 临时太鼓坐标, 太鼓坐标
.局部变量 延迟播放, 小数型
.局部变量 文本替换, 文本型
.局部变量 连打判断, 整数型, 静态
.局部变量 连打类型, 整数型, 静态
.局部变量 N3, 整数型
.局部变量 逗号判断, 逻辑型
.局部变量 临时合成, 文本型
.局部变量 i, 整数型
.局部变量 拍数分割, 文本型, , "0"
.局部变量 临时坐标鼓, 坐标鼓
.局部变量 临时BPM, 小数型
.局部变量 卷轴速度, 小数型
.局部变量 去参数长度, 文本型

' 初始化
火焰开关 ＝ 假
音乐高潮 ＝ 假
暂停菜单 ＝ 假
音乐拍长度 ＝ 70
玩家COMBO ＝ 0
COMBO ＝ 0
魂条百分比 ＝ 0
太鼓总数 ＝ 0
Bar现行透明度 ＝ 0
火焰透明度 ＝ 0
太鼓高潮 ＝ 0
分数 ＝ 0
总坐标 ＝ 0
普面移动倍数 ＝ 1
卷轴速度 ＝ 1
MOD纹理透明度 ＝ 255
暂停菜单透明度 ＝ 0
闪光精灵透明度 ＝ 0
音乐动画初始化 ()
重定义数组 (弹出太鼓, 假, 0)
重定义数组 (太鼓X坐标, 假, 0)
重定义数组 (打击标志, 假, 0)
重定义数组 (连段, 假, 0)
高潮粒子关闭 ()
魂粒子.停止 (真)
魂满人Y ＝ 700
音乐信息 ＝ 到文本 (读入文件 (取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\” ＋ 音乐文件夹 ＋ “.tja”))
.如果 (文件是否存在 (取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\” ＋ 音乐文件夹 ＋ “.tsb”) ＝ 真)
    动画地址 ＝ 取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\SB\”
    视频资源初始化 ()
    歌曲是否有动画 ＝ 真
.否则
    歌曲是否有动画 ＝ 假
.如果结束
' 判断文件格式
.如果 (取文本左边 (音乐信息, 28) ＝ “Rabbit T-Aiko Game format V1”)
    ' 截取铺面信息
    分割文本 ＝ 分割文本 (音乐信息, #换行符, )
    普面起始位置 ＝ 寻找文本 (音乐信息, “#START”, , 假) ＋ 7  ' 找到谱面起始位置
    普面终止位置 ＝ 寻找文本 (音乐信息, “#END”, , 假) ＋ 4  ' 找到谱面终止位置
    共计行数 ＝ 普面终止位置 － 普面起始位置  ' 算出一共有多少行
    普面信息 ＝ 普面信息 ＋ 取文本中间 (音乐信息, 普面起始位置, 共计行数) ＋ #换行符  ' 取出谱面
    普面信息 ＝ 删全部空 (普面信息)  ' 删掉空格
    普面分析1 ＝ 分割文本 (普面信息, #换行符, )  ' 将谱面分割，每一行为一段

    ' 分析铺面信息，标题、BPM、音量、延迟、OFFSET
    ' 标题



    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “TITLE:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “TITLE:”, , , , 真)
            引擎.置标题 (#游戏标题 ＋ “ ” ＋ #版本号 ＋ “  正在进行:” ＋ 完成文本)
            标题文字 ＝ 完成文本
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' 歌曲文件名
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “WAVE:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “WAVE:”, , , , 真)
            音效 [3].句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\” ＋ 完成文本)
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' BPM读取
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “BPM:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “BPM:”, , , , 真)
            音乐BPM ＝ 到小数 (完成文本)
            临时BPM ＝ 到小数 (完成文本)
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' 难度读取
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “COURSE:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “COURSE:”, , , , 真)
            .如果 (到整数 (完成文本) ≤ 4)
                谱面难度 ＝ 到整数 (完成文本)
            .否则
                谱面难度 ＝ 4
            .如果结束
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' 音效
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “SEVOL:”, , 假) ＝ -1)
            咚哒音量 ＝ 100
        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “SEVOL:”, , , , 真)
            咚哒音量 ＝ 到小数 (完成文本)
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' 音乐音量
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “SONGVOL:”, , 假) ＝ -1)
            普面音量 ＝ 100
        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “SONGVOL:”, , , , 真)
            普面音量 ＝ 到小数 (完成文本)
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' 分数叠加
    分数叠加 ＝ 420
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “SCOREINIT:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “SCOREINIT:”, , , , 真)
            分数叠加 ＝ 到整数 (完成文本)
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' 渐进叠加，每增加一定的COMBO分数就叠加
    叠加分数渐进 ＝ 50
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “SCOREDIFF:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “SCOREDIFF:”, , , , 真)
            叠加分数渐进 ＝ 到整数 (完成文本)
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' OFFSET读取
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “OFFSET:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “OFFSET:”, , , , 真)
            OFFSET ＝ 到小数 (完成文本)
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    ' 分析铺面
    太鼓移动坐标 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60 × 4
    .计次循环首 (取数组成员数 (普面分析1), n)
        .如果 (普面分析1 [n] ＝ “”)

        .否则
            临时太鼓坐标.动态BPM ＝ 临时BPM
            临时太鼓坐标.拍数 ＝ 音乐拍长度
            临时太鼓坐标.调试信息 ＝ 普面分析1 [n]
            临时太鼓坐标.卷轴速度 ＝ 卷轴速度
            插入成员 (太鼓X坐标, 1, 临时太鼓坐标)
            ' 下面是先寻找参数，读取出高潮，段数，节拍，延长

            .判断开始 (寻找文本 (到大写 (普面分析1 [n]), “#GOGOSTART”, , 假) ≠ -1)
                临时合成 ＝ 临时合成 ＋ “S”
            .判断 (寻找文本 (到大写 (普面分析1 [n]), “#GOGOEND”, , 假) ≠ -1)
                临时合成 ＝ 临时合成 ＋ “E”
            .判断 (寻找文本 (到大写 (普面分析1 [n]), “#MEASURE”, , 假) ≠ -1)
                普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#MEASURE”, , , , 真)
                普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
                拍数分割 ＝ 分割文本 (普面分析1 [n], “/”, )
                .如果 (取数组成员数 (拍数分割) ＜ 2)

                .否则
                    普面移动倍数 ＝ 到小数 (拍数分割 [1]) ÷ 到小数 (拍数分割 [2])
                .如果结束

            .判断 (寻找文本 (到大写 (普面分析1 [n]), “#DELAY”, , 假) ≠ -1)
                普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#DELAY”, , , , 真)
                普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
                总坐标 ＝ 总坐标 ＋ 到小数 (普面分析1 [n]) × 音乐拍长度 × 4 × 临时BPM ÷ 60

            .判断 (寻找文本 (到大写 (普面分析1 [n]), “#SCROLL”, , 假) ≠ -1)
                普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#SCROLL”, , , , 真)
                普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
                卷轴速度 ＝ 到小数 (普面分析1 [n])
            .判断 (寻找文本 (到大写 (普面分析1 [n]), “#BPMCHANGE”, , 假) ≠ -1)
                普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#BPMCHANGE”, , , , 真)
                临时BPM ＝ 到小数 (普面分析1 [n])

            .判断 (寻找文本 (到大写 (普面分析1 [n]), “#END”, , 假) ≠ -1)
                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                临时坐标鼓.类型 ＝ “游戏结束”
                加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
            .判断 (取文本左边 (普面分析1 [n], 1) ＝ “#”)

            .默认
                ' 这里开始时读取谱面了
                .如果 (取文本中间 (普面分析1 [n], 取文本长度 (普面分析1 [n]), 1) ＝ “,”)  ' 因为TJA格式以逗号分一段，因此读取时需要判断一下，当没有分号时要合并一下。
                    普面分析1 [n] ＝ 临时合成 ＋ 普面分析1 [n]
                    去参数长度 ＝ 子文本替换 (普面分析1 [n], “S”, , , , 假)
                    去参数长度 ＝ 子文本替换 (去参数长度, “E”, , , , 假)
                    普面分析1 [n] ＝ 子文本替换 (普面分析1 [n], “ ”, , , , 真)
                    临时合成 ＝ “”
                    .计次循环首 (取文本长度 (普面分析1 [n]) ＋ 1, n2)
                        .如果 (连打判断 ＝ 0)
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “S”)
                                Debug ＝ Debug ＋ “S”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “高潮”
                                加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “E”)
                                Debug ＝ Debug ＋ “S”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “高潮关”
                                加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “0”)
                                Debug ＝ Debug ＋ “0”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “空”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “1”)
                                Debug ＝ Debug ＋ “咚”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “红”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                太鼓总数 ＝ 太鼓总数 ＋ 1
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “2”)
                                Debug ＝ Debug ＋ “哒”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “蓝”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                太鼓总数 ＝ 太鼓总数 ＋ 1
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “3”)
                                Debug ＝ Debug ＋ “大咚”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “大红”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                太鼓总数 ＝ 太鼓总数 ＋ 1
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “4”)
                                Debug ＝ Debug ＋ “大哒”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “大蓝”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                太鼓总数 ＝ 太鼓总数 ＋ 1
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “5”)
                                Debug ＝ Debug ＋ “.”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “连打”
                                连打判断 ＝ 1
                                连打类型 ＝ 2
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                临时坐标鼓.类型 ＝ “连打条”
                                临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数 × 卷轴速度
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “隐藏连打”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “6”)
                                Debug ＝ Debug ＋ “.”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “连打大”
                                连打判断 ＝ 1
                                连打类型 ＝ 1
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                临时坐标鼓.类型 ＝ “连打条大”
                                临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数 × 卷轴速度
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                临时坐标鼓.类型 ＝ “隐藏连打大”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “7”)
                                Debug ＝ Debug ＋ “.”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “空”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “8”)
                                Debug ＝ Debug ＋ “.”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                临时坐标鼓.类型 ＝ “空”
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则

                            .如果结束

                        .否则
                            .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “8”)
                                Debug ＝ Debug ＋ “连打”
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                .如果 (连打类型 ＝ 2)
                                    临时坐标鼓.类型 ＝ “连打结束”
                                .否则
                                    临时坐标鼓.类型 ＝ “连打结束大”
                                .如果结束
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                连打判断 ＝ 0
                                临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                .如果 (连打类型 ＝ 2)
                                    临时坐标鼓.类型 ＝ “隐藏连打”
                                .否则
                                    临时坐标鼓.类型 ＝ “隐藏连打大”
                                .如果结束
                                插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                            .否则
                                .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “0”)
                                    Debug ＝ Debug ＋ “连打”
                                    临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                    .如果 (连打类型 ＝ 2)
                                        临时坐标鼓.类型 ＝ “连打条”
                                    .否则
                                        临时坐标鼓.类型 ＝ “连打条大”
                                    .如果结束
                                    临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数 × 卷轴速度
                                    插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                    临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                    .如果 (连打类型 ＝ 2)
                                        临时坐标鼓.类型 ＝ “隐藏连打”
                                    .否则
                                        临时坐标鼓.类型 ＝ “隐藏连打大”
                                    .如果结束
                                    插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                    总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                .否则
                                    Debug ＝ Debug ＋ “连打”
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “1”)
                                        Debug ＝ Debug ＋ “咚”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “红”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        太鼓总数 ＝ 太鼓总数 ＋ 1
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “2”)
                                        Debug ＝ Debug ＋ “哒”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “蓝”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        太鼓总数 ＝ 太鼓总数 ＋ 1
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “3”)
                                        Debug ＝ Debug ＋ “大咚”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “大红”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        太鼓总数 ＝ 太鼓总数 ＋ 1
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “4”)
                                        Debug ＝ Debug ＋ “大哒”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “大蓝”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        太鼓总数 ＝ 太鼓总数 ＋ 1
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “5”)
                                        Debug ＝ Debug ＋ “.”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “连打”
                                        连打判断 ＝ 1
                                        连打类型 ＝ 2
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        临时坐标鼓.类型 ＝ “连打条”
                                        临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数 × 卷轴速度
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “隐藏连打”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “6”)
                                        Debug ＝ Debug ＋ “.”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “连打大”
                                        连打判断 ＝ 1
                                        连打类型 ＝ 1
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        临时坐标鼓.类型 ＝ “连打条大”
                                        临时坐标鼓.连打长度 ＝ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数 × 卷轴速度
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        临时坐标鼓.类型 ＝ “隐藏连打大”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “7”)
                                        Debug ＝ Debug ＋ “.”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “空”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束
                                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “8”)
                                        Debug ＝ Debug ＋ “.”
                                        临时坐标鼓.坐标 ＝ 总坐标 × 卷轴速度
                                        临时坐标鼓.类型 ＝ “空”
                                        插入成员 (太鼓X坐标 [1].坐标鼓, 1, 临时坐标鼓)
                                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                                    .否则

                                    .如果结束

                                .如果结束

                            .如果结束

                        .如果结束

                    .计次循环尾 ()
                .否则
                    临时合成 ＝ 临时合成 ＋ 普面分析1 [n]
                .如果结束

            .判断结束

        .如果结束




    .计次循环尾 ()
    .计次循环首 (取数组成员数 (太鼓X坐标), n)
        .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
            太鼓X坐标 [n].坐标鼓 [n2].原坐标 ＝ 太鼓X坐标 [n].坐标鼓 [n2].坐标
        .计次循环尾 ()
    .计次循环尾 ()
    ' 普面难度
    总长度 ＝ 总坐标
    .判断开始 (谱面难度 ＝ 3 或 谱面难度 ＝ 4)
        难度图标.专家.置纹理_指针 (难度纹理4)
    .判断 (谱面难度 ＝ 2)
        难度图标.专家.置纹理_指针 (难度纹理1)
    .判断 (谱面难度 ＝ 1)
        难度图标.专家.置纹理_指针 (难度纹理2)
    .判断 (谱面难度 ＝ 0)
        难度图标.专家.置纹理_指针 (难度纹理3)
    .默认

    .判断结束
    太鼓小人.置帧率 (音乐BPM ÷ 30)
    太鼓小人2.置帧率 (音乐BPM ÷ 30)
    计时延迟 ＝ 真
    创建游戏 ＝ 真
.否则
    创建游戏 ＝ 假
    信息框 (“创建游戏失败，地图文件错误！”, 0, “错误”)
.如果结束


.子程序 延迟, , , 游戏开始的延迟，避免点击后马上开始游戏
.局部变量 计时, 小数型, 静态
.局部变量 aa, 小数型

.如果 (计时延迟 ＝ 真)
    .如果 (计时 ≥ 1)
        计时延迟 ＝ 假
        引擎.Mu_播放高级 (音效 [3], 普面音量, , , 真)
        游戏开始 ＝ 真
        设定缩放 (1)

    .否则
        计时 ＝ 计时 ＋ 引擎.取最后帧时间 ()
    .如果结束

.否则
    计时 ＝ 0
.如果结束


.子程序 横幅逻辑, , , 顶部的横幅
.局部变量 n, 整数型
.局部变量 a, 小数型

.计次循环首 (取数组成员数 (动态背景X坐标), n)
    .如果 (n ＝ 取数组成员数 (动态背景X坐标))
        .如果 (动态背景X坐标 [n] ＋ 776 ≤ 0)

        .否则
            动态背景X坐标 [n] ＝ 动态背景X坐标 [n] － 四舍五入 (帧率数据处理 (2), )
        .如果结束

    .否则
        .如果 (动态背景X坐标 [n] ＋ 776 ≤ 0)
            动态背景X坐标 [n] ＝ 动态背景X坐标 [n ＋ 1] ＋ 776 － 1
        .否则
            动态背景X坐标 [n] ＝ 动态背景X坐标 [n] － 四舍五入 (帧率数据处理 (2), )
        .如果结束

    .如果结束

.计次循环尾 ()
.如果 (动态横幅变色 ＝ 1)
    横幅透明度 ＝ 0
.否则
    横幅透明度 ＝ 255
.如果结束
.如果 (横幅透明度 ≥ 现行横幅透明度)
    .如果 (现行横幅透明度 ＋ 帧率数据处理 (10) ≥ 255)
        现行横幅透明度 ＝ 255
    .否则
        现行横幅透明度 ＝ 现行横幅透明度 ＋ 帧率数据处理 (10)
    .如果结束

.否则
    .如果 (现行横幅透明度 － 帧率数据处理 (10) ≤ 0)
        现行横幅透明度 ＝ 0
    .否则
        现行横幅透明度 ＝ 现行横幅透明度 － 帧率数据处理 (10)
    .如果结束

.如果结束
动态横幅.置透明度 (现行横幅透明度)

.子程序 火焰逻辑
.局部变量 a, 整数型

.如果 (火焰开关 ＝ 假)
    .如果 (火焰透明度 － 帧率数据处理 (10) ≤ 0)
        火焰透明度 ＝ 0
    .否则
        火焰透明度 ＝ 火焰透明度 － 帧率数据处理 (10)
    .如果结束

.否则
    .如果 (火焰透明度 ＋ 帧率数据处理 (10) ≥ 255)
        火焰透明度 ＝ 255
    .否则
        火焰透明度 ＝ 火焰透明度 ＋ 帧率数据处理 (10)
    .如果结束

.如果结束


.子程序 太鼓Bar

太鼓Bar.显示高级 (0, 149, 0, 分辨率.Bar缩放, 0.8)
标题bar.显示高级 (0, 305, 0, 分辨率.Bar缩放, 1)
标题文字精灵.显示 (分辨率.窗口宽度 － 取文本长度 (删首尾空 (标题文字)) × 21 ＋ 取文本长度 (删首尾空 (标题文字)) × 10 － 10, 315, 标题文字)
.如果 (Bar现行透明度 ＝ 0)

.否则
    太鼓Bar红.置透明度 (Bar现行透明度)
    太鼓Bar红.显示高级 (0, 149, 0, 分辨率.Bar缩放, 0.8)
.如果结束
打鼓点.显示高级 (120, 125, 0, 0.8, 0.8)

.子程序 太鼓Bar逻辑

.如果 (音乐高潮 ＝ 真)
    bar透明度 ＝ 255
.否则
    bar透明度 ＝ 0
.如果结束
.如果 (bar透明度 ≥ Bar现行透明度)
    .如果 (Bar现行透明度 ＋ 帧率数据处理 (10) ≥ 255)
        Bar现行透明度 ＝ 255
    .否则
        Bar现行透明度 ＝ Bar现行透明度 ＋ 帧率数据处理 (10)
    .如果结束

.否则
    .如果 (Bar现行透明度 － 帧率数据处理 (10) ≤ 0)
        Bar现行透明度 ＝ 0
    .否则
        Bar现行透明度 ＝ Bar现行透明度 － 帧率数据处理 (10)
    .如果结束

.如果结束


.子程序 游戏按键逻辑, , , 这个是游戏按键逻辑，现在非常不完善！
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 临时弹出太鼓, 弹出太鼓
.局部变量 la

.如果 (引擎.取按键按下 (#Z键))
    引擎.Mu_播放高级 (音效 [1], 咚哒音量, , , 真)
    .计次循环首 (取数组成员数 (太鼓X坐标), n)
        .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ≤ 227)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “蓝”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        打击标志 (“黄”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.类型 ＝ “蓝”
                        临时弹出太鼓.缩放 ＝ 0.6
                        分数 ＝ 分数 ＋ 分数叠加
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        魂缩放 ＝ 1.5
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则
                .如果结束

            .否则
            .如果结束
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “大蓝”)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                    打击标志 (“黄”)
                    COMBO ＝ COMBO ＋ 1
                    临时弹出太鼓.X坐标 ＝ 222
                    临时弹出太鼓.Y坐标 ＝ 221
                    临时弹出太鼓.类型 ＝ “大蓝”
                    临时弹出太鼓.缩放 ＝ 0.6
                    分数 ＝ 分数 ＋ 分数叠加
                    加入成员 (弹出太鼓, 临时弹出太鼓)
                    玩家COMBO ＝ 玩家COMBO ＋ 1
                    魂缩放 ＝ 1.5
                    太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                .否则

                .如果结束

            .否则
            .如果结束

        .计次循环尾 ()
    .计次循环尾 ()
.否则

.如果结束
.如果 (引擎.取按键按下 (#X键))
    引擎.Mu_播放高级 (音效 [2], 咚哒音量, , , 真)
    .计次循环首 (取数组成员数 (太鼓X坐标), n)
        .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ≤ 227)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “红”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        打击标志 (“黄”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.类型 ＝ “红”
                        临时弹出太鼓.缩放 ＝ 0.6
                        分数 ＝ 分数 ＋ 分数叠加
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        魂缩放 ＝ 1.5
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则
                .如果结束
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “大红”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        打击标志 (“黄”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.类型 ＝ “大红”
                        临时弹出太鼓.缩放 ＝ 0.6
                        分数 ＝ 分数 ＋ 分数叠加
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        魂缩放 ＝ 1.5
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则
                .如果结束

            .否则
            .如果结束

        .计次循环尾 ()
    .计次循环尾 ()
.否则

.如果结束
.如果 (引擎.取按键按下 (#M键))
    引擎.Mu_播放高级 (音效 [1], 咚哒音量, , , 真)
    .计次循环首 (取数组成员数 (太鼓X坐标), n)
        .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ≤ 227)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “蓝”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        打击标志 (“黄”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.类型 ＝ “蓝”
                        临时弹出太鼓.缩放 ＝ 0.6
                        分数 ＝ 分数 ＋ 分数叠加
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        魂缩放 ＝ 1.5
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “大蓝”)
                        .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                            打击标志 (“黄”)
                            COMBO ＝ COMBO ＋ 1
                            临时弹出太鼓.X坐标 ＝ 222
                            临时弹出太鼓.Y坐标 ＝ 221
                            临时弹出太鼓.类型 ＝ “大蓝”
                            临时弹出太鼓.缩放 ＝ 0.6
                            分数 ＝ 分数 ＋ 分数叠加
                            加入成员 (弹出太鼓, 临时弹出太鼓)
                            玩家COMBO ＝ 玩家COMBO ＋ 1
                            魂缩放 ＝ 1.5
                            太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                        .否则

                        .如果结束

                    .否则
                    .如果结束

                .否则

                .如果结束

            .否则
            .如果结束

        .计次循环尾 ()
    .计次循环尾 ()
.否则

.如果结束
.如果 (引擎.取按键按下 (#N键))
    引擎.Mu_播放高级 (音效 [2], 咚哒音量, , , 真)
    .计次循环首 (取数组成员数 (太鼓X坐标), n)
        .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ≤ 227)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “红”)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                        打击标志 (“黄”)
                        COMBO ＝ COMBO ＋ 1
                        临时弹出太鼓.X坐标 ＝ 222
                        临时弹出太鼓.Y坐标 ＝ 221
                        临时弹出太鼓.类型 ＝ “红”
                        临时弹出太鼓.缩放 ＝ 0.6
                        分数 ＝ 分数 ＋ 分数叠加
                        加入成员 (弹出太鼓, 临时弹出太鼓)
                        玩家COMBO ＝ 玩家COMBO ＋ 1
                        魂缩放 ＝ 1.5
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “大红”)
                        .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                            打击标志 (“黄”)
                            COMBO ＝ COMBO ＋ 1
                            临时弹出太鼓.X坐标 ＝ 222
                            临时弹出太鼓.Y坐标 ＝ 221
                            临时弹出太鼓.类型 ＝ “大红”
                            临时弹出太鼓.缩放 ＝ 0.6
                            分数 ＝ 分数 ＋ 分数叠加
                            加入成员 (弹出太鼓, 临时弹出太鼓)
                            玩家COMBO ＝ 玩家COMBO ＋ 1
                            魂缩放 ＝ 1.5
                            太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                        .否则

                        .如果结束

                    .否则
                    .如果结束

                .否则
                .如果结束

            .否则
            .如果结束

        .计次循环尾 ()
    .计次循环尾 ()
.否则

.如果结束
.如果 (引擎.取按键按下 (#Z键))
    哒左 ＝ 4
.否则

.如果结束
.如果 (引擎.取按键按下 (#X键))
    咚左 ＝ 4
.否则

.如果结束
.如果 (引擎.取按键按下 (#M键))
    哒右 ＝ 4
.否则

.如果结束
.如果 (引擎.取按键按下 (#N键))
    咚右 ＝ 4
.否则

.如果结束


.子程序 魂条

魂条显示长度 ＝ 加速度公式 (魂条显示长度, 644 × 魂条百分比 ÷ 100, 0.3, 0.3)
魂条覆盖.置渲染区域 (0, 0, 魂条显示长度, 36)
魂条.显示高级 (分辨率.窗口宽度 － 550, 10, 0, 0.8, 0.8)
魂条覆盖.显示高级 (分辨率.窗口宽度 － 545, 23, 0, 0.8, 0.8)

.子程序 动态背景
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (动态背景X坐标), n)
    动态横幅黑.显示 (动态背景X坐标 [2] ＋ (n － 1) × 776, 0)
    动态横幅.显示 (动态背景X坐标 [2] ＋ (n － 1) × 775, 0)
.计次循环尾 ()

.子程序 太鼓人

.如果 (太鼓高潮 ＝ 1)
    太鼓小人2.显示高级 (-30, -50, 0, 0.6, 0.6)
.否则
    太鼓小人.显示高级 (-30, -40, 0, 0.6, 0.6)
.如果结束

