.版本 2

.程序集 UI_第一屏
.程序集变量 粒子精灵, Age_精灵
.程序集变量 弹跳图标, Age_精灵
.程序集变量 文字, Age_文字
.程序集变量 歌曲名称, Age_文字
.程序集变量 歌手名称, Age_文字
.程序集变量 粒子1, Age_粒子
.程序集变量 粒子2, Age_粒子
.程序集变量 粒子3, Age_粒子
.程序集变量 残影, Age_精灵
.程序集变量 图标计时, 小数型
.程序集变量 开始按钮, Age_精灵
.程序集变量 退出按钮, Age_精灵
.程序集变量 按钮透明度, 整数型
.程序集变量 按钮声音1, Tp_音效
.程序集变量 按钮声音2, Tp_音效
.程序集变量 按钮1X坐标, 整数型
.程序集变量 按钮2X坐标, 整数型
.程序集变量 背景, Age_精灵
.程序集变量 背景X缩放, 整数型
.程序集变量 背景Y缩放, 整数型
.程序集变量 闪烁左, Age_精灵
.程序集变量 闪烁右, Age_精灵
.程序集变量 残影差值, 整数型
.程序集变量 残影加速度, 整数型
.程序集变量 残影速度, 小数型
.程序集变量 残影高度变量, 整数型
.程序集变量 残影宽度变量, 整数型
.程序集变量 坐标差值, 整数型
.程序集变量 弹跳X坐标, 整数型
.程序集变量 logo显示位置, 整数型
.程序集变量 UI圆, UI_圆, , "0"
.程序集变量 UI圆精灵, Age_精灵

.子程序 UI初始化
.局部变量 纹理
.局部变量 n, 整数型
.局部变量 临时UI圆, UI_圆

logo缩放 ＝ 1160
残影缩放 ＝ 1000
LOGOX ＝ 250
LOGOY ＝ 110
弹跳X坐标 ＝ 分辨率.logo位置
引擎.读zip (取运行目录 () ＋ “\UI.pak”)
按钮声音1.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\menuclick.wav”)
按钮声音2.句柄 ＝ 引擎.Mu_载入 (取运行目录 () ＋ “\Sound\menuhit.wav”)
UI圆初始化 ()
纹理 ＝ 引擎.载入纹理 (“back.jpg”)
背景.创建_从指针 (纹理, 0, 0, , )
粒子精灵.创建_从指针 (引擎.载入纹理 (“star2.png”), 0, 0, 52, 50)
粒子精灵.置中心 (26, 25)
粒子1.创建 (取运行目录 () ＋ “\psi\ball.psi”, 粒子精灵)
粒子2.创建 (取运行目录 () ＋ “\psi\star.psi”, 粒子精灵)
粒子3.创建 (取运行目录 () ＋ “\psi\star.psi”, 粒子精灵)
弹跳图标.创建_从指针 (引擎.载入纹理 (“Logo.png”), 0, 0, 400, 400)
UI圆精灵.创建_从指针 (引擎.载入纹理 (“Round.png”), 0, 0, 600, 600)
残影.创建_从指针 (引擎.载入纹理 (“Logo.png”), 0, 0, 400, 400)
闪烁左.创建_从指针 (引擎.载入纹理 (“left.png”), 0, 0, 200, 600)
闪烁右.创建_从指针 (引擎.载入纹理 (“right.png”), 0, 0, 200, 600)
开始按钮.创建_从指针 (引擎.载入纹理 (“play.png”))
退出按钮.创建_从指针 (引擎.载入纹理 (“exit.png”))
按钮1X坐标 ＝ 360
按钮2X坐标 ＝ 360
文字.创建 (“宋体”, 12, 假, 假, 假, #颜色_白)
歌手名称.创建 (“宋体”, 12, 假, 假, 假, #颜色_白)
歌曲名称.创建 (“宋体”, 12, 假, 假, 假, #颜色_白)
弹跳图标.置中心 (弹跳图标.取宽度 () ÷ 2, 弹跳图标.取高度 () ÷ 2)
残影.置中心 (残影.取宽度 () ÷ 2, 残影.取高度 () ÷ 2)
背景.置混合模式 (#混合_默认)
粒子精灵.置混合模式 (#混合_默认)
弹跳图标.置混合模式 (#混合_默认)
残影.置混合模式 (#混合_默认)
闪烁左.置混合模式 (#混合_默认)
闪烁右.置混合模式 (#混合_默认)
开始按钮.置混合模式 (#混合_默认)
退出按钮.置混合模式 (#混合_默认)

.子程序 按钮逻辑
.局部变量 判断进入, 整数型, 静态
.局部变量 按钮1, 加速度差值
.局部变量 按钮2, 加速度差值

.如果 (logo显示位置 ＝ 1)
    .如果 (按钮透明度 ＋ 10 ≥ 255)
        按钮透明度 ＝ 255
    .否则
        按钮透明度 ＝ 按钮透明度 ＋ 10
    .如果结束

.否则

.如果结束
.如果 (logo显示位置 ＝ 0)
    .如果 (按钮透明度 － 10 ≤ 0)
        按钮透明度 ＝ 0
    .否则
        按钮透明度 ＝ 按钮透明度 － 10
    .如果结束
    判断进入 ＝ 0
.否则

.如果结束
开始按钮.置透明度 (按钮透明度)
退出按钮.置透明度 (按钮透明度)
.如果 (logo显示位置 ＝ 1)
    .如果 (开始按钮.检测点 (鼠标坐标.x, 鼠标坐标.y))
        .如果 (开始按钮.取像素颜色 (鼠标坐标.x, 鼠标坐标.y, 真) ≠ 0)
            .如果真 (鼠标坐标.x ≥ 分辨率.logo位置 ＋ 30)
                .如果 (判断进入 ＝ 1)
                    .如果真 (引擎.取按键按下 (#鼠标左键))
                        引擎.Mu_播放高级 (按钮声音2, 100, , , 真)
                        BASS_ChannelPause (播放句柄)
                        遮罩切换 (“太鼓游戏”, 10, &音乐初始化)
                        图标计时 ＝ 0
                    .如果真结束

                .否则
                    引擎.Mu_播放高级 (按钮声音1, 100, , , 真)
                    判断进入 ＝ 1
                    图标计时 ＝ 0
                .如果结束

            .如果真结束

        .否则
            判断进入 ＝ 0
        .如果结束

    .否则
        .如果 (退出按钮.检测点 (鼠标坐标.x, 鼠标坐标.y))
            .如果 (退出按钮.取像素颜色 (鼠标坐标.x, 鼠标坐标.y, 真) ≠ 0)
                .如果真 (鼠标坐标.x ≥ 分辨率.logo位置 ＋ 30)
                    .如果 (判断进入 ＝ 2)
                        .如果真 (引擎.取按键按下 (#鼠标左键))
                            引擎.Mu_播放高级 (按钮声音2, 100, , , 真)
                            BASS_ChannelPause (播放句柄)
                            遮罩切换 (“”, 10, &退出)
                            图标计时 ＝ 0
                        .如果真结束

                    .否则
                        引擎.Mu_播放高级 (按钮声音1, 100, , , 真)
                        判断进入 ＝ 2
                        图标计时 ＝ 0
                    .如果结束

                .如果真结束

            .否则
                判断进入 ＝ 0
            .如果结束

        .否则
            判断进入 ＝ 0
        .如果结束

    .如果结束

.否则
    判断进入 ＝ 0
.如果结束

.如果 (判断进入 ＝ 1)
    按钮1.差值 ＝ 分辨率.logo位置 ＋ 10 － 按钮1X坐标
    按钮1.加速度 ＝ 按钮1.差值 × 0.7
    按钮1.速度 ＝ 按钮1.速度 ＋ 按钮1.加速度
    按钮1.速度 ＝ 四舍五入 (按钮1.速度 × 0.4, )
    按钮1.速度 ＝ 按钮1.速度 ÷ 0.017
    按钮1X坐标 ＝ 按钮1X坐标 ＋ 按钮1.速度 × 引擎.取最后帧时间 ()

.否则
    按钮1.差值 ＝ 分辨率.logo位置 － 40 － 按钮1X坐标
    按钮1.加速度 ＝ 按钮1.差值 × 0.7
    按钮1.速度 ＝ 按钮1.速度 ＋ 按钮1.加速度
    按钮1.速度 ＝ 四舍五入 (按钮1.速度 × 0.4, )
    按钮1.速度 ＝ 按钮1.速度 ÷ 0.017
    按钮1X坐标 ＝ 按钮1X坐标 ＋ 按钮1.速度 × 引擎.取最后帧时间 ()


.如果结束
.如果 (判断进入 ＝ 2)
    按钮2.差值 ＝ 分辨率.logo位置 ＋ 10 － 按钮2X坐标
    按钮2.加速度 ＝ 按钮2.差值 × 0.7
    按钮2.速度 ＝ 按钮2.速度 ＋ 按钮2.加速度
    按钮2.速度 ＝ 四舍五入 (按钮2.速度 × 0.4, )
    按钮2.速度 ＝ 按钮2.速度 ÷ 0.017
    按钮2X坐标 ＝ 按钮2X坐标 ＋ 按钮2.速度 × 引擎.取最后帧时间 ()


.否则
    按钮2.差值 ＝ 分辨率.logo位置 － 40 － 按钮2X坐标
    按钮2.加速度 ＝ 按钮2.差值 × 0.7
    按钮2.速度 ＝ 按钮2.速度 ＋ 按钮2.加速度
    按钮2.速度 ＝ 四舍五入 (按钮2.速度 × 0.4, )
    按钮2.速度 ＝ 按钮2.速度 ÷ 0.017
    按钮2X坐标 ＝ 按钮2X坐标 ＋ 按钮2.速度 × 引擎.取最后帧时间 ()
.如果结束


.子程序 UI逻辑
.局部变量 最后帧时间, 小数型

鼠标按下 ()
LOGO移动 ()
按钮逻辑 ()
最后帧时间 ＝ 引擎.取最后帧时间 ()
粒子1.更新 (最后帧时间)
粒子2.更新 (最后帧时间)
粒子3.更新 (最后帧时间)
.如果 (音乐播放判断 ＝ 0)
    .如果 (高潮开关 ＝ 1)
        粒子2.启动到 (200, 600)
        粒子3.启动到 (分辨率.窗口宽度 － 200, 600)
    .否则
        粒子2.停止 ()
        粒子3.停止 ()
    .如果结束

.否则
    粒子2.停止 ()
    粒子3.停止 ()
.如果结束


.子程序 LOGO移动
.局部变量 LOGO移动加速度, 整数型
.局部变量 LOGO移动差值, 整数型
.局部变量 LOGO移动速度, 整数型

.如果 (logo显示位置 ＝ 1)
    .如果 (弹跳X坐标 ≤ 分辨率.logo位置 － 150)
        弹跳X坐标 ＝ 分辨率.logo位置 － 150
    .否则
        LOGO移动差值 ＝ 分辨率.logo位置 － 150 － 弹跳X坐标
        LOGO移动加速度 ＝ LOGO移动差值 × 0.3
        LOGO移动速度 ＝ LOGO移动速度 ＋ LOGO移动加速度
        LOGO移动速度 ＝ 四舍五入 (LOGO移动速度 × 0.4, )
        LOGO移动速度 ＝ LOGO移动速度 ÷ 0.017
        弹跳X坐标 ＝ 弹跳X坐标 ＋ LOGO移动速度 × 引擎.取最后帧时间 ()
    .如果结束

.否则

.如果结束
.如果 (logo显示位置 ＝ 0)
    .如果 (弹跳X坐标 ≥ 分辨率.logo位置)
        弹跳X坐标 ＝ 分辨率.logo位置
    .否则
        LOGO移动差值 ＝ 分辨率.logo位置 － 弹跳X坐标
        LOGO移动加速度 ＝ LOGO移动差值 × 0.2
        LOGO移动速度 ＝ LOGO移动速度 ＋ LOGO移动加速度
        LOGO移动速度 ＝ 四舍五入 (LOGO移动速度 × 0.4, )
        LOGO移动速度 ＝ LOGO移动速度 ÷ 0.017
        弹跳X坐标 ＝ 弹跳X坐标 ＋ LOGO移动速度 × 引擎.取最后帧时间 ()

    .如果结束

.否则

.如果结束
.如果 (图标计时 ≥ 5)
    logo显示位置 ＝ 0
.否则
    图标计时 ＝ 图标计时 ＋ 引擎.取最后帧时间 ()
.如果结束
粒子1.启动到 (弹跳X坐标, 300)

.子程序 鼠标按下

.如果 (引擎.取按键按下 (#鼠标左键) 且 鼠标坐标.x ≤ 60 且 鼠标坐标.y ≤ 25)
    .如果 (音乐播放判断 ＝ 0)
        暂停BPM ＝ MP3的BPM
        MP3的BPM ＝ 40
        BASS_ChannelPause (播放句柄)
        音乐播放判断 ＝ 1
    .否则
        .如果 (音乐播放判断 ＝ 1)
            MP3的BPM ＝ 暂停BPM
            BASS_ChannelPlay (播放句柄, 假)
            音乐播放判断 ＝ 0
        .否则

        .如果结束

    .如果结束

.否则

.如果结束
.如果 (引擎.取按键按下 (#鼠标左键) 且 鼠标坐标.x ≥ 740 且 鼠标坐标.y ≤ 25)
    .如果真 (是否已创建 (窗口1) ＝ 真)
        .如果 (窗口1.可视 ＝ 真)

        .否则
            窗口1.可视 ＝ 真
        .如果结束

    .如果真结束

.否则

.如果结束
.如果 (引擎.取按键按下 (#鼠标左键) 且 鼠标坐标.x ≤ 200 且 鼠标坐标.y ≥ 500)
    播放MP3音乐 (4)
.否则

.如果结束
.如果 (引擎.取按键按下 (#鼠标左键) 且 鼠标坐标.x ≥ 600 且 鼠标坐标.y ≥ 500)
    播放MP3音乐 ()
.否则

.如果结束
.如果真 (鼠标坐标.x ≥ 弹跳X坐标 － 200 且 鼠标坐标.y ≥ 50 且 鼠标坐标.x ≤ 弹跳X坐标 ＋ 200 且 鼠标坐标.y ≤ 450)
    .如果 (引擎.取按键按下 (#鼠标左键))
        图标计时 ＝ 0
        logo显示位置 ＝ 1
        引擎.Mu_播放高级 (按钮声音2, 100, , , 真)
    .否则

    .如果结束

.如果真结束


.子程序 弹跳
.局部变量 LOGO差值, 整数型
.局部变量 LOGO加速度, 整数型
.局部变量 LOGO速度, 整数型
.局部变量 logo移动差值, 整数型
.局部变量 LOGO移动加速度, 整数型
.局部变量 LOGO移动速度, 整数型

.如果 (LOGO亮透明度 － 5 ÷ 0.017 × 引擎.取最后帧时间 () ≤ 0)
    LOGO亮透明度 ＝ 0
.否则
    LOGO亮透明度 ＝ LOGO亮透明度 － 5 ÷ 0.017 × 引擎.取最后帧时间 ()
.如果结束
.如果 (音乐播放判断 ＝ 0)
    LOGO差值 ＝ 1000 － logo缩放
    LOGO加速度 ＝ LOGO差值 × 0.3
    LOGO速度 ＝ LOGO速度 ＋ LOGO加速度
    LOGO速度 ＝ 四舍五入 (LOGO速度 × 0.4, )
    LOGO速度 ＝ LOGO速度 ÷ 0.017
    logo缩放 ＝ logo缩放 ＋ LOGO速度 × 引擎.取最后帧时间 ()
.否则
    LOGO差值 ＝ 1000 － logo缩放
    LOGO加速度 ＝ LOGO差值 × 0.3
    LOGO速度 ＝ LOGO速度 ＋ LOGO加速度
    LOGO速度 ＝ 四舍五入 (LOGO速度 × 0.2, )
    LOGO速度 ＝ LOGO速度 ÷ 0.017
    logo缩放 ＝ logo缩放 ＋ LOGO速度 × 引擎.取最后帧时间 ()
.如果结束
弹跳图标.置混合模式 (#混合_默认)
弹跳图标.置透明度 (255)
弹跳图标.显示高级 (弹跳X坐标, 250, 0, logo缩放 ÷ 1000, logo缩放 ÷ 1000)
弹跳图标.置混合模式 (#混合_Add2X)
弹跳图标.置透明度 (LOGO亮透明度)
弹跳图标.显示高级 (弹跳X坐标, 250, 0, logo缩放 ÷ 1000, logo缩放 ÷ 1000)
.如果 (音乐播放判断 ＝ 0)
    残影差值 ＝ 2000 － 残影缩放
    残影加速度 ＝ 残影差值 × 0.2
    残影速度 ＝ 残影速度 ＋ 残影加速度
    残影速度 ＝ 四舍五入 (残影速度 × 0.1, )
    残影速度 ＝ 残影速度 × 0.017
    残影缩放 ＝ 残影缩放 ＋ 残影速度 ÷ 引擎.取最后帧时间 ()
    .如果 (残影透明度 － 4 ≤ 0)
        残影透明度 ＝ 0
    .否则
        残影透明度 ＝ 残影透明度 － 4
    .如果结束

.否则
    残影差值 ＝ 1200 － 残影缩放
    残影加速度 ＝ 残影差值 × 0.2
    残影速度 ＝ 残影速度 ＋ 残影加速度
    残影速度 ＝ 四舍五入 (残影速度 × 0.2, )
    残影速度 ＝ 残影速度 × 0.017
    残影缩放 ＝ 残影缩放 ＋ 残影速度 ÷ 引擎.取最后帧时间 ()
    .如果 (残影透明度 ≤ 0)
        残影透明度 ＝ 0
    .否则
        残影透明度 ＝ 残影透明度 － 1
    .如果结束

.如果结束
残影.显示高级 (弹跳X坐标, 250, 0, 残影缩放 ÷ 1000, 残影缩放 ÷ 1000)
残影.置透明度 (残影透明度)

.子程序 时间
.局部变量 ccc, 文本型

MP3进度 ＝ BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0))
文字.显示 (5, 5, “时间：” ＋ 进度转时间无毫秒 (MP3进度) ＋ “/” ＋ 到文本 (MP3分) ＋ “:” ＋ 处理秒数 (到文本 (mp3秒)))
MP3进度时间高潮 ＝ 进度转时间 (MP3进度)
当前播放时间 ＝ 进度转时间 (MP3进度)

.子程序 ui渲染

背景.显示高级 (0, 0, 0, 2, 1)
UI圆渲染 ()
粒子1.显示 ()
闪烁动画 ()
按钮渲染 ()
弹跳 ()
粒子2.显示 ()
粒子3.显示 ()
时间 ()
歌手名称.显示 (5, 20, MP3名称)
歌手名称.显示 (5, 35, SONG名称)
鼠标显示 ()

.子程序 UI圆渲染
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (UI圆), n)
    UI圆精灵.置透明度 (UI圆 [n].透明度)
    UI圆精灵.显示高级 (UI圆 [n].坐标X, UI圆 [n].坐标Y, 0, UI圆 [n].缩放, UI圆 [n].缩放)
.计次循环尾 ()

.子程序 闪烁动画

.如果 (闪烁左透明度 － 10 ÷ 0.017 × 引擎.取最后帧时间 () ≤ 0)
    闪烁左透明度 ＝ 0
.否则
    闪烁左透明度 ＝ 闪烁左透明度 － 10 ÷ 0.017 × 引擎.取最后帧时间 ()
.如果结束
.如果 (闪烁右透明度 － 10 ÷ 0.017 × 引擎.取最后帧时间 () ≤ 0)
    闪烁右透明度 ＝ 0
.否则
    闪烁右透明度 ＝ 闪烁右透明度 － 10 ÷ 0.017 × 引擎.取最后帧时间 ()
.如果结束
闪烁左.置透明度 (闪烁左透明度)
闪烁右.置透明度 (闪烁右透明度)
闪烁左.显示 (0, 0)
闪烁右.显示 (824, 0)

.子程序 按钮渲染

.如果 (按钮透明度 ＝ 0)

.否则
    开始按钮.显示 (按钮1X坐标, 150)
    退出按钮.显示 (按钮2X坐标, 250)
.如果结束


.子程序 退出程序, 文本型

.如果真 (是否已创建 (窗口1) ＝ 真)
    窗口1.销毁 ()
.如果真结束
返回 (“true”)

.子程序 退出

结束 ()

.子程序 UI圆初始化
.局部变量 临时UI圆, UI_圆

临时UI圆.缩放 ＝ 0.7
临时UI圆.坐标X ＝ -200
临时UI圆.坐标Y ＝ -200
临时UI圆.透明度 ＝ 100
加入成员 (UI圆, 临时UI圆)
临时UI圆.缩放 ＝ 0.4
临时UI圆.坐标X ＝ 分辨率.窗口宽度 － 200
临时UI圆.坐标Y ＝ 分辨率.窗口高度 － 400
临时UI圆.透明度 ＝ 50
加入成员 (UI圆, 临时UI圆)
临时UI圆.缩放 ＝ 0.4
临时UI圆.坐标X ＝ 分辨率.窗口宽度 － 300
临时UI圆.坐标Y ＝ 分辨率.窗口高度 － 200
临时UI圆.透明度 ＝ 50
加入成员 (UI圆, 临时UI圆)
临时UI圆.缩放 ＝ 0.4
临时UI圆.坐标X ＝ 分辨率.窗口宽度 － 200
临时UI圆.坐标Y ＝ 分辨率.窗口高度 － 400
临时UI圆.透明度 ＝ 50
加入成员 (UI圆, 临时UI圆)
临时UI圆.缩放 ＝ 0.7
临时UI圆.坐标X ＝ 分辨率.窗口宽度 － 500
临时UI圆.坐标Y ＝ 分辨率.窗口高度 － 400
临时UI圆.透明度 ＝ 50
加入成员 (UI圆, 临时UI圆)
临时UI圆.缩放 ＝ 0.4
临时UI圆.坐标X ＝ 分辨率.窗口宽度 － 500
临时UI圆.坐标Y ＝ 30
临时UI圆.透明度 ＝ 30
加入成员 (UI圆, 临时UI圆)
临时UI圆.缩放 ＝ 0.4
临时UI圆.坐标X ＝ 0
临时UI圆.坐标Y ＝ 300
临时UI圆.透明度 ＝ 50
加入成员 (UI圆, 临时UI圆)
临时UI圆.缩放 ＝ 1
临时UI圆.坐标X ＝ 100
临时UI圆.坐标Y ＝ 分辨率.窗口高度 － 300
临时UI圆.透明度 ＝ 50
加入成员 (UI圆, 临时UI圆)

