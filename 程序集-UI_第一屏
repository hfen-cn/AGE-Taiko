.版本 2

.程序集 UI_第一屏
.程序集变量 粒子精灵, Age_精灵
.程序集变量 弹跳图标, Age_精灵
.程序集变量 文字, Age_文字
.程序集变量 粒子2, Age_粒子
.程序集变量 粒子3, Age_粒子
.程序集变量 播放模式粒子, Age_粒子
.程序集变量 播放模式粒子精灵, Age_精灵
.程序集变量 残影, Age_精灵
.程序集变量 图标计时, 小数型
.程序集变量 开始按钮, Age_精灵
.程序集变量 开始按钮不可用, 整数型
.程序集变量 开始按钮可用, 整数型
.程序集变量 退出按钮, Age_精灵
.程序集变量 按钮透明度, 整数型
.程序集变量 按钮1X坐标, 整数型
.程序集变量 按钮2X坐标, 整数型
.程序集变量 背景, Age_精灵
.程序集变量 背景X缩放, 整数型
.程序集变量 背景Y缩放, 整数型
.程序集变量 闪烁左, Age_精灵
.程序集变量 闪烁右, Age_精灵
.程序集变量 残影差值, 整数型
.程序集变量 残影加速度, 整数型
.程序集变量 残影速度, 小数型
.程序集变量 残影高度变量, 整数型
.程序集变量 残影宽度变量, 整数型
.程序集变量 坐标差值, 整数型
.程序集变量 弹跳X坐标, 整数型
.程序集变量 logo显示位置, 整数型
.程序集变量 星星, 星星, , "0", 背景的星星
.程序集变量 星星精灵, Age_精灵
.程序集变量 粒子计数, 双精度小数型
.程序集变量 信息精灵, 缩放按钮类
.程序集变量 菜单按钮, 缩放按钮类
.程序集变量 暂停按钮, 缩放按钮类
.程序集变量 播放按钮, 缩放按钮类
.程序集变量 上一曲按钮, 缩放按钮类
.程序集变量 下一曲按钮, 缩放按钮类
.程序集变量 设置按钮, 缩放按钮类
.程序集变量 太鼓X坐标, 太鼓坐标, , "0"
.程序集变量 太鼓移动坐标, 整数型
.程序集变量 水波, Age_精灵
.程序集变量 水波数据, 水波, , "0"
.程序集变量 data, 小数型, , "128"
.程序集变量 data2, 小数型, , "128"
.程序集变量 data3, 整数型, , "128"
.程序集变量 进度条方盒, Age_方盒
.程序集变量 选歌列表文字, Age_文字
.程序集变量 选歌列表标题文字, Age_文字
.程序集变量 选歌列表偏移, 整数型
.程序集变量 偏移设定, 整数型
.程序集变量 滑动尽头, 整数型
.程序集变量 选歌列表滑块, Age_矢量进度条
.程序集变量 音乐列表选择项, 整数型
.程序集变量 单曲循环选择框, Age_矢量选择框
.程序集变量 歌曲封面精灵, Age_精灵
.程序集变量 封面透明度, 整数型
.程序集变量 当前歌曲封面, 整数型
.程序集变量 歌曲封面, Age_精灵
.程序集变量 播放_标题文字, Age_文字
.程序集变量 播放_歌手, Age_文字
.程序集变量 LOGO偏移X, 小数型
.程序集变量 LOGO偏移Y, 小数型

.子程序 UI频谱分析, , , Copycoder
.局部变量 lRslt, 整数型
.局部变量 fftVals, 小数型, , "128"
.局部变量 i, 整数型
.局部变量 加速度公式, 公式类

.如果真 (播放句柄 ≠ 0)
    lRslt ＝ BASS_ChannelGetData (播放句柄, fftVals, #BASS_DATA_FFT512)
    .如果真 (lRslt ≠ -1)
        .如果 (BASS_ChannelIsActive (播放句柄) ＝ 1)
            .变量循环首 (1, 128, 1, i)
                data2 [i] ＝ fftVals [i]
                data [i] ＝ data [i] ＋ ((data2 [i] ＋ data2 [i] × i × 0.35) × 300 － data [i]) × 0.1
                ' 如果 ((data2 [i] ＋ data2 [i] × i × 0.35) × 300 ＞ data [i])
                ' data [i] ＝ (data2 [i] ＋ data2 [i] × i × 0.35) × 300
                .如果 (data [i] ＞ 2)
                    ' data [i] ＝ data [i] × 0.95
                .否则
                    data [i] ＝ 2
                .如果结束


            .变量循环尾 ()

        .否则
            .变量循环首 (1, 128, 1, i)
                .如果 (data [i] ＞ 2)
                    data [i] ＝ data [i] － 帧率数据处理 (1)
                .否则
                    data [i] ＝ 2
                .如果结束

            .变量循环尾 ()

        .如果结束


    .如果真结束

.如果真结束


.子程序 UI初始化
.局部变量 纹理

logo缩放 ＝ 1160
残影缩放 ＝ 1000
LOGOX ＝ 250
LOGOY ＝ 110
UI音效动态音量 ＝ 100
弹跳X坐标 ＝ 分辨率.logo位置
引擎.读zip (取运行目录 () ＋ “\UI.pak”, “”)  ' 读取资源

信息精灵.缩放 ＝ 600
' 创建精灵
按钮声音1.句柄 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\menuclick.wav”, 0, 0, 40000)
按钮声音2.句柄 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\menuhit.wav”, 0, 0, 40000)
返回音效 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\menuback.wav”, 0, 0, 40000)
菜单打开音效 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\Menuopen.wav”, 0, 0, 40000)
LOGO节奏音效 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\Logosound.wav”, 0, 0, 40000)
按钮触碰音效 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\cace.wav”, 0, 0, 40000)
纹理 ＝ 引擎.读纹理 (“back.jpg”)
背景.创建 (纹理, 0, 0, , )
粒子精灵.创建 (引擎.读纹理 (“starblur.png”), )
星星精灵.创建 (引擎.读纹理 (“starblur.png”), )
播放模式粒子精灵.创建 (引擎.读纹理 (“starblur.png”), )
播放模式粒子精灵.置中心 (播放模式粒子精灵.取宽度 () ÷ 2, 播放模式粒子精灵.取高度 () ÷ 2)
星星精灵.置中心 (星星精灵.取宽度 () ÷ 2, 星星精灵.取高度 () ÷ 2)
粒子精灵.置中心 (26, 25)
粒子2.创建 (取运行目录 () ＋ “\psi\gogostarts.psi”, 粒子精灵)
粒子3.创建 (取运行目录 () ＋ “\psi\gogostart.psi”, 粒子精灵)
播放模式粒子.创建 (取运行目录 () ＋ “\psi\music.psi”, 播放模式粒子精灵)
播放模式粒子.缩放 (分辨率缩放倍率)
弹跳图标.创建 (引擎.读纹理 (“Logo.png”))
残影.创建 (引擎.读纹理 (“Logo.png”))
闪烁左.创建 (引擎.读纹理 (“left.png”), 0, 0, 200, 600)
闪烁右.创建 (引擎.读纹理 (“right.png”), 0, 0, 200, 600)
开始按钮可用 ＝ 引擎.读纹理 (“play.png”)
开始按钮不可用 ＝ 引擎.读纹理 (“PlayBlack.png”)
开始按钮.创建 (开始按钮可用)
退出按钮.创建 (引擎.读纹理 (“exit.png”))
信息精灵.精灵.创建 (引擎.读纹理 (“About.png”))
菜单按钮.精灵.创建 (引擎.读纹理 (“list.png”))
暂停按钮.精灵.创建 (引擎.读纹理 (“Pause.png”))
设置按钮.精灵.创建 (引擎.读纹理 (“Confi.png”))
上一曲按钮.精灵.创建 (引擎.读纹理 (“UPMUSIC.png”))
下一曲按钮.精灵.创建 (引擎.读纹理 (“DownMusic.png”))
播放按钮.精灵.创建 (引擎.读纹理 (“PlayMusic.png”))
水波.创建 (引擎.读纹理 (“水波.png”))
歌曲封面.创建 (0)
歌曲封面精灵.创建 (0)
选歌列表滑块.创建 (分辨率.窗口宽度 － 20 × 分辨率缩放倍率, 80 × 分辨率缩放倍率 ＋ 35 × 分辨率缩放倍率, 分辨率.窗口高度 － (80 ＋ 70) × 分辨率缩放倍率, 20 × 分辨率缩放倍率, 0, 100, ARGB (180, 255, 255, 255), #颜色_白, #矢量进度条_滑块无边框风格, 70 × 分辨率缩放倍率, 真)
单曲循环选择框.创建 (分辨率.窗口宽度 － 200 × 分辨率缩放倍率, 25 × 分辨率缩放倍率, 30 × 分辨率缩放倍率, 30 × 分辨率缩放倍率, 2 × 分辨率缩放倍率, 2 × 分辨率缩放倍率)
' 设定按钮初始位置
按钮1X坐标 ＝ 360
按钮2X坐标 ＝ 360
进度条方盒.创建 (10 × 分辨率缩放倍率, 6 × 分辨率缩放倍率, 220 × 分辨率缩放倍率, 8 × 分辨率缩放倍率, 0, 0, 0, 1, 1)
' 创建文字
文字.创建 (“黑体”, 15 × 分辨率缩放倍率, 假, 假, 真, #颜色_白)
选歌列表文字.创建 (“黑体”, 25 × 分辨率缩放倍率, 假, 假, 真, #颜色_白)
选歌列表标题文字.创建 (“黑体”, 35 × 分辨率缩放倍率, 真, 假, 真, #颜色_白)
播放_标题文字.创建 (“黑体”, 35 × 分辨率缩放倍率, 假, 假, 真, #颜色_白)
播放_歌手.创建 (“黑体”, 15 × 分辨率缩放倍率, 假, 假, 真, #颜色_白)

弹跳图标.置中心 (弹跳图标.取宽度 () ÷ 2, 弹跳图标.取高度 () ÷ 2)
暂停按钮.精灵.置中心 (暂停按钮.精灵.取宽度 () ÷ 2, 暂停按钮.精灵.取高度 () ÷ 2)
菜单按钮.精灵.置中心 (菜单按钮.精灵.取宽度 () ÷ 2, 菜单按钮.精灵.取高度 () ÷ 2)
设置按钮.精灵.置中心 (设置按钮.精灵.取宽度 () ÷ 2, 设置按钮.精灵.取高度 () ÷ 2)
上一曲按钮.精灵.置中心 (上一曲按钮.精灵.取宽度 () ÷ 2, 上一曲按钮.精灵.取高度 () ÷ 2)
下一曲按钮.精灵.置中心 (下一曲按钮.精灵.取宽度 () ÷ 2, 下一曲按钮.精灵.取高度 () ÷ 2)
播放按钮.精灵.置中心 (播放按钮.精灵.取宽度 () ÷ 2, 播放按钮.精灵.取高度 () ÷ 2)

残影.置中心 (残影.取宽度 () ÷ 2, 残影.取高度 () ÷ 2)
水波.置中心 (水波.取宽度 () ÷ 2, 水波.取高度 () ÷ 2)

信息精灵.精灵.置中心 (0, 200)
残影.置透明度 (0)

' 设定混合模式
播放模式粒子精灵.置混合模式 (#混合_明度)
背景.置混合模式 (#混合_默认)
粒子精灵.置混合模式 (#混合_默认)
弹跳图标.置混合模式 (#混合_默认)
残影.置混合模式 (#混合_默认)
闪烁左.置混合模式 (#混合_Add2X)
闪烁右.置混合模式 (#混合_Add2X)
开始按钮.置混合模式 (#混合_默认)
退出按钮.置混合模式 (#混合_默认)
暂停按钮.精灵.置混合模式 (#混合_默认)
菜单按钮.精灵.置混合模式 (#混合_默认)
设置按钮.精灵.置混合模式 (#混合_默认)
上一曲按钮.精灵.置混合模式 (#混合_默认)
下一曲按钮.精灵.置混合模式 (#混合_默认)
播放按钮.精灵.置混合模式 (#混合_默认)
水波.置混合模式 (#混合_默认)
星星精灵.置混合模式 (#混合_默认)
歌曲封面精灵.置混合模式 (#混合_默认)

.子程序 LOGO计时
.局部变量 计时, 整数型
.局部变量 计数, 整数型, 静态
.局部变量 暂停计时, 小数型, 静态
.局部变量 闪烁计数, 整数型, 静态
.局部变量 临时水波, 水波


.如果 (BASS_ChannelIsActive (播放句柄) ＝ 1)
    计时 ＝ (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)) ＋ OFFSET) × 1000 ÷ (60000 ÷ MP3的BPM)
    .如果 (计数 ＝ 计时)

    .否则
        .如果 (当前窗口 ＝ “UI”)
            logo缩放 ＝ 1100
            残影缩放 ＝ 1100
            .如果真 (播放器模式 ＝ 假)
                .如果真 (判断是否进入区域 (弹跳X坐标 － 200 × 分辨率缩放倍率, 弹跳X坐标 ＋ 200 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 250 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 ＋ 200 × 分辨率缩放倍率) ＝ 真 且 选歌列表开关 ＝ 假)
                    BASS_ChannelPlay (LOGO节奏音效, 真)
                .如果真结束
                临时水波.缩放 ＝ 1000
                临时水波.坐标 ＝ 弹跳X坐标
                临时水波.透明度 ＝ 70
                加入成员 (水波数据, 临时水波)
            .如果真结束
            加入星星 (10)
            残影透明度 ＝ 50
            .如果真 (高潮开关 ＝ 1)
                LOGO亮透明度 ＝ 50
                震荡一下 ()
            .如果真结束
            .如果 (高潮开关 ＝ 1)
                .如果 (左右变量 ＝ “右”)
                    左右变量 ＝ “左”
                .否则
                    左右变量 ＝ “右”
                .如果结束
                .如果 (左右变量 ＝ “右”)
                    闪烁右透明度 ＝ 100
                .否则

                .如果结束
                .如果 (左右变量 ＝ “左”)
                    闪烁左透明度 ＝ 100
                .否则

                .如果结束

            .否则

            .如果结束





        .否则

        .如果结束
        计数 ＝ 计时
    .如果结束
    计时 ＝ (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)) ＋ OFFSET) × 1000 ÷ 4 ÷ (60000 ÷ MP3的BPM)
    .如果 (闪烁计数 ＝ 计时)

    .否则
        .如果 (高潮开关 ＝ 0)
            闪烁右透明度 ＝ 100
            闪烁左透明度 ＝ 100
        .否则

        .如果结束
        闪烁计数 ＝ 计时
    .如果结束



.否则
    .如果 (暂停计时 ≥ 60000 ÷ 30)
        .如果 (当前窗口 ＝ “UI”)
            .如果真 (播放器模式 ＝ 假)
                logo缩放 ＝ 1050
                残影缩放 ＝ 1050
                .如果真 (判断是否进入区域 (弹跳X坐标 － 200 × 分辨率缩放倍率, 弹跳X坐标 ＋ 200 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 250 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 ＋ 200 × 分辨率缩放倍率) ＝ 真 且 选歌列表开关 ＝ 假)
                    BASS_ChannelPlay (LOGO节奏音效, 真)
                .如果真结束

                加入星星 (音乐BPM ÷ 10)
                临时水波.缩放 ＝ 1000
                临时水波.坐标 ＝ 弹跳X坐标
                临时水波.透明度 ＝ 70
                加入成员 (水波数据, 临时水波)

            .如果真结束
            .如果真 (高潮开关 ＝ 1)
                LOGO亮透明度 ＝ 50
            .如果真结束
            残影透明度 ＝ 60
        .否则

        .如果结束
        暂停计时 ＝ 0
    .否则
        暂停计时 ＝ 暂停计时 ＋ 引擎.取最后帧时间 () × 1000
    .如果结束

.如果结束



.子程序 按钮逻辑
.局部变量 判断进入, 整数型, 静态
.局部变量 开始游戏加速度, 公式类, 静态
.局部变量 退出游戏加速度, 公式类, 静态
.局部变量 加速度公式, 公式类, 静态
.局部变量 设置加速度, 公式类, 静态
.局部变量 暂停加速度, 公式类, 静态
.局部变量 信息加速度, 公式类, 静态
.局部变量 播放加速度, 公式类, 静态
.局部变量 上一曲加速度, 公式类, 静态
.局部变量 下一曲加速度, 公式类, 静态
.局部变量 菜单触碰, 整数型, 静态
.局部变量 设置触碰, 整数型, 静态
.局部变量 上一曲触碰, 整数型, 静态
.局部变量 暂停触碰, 整数型, 静态
.局部变量 播放触碰, 整数型, 静态
.局部变量 下一曲触碰, 整数型, 静态

.如果 (logo显示位置 ＝ 1)
    .如果 (按钮透明度 ＋ 帧率数据处理 (10) ≥ 240)
        按钮透明度 ＝ 240
    .否则
        按钮透明度 ＝ 按钮透明度 ＋ 帧率数据处理 (10)
    .如果结束

.否则
    .如果 (logo显示位置 ＝ 0)
        .如果 (按钮透明度 － 帧率数据处理 (10) ≤ 0)
            按钮透明度 ＝ 0
        .否则
            按钮透明度 ＝ 按钮透明度 － 帧率数据处理 (10)
        .如果结束
        判断进入 ＝ 0
    .否则

    .如果结束

.如果结束

.如果 (播放器模式 ＝ 真)

.否则


    .如果 (欢迎音乐 ＝ 真)
        开始按钮.置纹理 (开始按钮可用)
    .否则
        开始按钮.置纹理 (开始按钮不可用)
    .如果结束


    开始按钮.置透明度 (按钮透明度)
    退出按钮.置透明度 (按钮透明度)
.如果结束


.如果真 (选歌列表开关 ＝ 假)
    .如果 (播放器模式 ＝ 真)

    .否则
        .如果 (logo显示位置 ＝ 1)
            .如果 (判断是否进入区域 (分辨率.窗口宽度 ÷ 2 ＋ 40 × 分辨率缩放倍率, 分辨率.窗口宽度 ÷ 2 ＋ 310 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 150 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 50 × 分辨率缩放倍率) ＝ 真)
                .如果 (判断进入 ＝ 1)
                    .如果真 (引擎.键_取按下 (#鼠标左键) 且 欢迎音乐 ＝ 真)
                        播放音乐 (按钮声音2.句柄)
                        新音乐初始化 ()
                        图标计时 ＝ 0
                    .如果真结束

                .否则

                    播放音乐 (按钮声音1.句柄)
                    判断进入 ＝ 1
                    图标计时 ＝ 0
                .如果结束

            .否则

                .如果 (判断是否进入区域 (分辨率.窗口宽度 ÷ 2 ＋ 40 × 分辨率缩放倍率, 分辨率.窗口宽度 ÷ 2 ＋ 310 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 30 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 ＋ 50 × 分辨率缩放倍率) ＝ 真)
                    .如果真 (鼠标坐标.x ≥ 分辨率.logo位置 ＋ 30)
                        .如果 (判断进入 ＝ 2)
                            .如果真 (引擎.键_取按下 (#鼠标左键))
                                播放音乐 (按钮声音2.句柄)
                                BASS_ChannelPause (播放句柄)
                                加入控制台文本 (“BASS_ChannelPause -->” ＋ 到文本 (播放句柄) ＋ “-->” ＋ 到文本 (BASS_ChannelPause (播放句柄)))
                                遮罩切换 (“”, 20, &退出)
                                图标计时 ＝ 0
                            .如果真结束

                        .否则

                            播放音乐 (按钮声音1.句柄)
                            判断进入 ＝ 2
                            图标计时 ＝ 0
                        .如果结束

                    .如果真结束

                .否则
                    判断进入 ＝ 0

                .如果结束

            .如果结束





        .否则
            判断进入 ＝ 0
        .如果结束

        .如果 (判断进入 ＝ 1)
            按钮1X坐标 ＝ 开始游戏加速度.加速度公式 (按钮1X坐标, 分辨率.logo位置 ＋ 10 × 分辨率缩放倍率, 0.4, 0.7)
        .否则
            按钮1X坐标 ＝ 开始游戏加速度.加速度公式 (按钮1X坐标, 分辨率.logo位置 － 40 × 分辨率缩放倍率, 0.3, 0.4)
        .如果结束
        .如果 (判断进入 ＝ 2)
            按钮2X坐标 ＝ 退出游戏加速度.加速度公式 (按钮2X坐标, 分辨率.logo位置 ＋ 10 × 分辨率缩放倍率, 0.4, 0.7)
        .否则
            按钮2X坐标 ＝ 退出游戏加速度.加速度公式 (按钮2X坐标, 分辨率.logo位置 － 40 × 分辨率缩放倍率, 0.3, 0.4)
        .如果结束
        .如果真 (判断是否进入区域 (弹跳X坐标 － 200 × 分辨率缩放倍率, 弹跳X坐标 ＋ 200 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 250 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 ＋ 200 × 分辨率缩放倍率) ＝ 真)
            .如果 (引擎.键_取按下 (#鼠标左键))
                图标计时 ＝ 0
                logo显示位置 ＝ 1
                播放音乐 (按钮声音2.句柄)
            .否则

            .如果结束

        .如果真结束

    .如果结束


    .如果 (判断是否进入区域 (分辨率.窗口宽度 － 60 × 分辨率缩放倍率, 分辨率.窗口宽度 － 10 × 分辨率缩放倍率, 0, 50) ＝ 真)

        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选歌列表开关 ＝ 真
            加入控制台文本 (“Open MusicList View”)
        .如果真结束
        .如果 (引擎.键_取选中 (#鼠标左键))
            菜单按钮.缩放 ＝ 加速度公式.加速度公式 (菜单按钮.缩放, 750, 0.4, 0.3)
        .否则
            菜单按钮.缩放 ＝ 加速度公式.加速度公式 (菜单按钮.缩放, 1000, 0.4, 0.7)
            .如果 (菜单触碰 ＝ 1)

            .否则
                菜单触碰 ＝ 1
                BASS_ChannelPlay (按钮触碰音效, 真)
            .如果结束

        .如果结束


    .否则
        菜单按钮.缩放 ＝ 加速度公式.加速度公式 (菜单按钮.缩放, 700, 0.4, 0.7)
        菜单触碰 ＝ 0
    .如果结束

    .如果 (判断是否进入区域 (分辨率.窗口宽度 － 60 × 分辨率缩放倍率, 分辨率.窗口宽度 － 10 × 分辨率缩放倍率, 分辨率.窗口高度 － 60 × 分辨率缩放倍率, 分辨率.窗口高度 － 10 × 分辨率缩放倍率) ＝ 真)

        .如果真 (引擎.键_取弹起 (#鼠标左键))
            加入控制台文本 (“BASS_ChannelPlay  -->” ＋ 到文本 (按钮声音2.句柄) ＋ “-->” ＋ 到文本 (BASS_ChannelPlay (按钮声音2.句柄, 真)))
            遮罩切换_无执行 (“Setting”, 20, 假)
        .如果真结束
        .如果 (引擎.键_取选中 (#鼠标左键))
            设置按钮.缩放 ＝ 设置加速度.加速度公式 (设置按钮.缩放, 750, 0.4, 0.3)
        .否则
            设置按钮.缩放 ＝ 设置加速度.加速度公式 (设置按钮.缩放, 1000, 0.4, 0.7)
            .如果 (设置触碰 ＝ 1)

            .否则
                设置触碰 ＝ 1
                BASS_ChannelPlay (按钮触碰音效, 真)
            .如果结束


        .如果结束


    .否则
        设置按钮.缩放 ＝ 设置加速度.加速度公式 (设置按钮.缩放, 700, 0.4, 0.7)
        设置触碰 ＝ 0
    .如果结束

    .如果 (判断是否进入区域 (分辨率.窗口宽度 － 75 × 分辨率缩放倍率, 分辨率.窗口宽度 － 65 × 分辨率缩放倍率, 15 × 分辨率缩放倍率, 50 × 分辨率缩放倍率) ＝ 真)

        .如果真 (引擎.键_取弹起 (#鼠标左键))
            .如果 (BASS_ChannelIsActive (播放句柄) ＝ 1)
                暂停BPM ＝ MP3的BPM
                MP3的BPM ＝ 40
                加入控制台文本 (“BASS_ChannelPause -->” ＋ 到文本 (播放句柄) ＋ “-->” ＋ 到文本 (BASS_ChannelPause (播放句柄)))
            .否则
                .如果 (BASS_ChannelIsActive (播放句柄) ＝ 3)
                    MP3的BPM ＝ 暂停BPM
                    加入控制台文本 (“BASS_ChannelPause -->” ＋ 到文本 (播放句柄) ＋ “-->” ＋ 到文本 (BASS_ChannelPlay (播放句柄, 假)))

                .否则

                .如果结束

            .如果结束



        .如果真结束
        .如果 (引擎.键_取选中 (#鼠标左键))
            暂停按钮.缩放 ＝ 暂停加速度.加速度公式 (暂停按钮.缩放, 450, 0.4, 0.3)
        .否则
            暂停按钮.缩放 ＝ 暂停加速度.加速度公式 (暂停按钮.缩放, 600, 0.4, 0.7)
            .如果 (暂停触碰 ＝ 1)

            .否则
                暂停触碰 ＝ 1
                BASS_ChannelPlay (按钮触碰音效, 真)
            .如果结束


        .如果结束


    .否则
        暂停按钮.缩放 ＝ 暂停加速度.加速度公式 (暂停按钮.缩放, 400, 0.4, 0.7)
        暂停触碰 ＝ 0
    .如果结束

    .如果 (判断是否进入区域 (分辨率.窗口宽度 － 95 × 分辨率缩放倍率, 分辨率.窗口宽度 － 80 × 分辨率缩放倍率, 15 × 分辨率缩放倍率, 50 × 分辨率缩放倍率) ＝ 真)

        .如果真 (引擎.键_取弹起 (#鼠标左键))
            .如果 (BASS_ChannelIsActive (播放句柄) ＝ 3)
                BASS_ChannelPlay (播放句柄, 假)
                MP3的BPM ＝ 暂停BPM
            .否则
                BASS_ChannelPlay (播放句柄, 真)
                MP3的BPM ＝ 暂停BPM
            .如果结束

        .如果真结束
        .如果 (引擎.键_取选中 (#鼠标左键))
            播放按钮.缩放 ＝ 播放加速度.加速度公式 (播放按钮.缩放, 450, 0.4, 0.3)
        .否则
            播放按钮.缩放 ＝ 播放加速度.加速度公式 (播放按钮.缩放, 600, 0.4, 0.7)
            .如果 (播放触碰 ＝ 1)

            .否则
                播放触碰 ＝ 1
                BASS_ChannelPlay (按钮触碰音效, 真)
            .如果结束


        .如果结束


    .否则
        播放按钮.缩放 ＝ 播放加速度.加速度公式 (播放按钮.缩放, 400, 0.4, 0.7)
        播放触碰 ＝ 0
    .如果结束

    .如果 (判断是否进入区域 (分辨率.窗口宽度 － 115 × 分辨率缩放倍率, 分辨率.窗口宽度 － 105 × 分辨率缩放倍率, 15 × 分辨率缩放倍率, 50 × 分辨率缩放倍率) ＝ 真)

        .如果真 (引擎.键_取弹起 (#鼠标左键))
            播放MP3音乐 ()
        .如果真结束
        .如果 (引擎.键_取选中 (#鼠标左键))
            下一曲按钮.缩放 ＝ 下一曲加速度.加速度公式 (下一曲按钮.缩放, 450, 0.4, 0.3)
        .否则
            下一曲按钮.缩放 ＝ 下一曲加速度.加速度公式 (下一曲按钮.缩放, 600, 0.4, 0.7)
            .如果 (下一曲触碰 ＝ 1)

            .否则
                下一曲触碰 ＝ 1
                BASS_ChannelPlay (按钮触碰音效, 真)
            .如果结束


        .如果结束


    .否则
        下一曲按钮.缩放 ＝ 下一曲加速度.加速度公式 (下一曲按钮.缩放, 400, 0.4, 0.7)
        下一曲触碰 ＝ 0
    .如果结束

    .如果 (判断是否进入区域 (分辨率.窗口宽度 － 140 × 分辨率缩放倍率, 分辨率.窗口宽度 － 120 × 分辨率缩放倍率, 15 × 分辨率缩放倍率, 50 × 分辨率缩放倍率) ＝ 真)

        .如果真 (引擎.键_取弹起 (#鼠标左键))
            播放MP3音乐 (4)
        .如果真结束
        .如果 (引擎.键_取选中 (#鼠标左键))
            上一曲按钮.缩放 ＝ 上一曲加速度.加速度公式 (上一曲按钮.缩放, 450, 0.4, 0.3)
        .否则
            上一曲按钮.缩放 ＝ 上一曲加速度.加速度公式 (上一曲按钮.缩放, 600, 0.4, 0.7)
            .如果 (上一曲触碰 ＝ 1)

            .否则
                上一曲触碰 ＝ 1
                BASS_ChannelPlay (按钮触碰音效, 真)
            .如果结束


        .如果结束


    .否则
        上一曲按钮.缩放 ＝ 上一曲加速度.加速度公式 (上一曲按钮.缩放, 400, 0.4, 0.7)
        上一曲触碰 ＝ 0
    .如果结束




    .如果 (判断是否进入区域 (0, 200 × 分辨率缩放倍率, 分辨率.窗口高度 － 100 × 分辨率缩放倍率, 分辨率.窗口高度) ＝ 真)

        .如果真 (引擎.键_取弹起 (#鼠标左键))


        .如果真结束
        .如果 (引擎.键_取选中 (#鼠标左键))
            信息精灵.缩放 ＝ 信息加速度.加速度公式 (信息精灵.缩放, 540, 0.4, 0.7)

        .否则
            信息精灵.缩放 ＝ 信息加速度.加速度公式 (信息精灵.缩放, 600, 0.3, 0.8)
        .如果结束


    .否则
        信息精灵.缩放 ＝ 信息加速度.加速度公式 (信息精灵.缩放, 500, 0.4, 0.7)
    .如果结束

.如果真结束


.子程序 UI逻辑
.局部变量 最后帧时间, 小数型

LOGO计时 ()
LOGO移动 ()
按钮逻辑 ()
星星逻辑 ()
高潮逻辑 ()
水波逻辑 ()
读取进度及判断 ()
进度条逻辑 ()
选歌列表逻辑 ()
UI频谱分析 ()
重扫描歌曲 ()
最后帧时间 ＝ 引擎.取最后帧时间 ()
粒子2.更新 (最后帧时间)
粒子3.更新 (最后帧时间)
播放模式粒子.更新 (最后帧时间)


.子程序 重扫描歌曲

.如果真 (引擎.键_取按下 (#F5键))
    加入通知 (“提示”, “正在扫描音乐...”)
    读取音乐 ()
    指定播放音乐 (1)
.如果真结束


.子程序 清理粒子

播放模式粒子.停止 (真)

.子程序 选歌列表逻辑
.局部变量 n, 整数型
.局部变量 数值差值, 双精度小数型, 静态
.局部变量 数值加速度, 双精度小数型, 静态
.局部变量 数值速度, 双精度小数型, 静态
.局部变量 声音播放, 整数型, 静态

.如果真 (选歌列表开关 ＝ 真)
    .如果 (取数组成员数 (音乐列表) ＞ (分辨率.窗口高度 － 80 × 分辨率缩放倍率) ÷ (30 × 分辨率缩放倍率))
        滑动尽头 ＝ －(取数组成员数 (音乐列表) ＋ 1 － (分辨率.窗口高度 － 80 × 分辨率缩放倍率) ÷ (30 × 分辨率缩放倍率)) × 30 × 分辨率缩放倍率
        选歌列表滑块.置最大值 (－滑动尽头)
    .否则

    .如果结束
    .如果 (选歌列表滑块.鼠标逻辑_滑块模式 () ＝ 真)
        偏移设定 ＝ －选歌列表滑块.取进度条当前值 ()
        选歌列表偏移 ＝ 偏移设定
    .否则
        .如果 (偏移设定 ＋ 引擎.键_取滚轮事件 () × 30 × 分辨率缩放倍率 ≤ 滑动尽头)
            偏移设定 ＝ 滑动尽头
        .否则
            .如果 (偏移设定 ＋ 引擎.键_取滚轮事件 () × 30 × 分辨率缩放倍率 ≥ 0)
                偏移设定 ＝ 0
            .否则
                偏移设定 ＝ 偏移设定 ＋ 引擎.键_取滚轮事件 () × 30 × 分辨率缩放倍率
            .如果结束

        .如果结束

    .如果结束

    数值差值 ＝ 偏移设定 － 选歌列表偏移
    数值加速度 ＝ 数值差值 × 0.5
    数值速度 ＝ 数值速度 ＋ 数值加速度
    数值速度 ＝ 四舍五入 (数值速度 × 0.3, )
    选歌列表偏移 ＝ 选歌列表偏移 ＋ 帧率数据处理 (数值速度)
    .如果 (数值速度 ＝ 0)
        选歌列表偏移 ＝ 偏移设定
    .否则

    .如果结束


    .如果 (选歌列表滑块.鼠标逻辑_滑块模式 () ＝ 真)
        音乐列表选择项 ＝ -1
        声音播放 ＝ -1
    .否则
        选歌列表滑块.置进度条当前值 (－选歌列表偏移)
        .如果 (判断是否进入区域 (0, 分辨率.窗口宽度, 80 × 分辨率缩放倍率, 分辨率.窗口高度))
            .计次循环首 (取数组成员数 (音乐列表), n)
                .如果 (判断是否进入区域 (0, 分辨率.窗口宽度, 80 × 分辨率缩放倍率 ＋ 30 × (n － 1) × 分辨率缩放倍率 ＋ 选歌列表偏移, 80 × 分辨率缩放倍率 ＋ 30 × n × 分辨率缩放倍率 ＋ 选歌列表偏移 － 1))
                    音乐列表选择项 ＝ n
                    .如果 (音乐列表选择项 ＝ 声音播放)

                    .否则
                        声音播放 ＝ 音乐列表选择项
                        BASS_ChannelPlay (按钮触碰音效, 真)
                    .如果结束
                    .如果 (引擎.键_取按下 (#鼠标左键))
                        音乐菜单播放音乐 (n)
                        选歌列表开关 ＝ 假
                    .否则

                    .如果结束
                    跳出循环 ()
                .否则
                    音乐列表选择项 ＝ -1
                .如果结束

            .计次循环尾 ()

        .否则
            音乐列表选择项 ＝ -1
        .如果结束

    .如果结束

    单曲循环选择框.判定逻辑 ()
    音乐单曲循环 ＝ 单曲循环选择框.取选中 ()
    .如果真 (引擎.键_取按下 (#Esc键))
        选歌列表开关 ＝ 假
    .如果真结束

.如果真结束


.子程序 进度条逻辑
.局部变量 鼠标所在百分比, 小数型
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 记录点, 整数型
.局部变量 记录类型, 文本型

.如果 (播放器模式 ＝ 真)
    进度条方盒.置位置 (100 × 分辨率缩放倍率, 450 × 分辨率缩放倍率)
    进度条方盒.置宽度 (分辨率.窗口宽度 － 200 × 分辨率缩放倍率)
    进度条方盒.置高度 (10 × 分辨率缩放倍率)

.否则
    进度条方盒.置位置 (10 × 分辨率缩放倍率, 6 × 分辨率缩放倍率)
    进度条方盒.置宽度 (220 × 分辨率缩放倍率)
    进度条方盒.置高度 (8 × 分辨率缩放倍率)
.如果结束

' 100 × 分辨率缩放倍率 ＋ (分辨率.窗口宽度 － 200 × 分辨率缩放倍率) ÷ 100 × 时间百分比

.如果 (进度条方盒.检测点 (鼠标坐标.x, 鼠标坐标.y))
    .如果真 (引擎.键_取按下 (#鼠标左键))
        .如果 (播放器模式 ＝ 真)
            鼠标所在百分比 ＝ BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetLength (播放句柄, 0)) × (鼠标坐标.x － 100 × 分辨率缩放倍率) ÷ ((分辨率.窗口宽度 － 200 × 分辨率缩放倍率) ÷ 100) ÷ 100
        .否则
            鼠标所在百分比 ＝ BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetLength (播放句柄, 0)) × (鼠标坐标.x － 10 × 分辨率缩放倍率) ÷ (2.2 × 分辨率缩放倍率) ÷ 100
        .如果结束
        BASS_ChannelSetPosition (播放句柄, BASS_ChannelSeconds2Bytes (播放句柄, 鼠标所在百分比), 0)
        高潮逻辑 ()
    .如果真结束

.否则

.如果结束


.子程序 水波逻辑
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (水波数据), n)
    .如果真 (n ≤ 取数组成员数 (水波数据))
        水波数据 [n].缩放 ＝ 水波数据 [n].缩放 ＋ 帧率数据处理 (10)
        .如果 (水波数据 [n].透明度 － 帧率数据处理 (1) ≤ 0)
            删除成员 (水波数据, n, 1)
        .否则
            水波数据 [n].透明度 ＝ 水波数据 [n].透明度 － 帧率数据处理 (1)
        .如果结束



    .如果真结束

.计次循环尾 ()

.子程序 启动UI粒子

加入控制台文本 (“Open UI Particle  -->启动UI粒子”)
粒子2.启动到 (200 ÷ 分辨率缩放倍率, 分辨率.窗口高度 ÷ 分辨率缩放倍率)
粒子3.启动到 ((分辨率.窗口宽度 － 200) ÷ 分辨率缩放倍率, 分辨率.窗口高度 ÷ 分辨率缩放倍率)

.子程序 LOGO移动
.局部变量 LOGO移动加速度, 整数型
.局部变量 LOGO移动差值, 整数型
.局部变量 LOGO移动速度, 整数型

.如果 (logo显示位置 ＝ 1)
    弹跳X坐标 ＝ 弹跳X坐标 ＋ (分辨率.窗口宽度 ÷ 2 － 150 × 分辨率缩放倍率 － 弹跳X坐标) × 0.1
.否则

.如果结束
.如果 (logo显示位置 ＝ 0)
    弹跳X坐标 ＝ 弹跳X坐标 ＋ (分辨率.窗口宽度 ÷ 2 － 弹跳X坐标) × 0.1
.否则

.如果结束

.如果 (图标计时 ≥ 5)
    logo显示位置 ＝ 0
.否则
    图标计时 ＝ 图标计时 ＋ 引擎.取最后帧时间 ()
.如果结束


.子程序 LOGO渲染
.局部变量 LOGO差值, 整数型
.局部变量 LOGO加速度, 整数型
.局部变量 LOGO速度, 整数型
.局部变量 logo移动差值, 整数型
.局部变量 LOGO移动加速度, 整数型
.局部变量 LOGO移动速度, 整数型


.如果 (LOGO亮透明度 － 帧率数据处理 (5) ≤ 0)
    LOGO亮透明度 ＝ 0
.否则
    LOGO亮透明度 ＝ LOGO亮透明度 － 帧率数据处理 (5)
.如果结束
.如果 (BASS_ChannelIsActive (播放句柄) ≠ 3)
    logo缩放 ＝ logo缩放 ＋ (1000 － logo缩放) × 0.02
.否则
    logo缩放 ＝ logo缩放 ＋ (1000 － logo缩放) × 0.01
.如果结束

弹跳图标.置混合模式 (#混合_默认)
弹跳图标.置透明度 (255)
弹跳图标.显示高级 (弹跳X坐标 － LOGO偏移X, 分辨率.窗口高度 ÷ 2 － 50 × 分辨率缩放倍率 － LOGO偏移Y, 0, logo缩放 ÷ 1000 × 分辨率缩放倍率 × 0.2, logo缩放 ÷ 1000 × 分辨率缩放倍率 × 0.2)
弹跳图标.置混合模式 (#混合_Add2X)
弹跳图标.置透明度 (LOGO亮透明度)
弹跳图标.显示高级 (弹跳X坐标 － LOGO偏移X, 分辨率.窗口高度 ÷ 2 － 50 × 分辨率缩放倍率 － LOGO偏移Y, 0, logo缩放 ÷ 1000 × 分辨率缩放倍率 × 0.2, logo缩放 ÷ 1000 × 分辨率缩放倍率 × 0.2)

.如果 (BASS_ChannelIsActive (播放句柄) ≠ 3)
    残影缩放 ＝ 残影缩放 ＋ (2000 － 残影缩放) × 0.01
    .如果 (残影透明度 － 帧率数据处理 (4) ≤ 0)
        残影透明度 ＝ 0
    .否则
        残影透明度 ＝ 残影透明度 － 帧率数据处理 (4)
    .如果结束

.否则
    残影缩放 ＝ 残影缩放 ＋ (1200 － 残影缩放) × 0.01
    .如果 (残影透明度 － 帧率数据处理 (1) ≤ 0)
        残影透明度 ＝ 0
    .否则
        残影透明度 ＝ 残影透明度 － 帧率数据处理 (1)
    .如果结束

.如果结束


残影.置透明度 (残影透明度)
残影.显示高级 (弹跳X坐标 － LOGO偏移X, 分辨率.窗口高度 ÷ 2 － 50 × 分辨率缩放倍率 － LOGO偏移Y, 0, 残影缩放 ÷ 1000 × 分辨率缩放倍率 × 0.2, 残影缩放 ÷ 1000 × 分辨率缩放倍率 × 0.2)

.子程序 时间
.局部变量 ccc, 文本型

MP3进度 ＝ BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0))
MP3进度时间高潮 ＝ 进度转时间 (MP3进度)
当前播放时间 ＝ 进度转时间 (MP3进度)

.子程序 ui渲染
.局部变量 时间百分比, 双精度小数型
.局部变量 方块百分比, 双精度小数型, 静态

UI显示背景 ()
显示封面 ()
星星渲染 ()
闪烁动画 ()
绘制频谱 ()
水波渲染 ()
按钮渲染 ()
.如果 (播放器模式 ＝ 真)
    播放器控件 ()
.否则
    LOGO渲染 ()
.如果结束
粒子2.缩放 (分辨率缩放倍率)
粒子3.缩放 (分辨率缩放倍率)
粒子2.显示 ()
粒子3.显示 ()

关于渲染 ()
时间 ()

' 渲染文字
.如果真 (播放器模式 ＝ 假)
    画方块 (10 × 分辨率缩放倍率, 6 × 分辨率缩放倍率, 230 × 分辨率缩放倍率, 14 × 分辨率缩放倍率, ARGB (50, 255, 255, 255))
    时间百分比 ＝ MP3进度 ÷ BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetLength (播放句柄, 0)) × 100
    方块百分比 ＝ 方块百分比 ＋ (2.2 × 时间百分比 － 方块百分比) × 0.3
    画方块 (10 × 分辨率缩放倍率, 6 × 分辨率缩放倍率, (10 ＋ 方块百分比) × 分辨率缩放倍率, 14 × 分辨率缩放倍率, ARGB (100, 255, 255, 255))
    播放模式粒子.启动到 (10 × 分辨率缩放倍率 ＋ 方块百分比, 9)
    播放模式粒子.显示 ()
    文字.显示 (10 × 分辨率缩放倍率, 15 × 分辨率缩放倍率, SONG名称 ＋ “ - ” ＋ MP3名称)
.如果真结束


.如果 (调试信息显示 ＝ 真)
    进度条方盒.显示 ()
.否则

.如果结束


.子程序 播放器控件
.局部变量 时间百分比, 双精度小数型
.局部变量 歌曲最大长度, 文本型
.局部变量 主封面透明度, 整数型, 静态
.局部变量 替换判断, 逻辑型, 静态
.局部变量 文字1, 整数型, 静态
.局部变量 文字2, 整数型, 静态
.局部变量 标题加速度公式, 公式类, 静态
.局部变量 标题加速度公式2, 公式类, 静态
.局部变量 封面记录, 整数型
.局部变量 方块百分比, 双精度小数型, 静态

.如果 (有封面 ＝ 假)
    .如果 (主封面透明度 － 帧率数据处理 (10) ≤ 0)
        主封面透明度 ＝ 0
    .否则
        主封面透明度 ＝ 主封面透明度 － 帧率数据处理 (10)
    .如果结束
    替换判断 ＝ 假
.否则
    .如果 (替换判断 ＝ 假)
        .如果 (主封面透明度 － 帧率数据处理 (10) ≤ 0)
            主封面透明度 ＝ 0
            引擎.销毁图片 (封面记录)
            封面记录 ＝ 歌曲封面无处理
            歌曲封面.置纹理 (封面记录)
            歌曲封面.置渲染区域 (0, 0, 引擎.取图片宽 (歌曲封面无处理), 引擎.取图片高 (歌曲封面无处理))
            替换判断 ＝ 真
        .否则
            主封面透明度 ＝ 主封面透明度 － 帧率数据处理 (10)
        .如果结束

    .否则
        .如果 (主封面透明度 ＋ 帧率数据处理 (10) ≥ 255)
            主封面透明度 ＝ 255
        .否则
            主封面透明度 ＝ 主封面透明度 ＋ 帧率数据处理 (10)
        .如果结束

    .如果结束

.如果结束


.如果 (有封面 ＝ 假)
    文字1 ＝ 标题加速度公式.摩擦公式 (文字1, 120 × 分辨率缩放倍率, 3)
    文字2 ＝ 标题加速度公式2.摩擦公式 (文字2, 120 × 分辨率缩放倍率, 3)
    歌曲封面.置透明度 (主封面透明度)
    歌曲封面.显示区域 (100 × 分辨率缩放倍率, 100 × 分辨率缩放倍率, (100 ＋ 封面偏移) × 分辨率缩放倍率, 400 × 分辨率缩放倍率)
.否则
    文字1 ＝ 标题加速度公式.摩擦公式 (文字1, (120 ＋ 封面偏移) × 分辨率缩放倍率, 3)
    文字2 ＝ 标题加速度公式2.摩擦公式 (文字2, (120 ＋ 封面偏移) × 分辨率缩放倍率, 3)
    歌曲封面.置透明度 (主封面透明度)
    歌曲封面.显示区域 (100 × 分辨率缩放倍率, 100 × 分辨率缩放倍率, (100 ＋ 封面偏移) × 分辨率缩放倍率, 400 × 分辨率缩放倍率)

.如果结束
播放_标题文字.显示 (文字1, 100 × 分辨率缩放倍率, MP3名称)
播放_歌手.显示 (文字2, 136 × 分辨率缩放倍率, SONG名称)


画方块 (100 × 分辨率缩放倍率, 450 × 分辨率缩放倍率, 分辨率.窗口宽度 － 100 × 分辨率缩放倍率, 460 × 分辨率缩放倍率, ARGB (50, 255, 255, 255))
时间百分比 ＝ MP3进度 ÷ BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetLength (播放句柄, 0)) × 100
方块百分比 ＝ 方块百分比 ＋ ((分辨率.窗口宽度 － 200 × 分辨率缩放倍率) ÷ 100 × 时间百分比 － 方块百分比) × 0.2
画方块 (100 × 分辨率缩放倍率, 450 × 分辨率缩放倍率, 100 × 分辨率缩放倍率 ＋ 方块百分比, 460 × 分辨率缩放倍率, ARGB (100, 255, 255, 255))
播放模式粒子.启动到 (100 ＋ 方块百分比 ÷ 分辨率缩放倍率, 455)
播放模式粒子.显示 ()

播放_歌手.显示 (100 × 分辨率缩放倍率, 465 × 分辨率缩放倍率, 当前播放时间)
歌曲最大长度 ＝ 进度转时间无毫秒 (取整 (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetLength (播放句柄, 0))))
播放_歌手.显示 (分辨率.窗口宽度 － 100 × 分辨率缩放倍率 － 播放_歌手.取宽度 (歌曲最大长度), 465 × 分辨率缩放倍率, 歌曲最大长度)

.子程序 UI显示背景

背景.显示区域 (0, 0, 分辨率.窗口宽度, 分辨率.窗口高度)

.子程序 显示封面
.局部变量 X偏移, 小数型
.局部变量 Y偏移, 小数型
.局部变量 封面偏移设定x, 整数型
.局部变量 封面偏移设定y, 整数型
.局部变量 缩放倍率, 小数型, 静态

封面偏移设定x ＝ 20
封面偏移设定y ＝ 20


X偏移 ＝ (鼠标坐标.x － 分辨率.窗口宽度 ÷ 2) × 封面偏移设定x × 分辨率缩放倍率 ÷ (分辨率.窗口宽度 ÷ 2)
Y偏移 ＝ (鼠标坐标.y － 分辨率.窗口高度 ÷ 2) × 封面偏移设定y × 分辨率缩放倍率 ÷ (分辨率.窗口高度 ÷ 2)
.如果真 (X偏移 ≥ 封面偏移设定x × 分辨率缩放倍率)
    X偏移 ＝ 封面偏移设定x × 分辨率缩放倍率
.如果真结束
.如果真 (X偏移 ≤ －封面偏移设定x × 分辨率缩放倍率)
    X偏移 ＝ －封面偏移设定x × 分辨率缩放倍率
.如果真结束
.如果真 (Y偏移 ≥ 封面偏移设定y × 分辨率缩放倍率)
    Y偏移 ＝ 封面偏移设定y × 分辨率缩放倍率
.如果真结束
.如果真 (Y偏移 ≤ －封面偏移设定y × 分辨率缩放倍率)
    Y偏移 ＝ －封面偏移设定y × 分辨率缩放倍率
.如果真结束





LOGO偏移X ＝ X偏移 × 0.3
LOGO偏移Y ＝ Y偏移 × 0.3
.如果 (有封面 ＝ 假)
    .如果 (封面透明度 － 帧率数据处理 (2) ≤ 0)
        封面透明度 ＝ 0
    .否则
        封面透明度 ＝ 封面透明度 － 帧率数据处理 (2)
    .如果结束

.否则
    .如果 (当前歌曲封面 ≠ 歌曲封面)
        .如果 (封面透明度 ≠ 0)
            .如果 (封面透明度 － 帧率数据处理 (2) ≤ 0)
                封面透明度 ＝ 0
            .否则
                封面透明度 ＝ 封面透明度 － 帧率数据处理 (2)
            .如果结束

        .否则
            引擎.销毁图片 (当前歌曲封面)
            当前歌曲封面 ＝ 歌曲封面
            歌曲封面精灵.置纹理 (当前歌曲封面)
            歌曲封面精灵.置渲染区域 (0, 0, 引擎.取图片宽 (当前歌曲封面), 引擎.取图片高 (当前歌曲封面))
            .如果 (引擎.取图片宽 (当前歌曲封面) ÷ 引擎.取图片高 (当前歌曲封面) ＜ 分辨率.窗口宽度 ÷ 分辨率.窗口高度)
                缩放倍率 ＝ (分辨率.窗口宽度 ＋ 40 × 分辨率缩放倍率) ÷ 引擎.取图片宽 (当前歌曲封面)
            .否则
                缩放倍率 ＝ (分辨率.窗口高度 ＋ 40 × 分辨率缩放倍率) ÷ 引擎.取图片高 (当前歌曲封面)
            .如果结束
            游戏模式背景缩放倍率 ＝ 缩放倍率
        .如果结束

    .否则
        .判断开始 (当前窗口 ＝ “Setting”)
            .如果 (封面透明度 ＋ 帧率数据处理 (5) ≥ 100)
                封面透明度 ＝ 100
            .否则
                封面透明度 ＝ 封面透明度 ＋ 帧率数据处理 (5)
            .如果结束

        .默认
            .如果 (封面透明度 ＋ 帧率数据处理 (5) ≥ 150)
                封面透明度 ＝ 150
            .否则
                封面透明度 ＝ 封面透明度 ＋ 帧率数据处理 (5)
            .如果结束

        .判断结束

    .如果结束

.如果结束
歌曲封面精灵.置透明度 (封面透明度)

.如果真 (封面透明度 ≠ 0)
    歌曲封面精灵.置中心 (歌曲封面精灵.取宽度 () ÷ 2, 歌曲封面精灵.取高度 () ÷ 2)
    歌曲封面精灵.显示高级 (分辨率.窗口宽度 ÷ 2 － X偏移, 分辨率.窗口高度 ÷ 2 － Y偏移, 0, 缩放倍率, 缩放倍率)
    ' 歌曲封面精灵.显示区域 (0 － 封面偏移设定x × 分辨率缩放倍率 － X偏移, 0 － 封面偏移设定y × 分辨率缩放倍率 － Y偏移, 分辨率.窗口宽度 ＋ 封面偏移设定x × 分辨率缩放倍率 － X偏移, 分辨率.窗口高度 ＋ 封面偏移设定y × 分辨率缩放倍率 － Y偏移)
.如果真结束



.子程序 选歌列表渲染
.局部变量 n, 整数型


.如果 (选歌列表开关 ＝ 真)
    .如果真 (音乐列表选择项 ＞ 0 且 选歌列表滑块.滑块检测点 (鼠标坐标.x, 鼠标坐标.y) ＝ 假)
        引擎.画实心矩形 (0, 80 × 分辨率缩放倍率 ＋ 30 × (音乐列表选择项 － 1) × 分辨率缩放倍率 ＋ 选歌列表偏移, 分辨率.窗口宽度, 80 × 分辨率缩放倍率 ＋ 30 × 音乐列表选择项 × 分辨率缩放倍率 ＋ 选歌列表偏移, ARGB (50, 255, 255, 255))
    .如果真结束
    .如果真 (欢迎音乐 ＝ 真 且 100 × 分辨率缩放倍率 ＋ 30 × (取当前播放音乐 () － 1) × 分辨率缩放倍率 ＋ 选歌列表偏移 ＜ 分辨率.窗口高度)
        引擎.画实心矩形 (0, 80 × 分辨率缩放倍率 ＋ 30 × (取当前播放音乐 () － 1) × 分辨率缩放倍率 ＋ 选歌列表偏移, 分辨率.窗口宽度, 80 × 分辨率缩放倍率 ＋ 30 × 取当前播放音乐 () × 分辨率缩放倍率 ＋ 选歌列表偏移, ARGB (100, 80, 110, 160))


    .如果真结束

    .计次循环首 (取数组成员数 (音乐列表), n)
        .如果 (80 × 分辨率缩放倍率 ＋ 30 × (n － 1) × 分辨率缩放倍率 ＋ 选歌列表偏移 ＜ 分辨率.窗口高度)
            选歌列表文字.显示 (50 × 分辨率缩放倍率, 80 × 分辨率缩放倍率 ＋ 30 × (n － 1) × 分辨率缩放倍率 ＋ 选歌列表偏移, 音乐列表 [n].歌曲名称)
        .否则

        .如果结束

    .计次循环尾 ()
    .如果真 (取数组成员数 (音乐列表) ＞ (分辨率.窗口高度 － 80 × 分辨率缩放倍率) ÷ (30 × 分辨率缩放倍率))
        选歌列表滑块.显示 ()
    .如果真结束

    渲染区半透明开关 ＝ 真
.否则
    渲染区半透明开关 ＝ 假
.如果结束




.子程序 选歌列表渲染无渲染区

.如果 (选歌列表开关 ＝ 真)
    选歌列表标题文字.显示 (20 × 分辨率缩放倍率, 20 × 分辨率缩放倍率, “选择你喜爱的音乐”)
    单曲循环选择框.显示 ()
    选歌列表文字.显示 (分辨率.窗口宽度 － 160 × 分辨率缩放倍率, 25 × 分辨率缩放倍率, “单曲循环”)
    鼠标显示 ()

.否则

.如果结束


.子程序 设定UI按钮透明度
.参数 透明度, 整数型


信息精灵.精灵.置透明度 (透明度)
菜单按钮.精灵.置透明度 (透明度)
暂停按钮.精灵.置透明度 (透明度)
设置按钮.精灵.置透明度 (透明度)
播放按钮.精灵.置透明度 (透明度)
上一曲按钮.精灵.置透明度 (透明度)
下一曲按钮.精灵.置透明度 (透明度)





.子程序 去多余鼓面判断
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 临时水波, 水波

太鼓移动坐标 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60 × (－BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)) － OFFSET)


.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ＋ 220 ≤ 220)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “弹”)
                    太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                .否则

                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束

    .计次循环尾 ()

.计次循环尾 ()


.子程序 星星渲染
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (星星), n)
    星星精灵.置透明度 (星星 [n].透明度)
    星星精灵.显示高级 (星星 [n].X － LOGO偏移X, 星星 [n].Y － LOGO偏移Y, 星星 [n].旋转度, 0.3 × 分辨率缩放倍率, 0.3 × 分辨率缩放倍率)

.计次循环尾 ()

.子程序 水波渲染
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (水波数据), n)
    水波.置透明度 (水波数据 [n].透明度)
    水波.显示高级 (水波数据 [n].坐标 － LOGO偏移X, 分辨率.窗口高度 ÷ 2 － 50 × 分辨率缩放倍率 － LOGO偏移Y, 0, 水波数据 [n].缩放 ÷ 1000 × 分辨率缩放倍率, 水波数据 [n].缩放 ÷ 1000 × 分辨率缩放倍率)
.计次循环尾 ()

.子程序 星星逻辑, , , 背景星星的逻辑
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (星星), n)
    .如果 (星星 [n].渐隐 ＝ 假)
        .如果 (星星 [n].透明度 ＋ 帧率数据处理 (星星 [n].速度) ≥ 255)
            星星 [n].渐隐 ＝ 真
        .否则
            星星 [n].透明度 ＝ 星星 [n].透明度 ＋ 帧率数据处理 (星星 [n].速度)
        .如果结束

    .否则
        .如果 (星星 [n].透明度 － 帧率数据处理 (星星 [n].速度) ≤ 0)
            星星 [n].透明度 ＝ 0
        .否则
            星星 [n].透明度 ＝ 星星 [n].透明度 － 帧率数据处理 (星星 [n].速度)
        .如果结束

    .如果结束
    .如果 (星星 [n].左右 ＝ 1)
        星星 [n].旋转度 ＝ 星星 [n].旋转度 － 帧率数据处理 (星星 [n].速度 ÷ 100)
    .否则
        星星 [n].旋转度 ＝ 星星 [n].旋转度 ＋ 帧率数据处理 (星星 [n].速度 ÷ 100)
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (星星), n)
    .如果 (n ≥ 取数组成员数 (星星))

    .否则
        .如果 (星星 [n].透明度 ＝ 0)
            删除成员 (星星, n, 1)
        .否则

        .如果结束

    .如果结束

.计次循环尾 ()

.子程序 加入星星
.参数 个数, 整数型
.局部变量 临时星星, 星星

.计次循环首 (个数, )
    临时星星.X ＝ 取随机数 (-10, 分辨率.窗口宽度)
    临时星星.Y ＝ 取随机数 (-10, 分辨率.窗口高度)
    临时星星.渐隐 ＝ 假
    临时星星.透明度 ＝ 0
    临时星星.旋转度 ＝ 0
    临时星星.速度 ＝ 取随机数 (3, 6)
    临时星星.左右 ＝ 取随机数 (1, 2)
    加入成员 (星星, 临时星星)
.计次循环尾 ()

.子程序 闪烁动画

.如果 (闪烁左透明度 － 帧率数据处理 (10) ≤ 0)
    闪烁左透明度 ＝ 0
.否则
    闪烁左透明度 ＝ 闪烁左透明度 － 帧率数据处理 (2)
.如果结束
.如果 (闪烁右透明度 － 帧率数据处理 (10) ≤ 0)
    闪烁右透明度 ＝ 0
.否则
    闪烁右透明度 ＝ 闪烁右透明度 － 帧率数据处理 (2)
.如果结束
闪烁左.置透明度 (闪烁左透明度)
闪烁右.置透明度 (闪烁右透明度)
闪烁左.显示区域 (0, 0, 200 × 分辨率缩放倍率, 分辨率.窗口高度)
闪烁右.显示区域 (分辨率.窗口宽度 － 350 × 分辨率缩放倍率, 0, 分辨率.窗口宽度, 分辨率.窗口高度)

.子程序 按钮渲染

.如果 (按钮透明度 ＝ 0 或 播放器模式 ＝ 真)

.否则
    开始按钮.显示高级 (按钮1X坐标 － LOGO偏移X, 分辨率.窗口高度 ÷ 2 － 150 × 分辨率缩放倍率 － LOGO偏移Y, 0, 分辨率缩放倍率 ÷ 4, 分辨率缩放倍率 ÷ 4)
    退出按钮.显示高级 (按钮2X坐标 － LOGO偏移X, 分辨率.窗口高度 ÷ 2 － 50 × 分辨率缩放倍率 － LOGO偏移Y, 0, 分辨率缩放倍率 ÷ 4, 分辨率缩放倍率 ÷ 4)
.如果结束

菜单按钮.精灵.显示高级 (分辨率.窗口宽度 － 40 × 分辨率缩放倍率, 20 × 分辨率缩放倍率, 0, 菜单按钮.缩放 ÷ 1000 × 分辨率缩放倍率, 菜单按钮.缩放 ÷ 1000 × 分辨率缩放倍率)
设置按钮.精灵.显示高级 (分辨率.窗口宽度 － 30 × 分辨率缩放倍率, 分辨率.窗口高度 － 30 × 分辨率缩放倍率, 0, 设置按钮.缩放 ÷ 1000 × 分辨率缩放倍率, 设置按钮.缩放 ÷ 1000 × 分辨率缩放倍率)

暂停按钮.精灵.显示高级 (分辨率.窗口宽度 － 70 × 分辨率缩放倍率, 24 × 分辨率缩放倍率, 0, 暂停按钮.缩放 ÷ 1000 × 分辨率缩放倍率, 暂停按钮.缩放 ÷ 1000 × 分辨率缩放倍率)
播放按钮.精灵.显示高级 (分辨率.窗口宽度 － 90 × 分辨率缩放倍率, 24 × 分辨率缩放倍率, 0, 播放按钮.缩放 ÷ 1000 × 0.5 × 分辨率缩放倍率, 播放按钮.缩放 ÷ 1000 × 0.5 × 分辨率缩放倍率)
下一曲按钮.精灵.显示高级 (分辨率.窗口宽度 － 110 × 分辨率缩放倍率, 24 × 分辨率缩放倍率, 0, 下一曲按钮.缩放 ÷ 1000 × 0.5 × 分辨率缩放倍率, 下一曲按钮.缩放 ÷ 1000 × 0.5 × 分辨率缩放倍率)
上一曲按钮.精灵.显示高级 (分辨率.窗口宽度 － 130 × 分辨率缩放倍率, 24 × 分辨率缩放倍率, 0, 上一曲按钮.缩放 ÷ 1000 × 0.5 × 分辨率缩放倍率, 上一曲按钮.缩放 ÷ 1000 × 0.5 × 分辨率缩放倍率)

.子程序 退出程序, 文本型

.如果真 (是否已创建 (窗口2) ＝ 真)
    窗口2.销毁 ()
.如果真结束

返回 (“true”)

.子程序 退出

结束 ()

.子程序 关于渲染

.如果真 (播放器模式 ＝ 假)
    信息精灵.精灵.显示高级 (0, 分辨率.窗口高度, 0, 信息精灵.缩放 ÷ 1000 × 分辨率缩放倍率, 信息精灵.缩放 ÷ 1000 × 分辨率缩放倍率)
.如果真结束





.子程序 UI音乐初始化
.参数 音乐名称, 文本型
.参数 谱面名称, 文本型, 可空
.局部变量 分割文本, 文本型, , "0"
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 完成文本, 文本型
.局部变量 普面信息, 文本型
.局部变量 普面起始位置, 整数型
.局部变量 普面终止位置, 整数型
.局部变量 共计行数, 整数型
.局部变量 普面分析1, 文本型, , "0"
.局部变量 总坐标, 小数型
.局部变量 临时太鼓坐标, 太鼓坐标
.局部变量 延迟播放, 小数型
.局部变量 文本替换, 文本型
.局部变量 连打判断, 整数型, 静态
.局部变量 连打类型, 整数型, 静态
.局部变量 N3, 整数型
.局部变量 逗号判断, 逻辑型
.局部变量 临时合成, 文本型
.局部变量 i, 整数型
.局部变量 拍数分割, 文本型, , "0"
.局部变量 临时坐标鼓, 坐标鼓
.局部变量 临时BPM, 小数型
.局部变量 卷轴速度, 小数型
.局部变量 计数, 整数型
.局部变量 临时高潮开关, 逻辑型
.局部变量 是否计数, 逻辑型
.局部变量 普面移动倍数, 小数型
.局部变量 去参数长度, 文本型

' 初始化
重定义数组 (太鼓X坐标, 假, 0)
普面移动倍数 ＝ 1
高潮开关 ＝ 0
音乐拍长度 ＝ 100
.如果 (是否为空 (谱面名称))
    音乐信息 ＝ 音乐名称
.否则
    音乐信息 ＝ 到文本 (读入文件 (取运行目录 () ＋ “\Songs\” ＋ 音乐名称 ＋ “\” ＋ 谱面名称))
.如果结束

' 截取铺面信息
分割文本 ＝ 分割文本 (音乐信息, #换行符, )
普面起始位置 ＝ 寻找文本 (音乐信息, “#START”, , 假) ＋ 7
普面终止位置 ＝ 寻找文本 (音乐信息, “#END”, , 假) ＋ 4
共计行数 ＝ 普面终止位置 － 普面起始位置
普面信息 ＝ 普面信息 ＋ 取文本中间 (音乐信息, 普面起始位置, 共计行数) ＋ #换行符
普面信息 ＝ 删全部空 (普面信息)
普面分析1 ＝ 分割文本 (普面信息, #换行符, )
' 分析铺面信息
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “WAVE:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “WAVE:”, , , , 真)

        音效 [3].句柄 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\” ＋ 完成文本, 0, 0, 40000)
        加入控制台文本 (“音乐读入，句柄：” ＋ 到文本 (音效 [3].句柄))
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “BPM:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “BPM:”, , , , 真)
        音乐BPM ＝ 到小数 (完成文本)
        临时BPM ＝ 到小数 (完成文本)
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “COURSE:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “COURSE:”, , , , 真)
        .如果 (到整数 (完成文本) ≤ 4)
            谱面难度 ＝ 到整数 (完成文本)
        .否则
            谱面难度 ＝ 4
        .如果结束
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()


' 分析铺面

太鼓移动坐标 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60 × 4
.计次循环首 (取数组成员数 (普面分析1), n)
    .如果 (普面分析1 [n] ＝ “”)

    .否则
        临时太鼓坐标.动态BPM ＝ 临时BPM
        临时太鼓坐标.拍数 ＝ 音乐拍长度
        临时太鼓坐标.调试信息 ＝ 普面分析1 [n]
        临时太鼓坐标.卷轴速度 ＝ 卷轴速度
        插入成员 (太鼓X坐标, 1, 临时太鼓坐标)
        ' 下面是先寻找参数，读取出高潮，段数，节拍，延长

        .判断开始 (寻找文本 (到大写 (普面分析1 [n]), “#GOGOSTART”, , 假) ≠ -1)
            临时合成 ＝ 临时合成 ＋ “S”
        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#GOGOEND”, , 假) ≠ -1)
            临时合成 ＝ 临时合成 ＋ “E”
        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#MEASURE”, , 假) ≠ -1)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#MEASURE”, , , , 真)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
            拍数分割 ＝ 分割文本 (普面分析1 [n], “/”, )
            .如果 (取数组成员数 (拍数分割) ＜ 2)

            .否则
                普面移动倍数 ＝ 到小数 (拍数分割 [1]) ÷ 到小数 (拍数分割 [2])
            .如果结束

        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#DELAY”, , 假) ≠ -1)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#DELAY”, , , , 真)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
            总坐标 ＝ 总坐标 ＋ 到小数 (普面分析1 [n]) × 音乐拍长度 × 4 × 临时BPM ÷ 60

        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#SCROLL”, , 假) ≠ -1)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#SCROLL”, , , , 真)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
            卷轴速度 ＝ 到小数 (普面分析1 [n])
        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#BPMCHANGE”, , 假) ≠ -1)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#BPMCHANGE”, , , , 真)
            临时BPM ＝ 到小数 (普面分析1 [n])

        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#END”, , 假) ≠ -1)

        .判断 (取文本左边 (普面分析1 [n], 1) ＝ “#”)

        .默认
            ' 这里开始时读取谱面了
            .如果 (取文本中间 (普面分析1 [n], 取文本长度 (普面分析1 [n]), 1) ＝ “,”)  ' 因为TJA格式以逗号分一段，因此读取时需要判断一下，当没有分号时要合并一下。
                普面分析1 [n] ＝ 临时合成 ＋ 普面分析1 [n]
                去参数长度 ＝ 子文本替换 (普面分析1 [n], “S”, , , , 假)
                去参数长度 ＝ 子文本替换 (去参数长度, “E”, , , , 假)
                普面分析1 [n] ＝ 子文本替换 (普面分析1 [n], “ ”, , , , 真)
                临时合成 ＝ “”
                .计次循环首 (取文本长度 (普面分析1 [n]) ＋ 1, n2)
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “S”)
                        Debug ＝ Debug ＋ “S”
                        临时坐标鼓.坐标 ＝ 总坐标
                        临时坐标鼓.类型 ＝ “高潮”
                        加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                        加入控制台文本 (“创建高潮时间：” ＋ 到文本 (临时坐标鼓.坐标))
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “E”)
                        Debug ＝ Debug ＋ “S”
                        临时坐标鼓.坐标 ＝ 总坐标
                        临时坐标鼓.类型 ＝ “高潮关”
                        加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                        加入控制台文本 (“创建关闭高潮时间：” ＋ 到文本 (临时坐标鼓.坐标))
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “0”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “1”)
                        临时坐标鼓.坐标 ＝ 总坐标
                        临时坐标鼓.类型 ＝ “弹”
                        加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “2”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “3”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “4”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “5”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “6”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “7”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “8”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束






                .计次循环尾 ()
            .否则
                临时合成 ＝ 临时合成 ＋ 普面分析1 [n]
            .如果结束

        .判断结束

    .如果结束




.计次循环尾 ()
.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        太鼓X坐标 [n].坐标鼓 [n2].原坐标 ＝ 太鼓X坐标 [n].坐标鼓 [n2].坐标
    .计次循环尾 ()
.计次循环尾 ()








.子程序 高潮逻辑
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 开关判断, 整数型, 静态
.局部变量 记录点, 小数型
.局部变量 记录类型, 文本型
.局部变量 最后开关, 整数型
.局部变量 临时水波, 水波
.局部变量 n3, 整数型
.局部变量 重复水波, 逻辑型

太鼓移动坐标 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60 × (－BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)) － OFFSET)
记录类型 ＝ “”
.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ＋ 220 ≤ 222)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＞ 记录点)
                .如果真 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “高潮关” 或 太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “高潮”)
                    记录点 ＝ 太鼓X坐标 [n].坐标鼓 [n2].坐标
                    记录类型 ＝ 太鼓X坐标 [n].坐标鼓 [n2].类型
                .如果真结束

            .否则

            .如果结束

        .否则

        .如果结束

    .计次循环尾 ()
.计次循环尾 ()

.如果 (记录类型 ＝ “高潮关” 或 记录类型 ＝ “”)
    高潮开关 ＝ 0
.否则

.如果结束
.如果 (记录类型 ＝ “高潮” 且 高潮开关 ＝ 0)
    高潮开关 ＝ 1
    启动UI粒子 ()
.否则

.如果结束

.如果真 (播放器模式 ＝ 假)
    .计次循环首 (取数组成员数 (太鼓X坐标), n)
        .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ＋ 220 ≤ 220)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                    .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “弹”)
                        残影透明度 ＝ 50
                        logo缩放 ＝ 1100
                        残影缩放 ＝ 1100
                        .计次循环首 (取数组成员数 (水波数据), n3)
                            .如果真 (水波数据 [n3].缩放 ＝ 1000)
                                重复水波 ＝ 真
                            .如果真结束

                        .计次循环尾 ()
                        .如果 (重复水波 ＝ 真)
                            重复水波 ＝ 假
                        .否则
                            临时水波.缩放 ＝ 1000
                            临时水波.坐标 ＝ 弹跳X坐标
                            临时水波.透明度 ＝ 70
                            加入成员 (水波数据, 临时水波)
                        .如果结束

                        .如果真 (判断是否进入区域 (弹跳X坐标 － 200 × 分辨率缩放倍率, 弹跳X坐标 ＋ 200 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 250 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 ＋ 200 × 分辨率缩放倍率) ＝ 真 且 选歌列表开关 ＝ 假)
                            BASS_ChannelPlay (LOGO节奏音效, 真)
                        .如果真结束
                        太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                    .否则

                    .如果结束

                .否则

                .如果结束

            .否则

            .如果结束

        .计次循环尾 ()

    .计次循环尾 ()

.如果真结束


.子程序 绘制频谱
.局部变量 i, 整数型
.局部变量 X, 整数型
.局部变量 Y, 整数型
.局部变量 dc1, 整数型
.局部变量 dc2, 整数型
.局部变量 n, 整数型

i ＝ 1
X ＝ 1
频谱总量 ＝ 0
.计次循环首 (取数组成员数 (data), n)
    Y ＝ data [n]
    频谱总量 ＝ 频谱总量 ＋ Y
    .如果 ((n － 1) × 10 × 分辨率缩放倍率 ＞ 分辨率.窗口宽度)

    .否则
        画方块 ((n － 1) × 10 × 分辨率缩放倍率, 分辨率.窗口高度 － Y × 分辨率缩放倍率, (10 × (n － 1) ＋ 5) × 分辨率缩放倍率, 分辨率.窗口高度, ARGB (150, 35, 165, 216))
    .如果结束

.计次循环尾 ()

