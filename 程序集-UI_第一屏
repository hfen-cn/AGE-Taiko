.版本 2
.支持库 spec

.程序集 UI_第一屏
.程序集变量 粒子精灵, Age_精灵
.程序集变量 弹跳图标, Age_精灵
.程序集变量 文字, Age_文字
.程序集变量 歌曲名称, Age_文字
.程序集变量 歌手名称, Age_文字
.程序集变量 粒子2, Age_粒子
.程序集变量 粒子3, Age_粒子
.程序集变量 残影, Age_精灵
.程序集变量 图标计时, 小数型
.程序集变量 开始按钮, Age_精灵
.程序集变量 退出按钮, Age_精灵
.程序集变量 按钮透明度, 整数型
.程序集变量 按钮1X坐标, 整数型
.程序集变量 按钮2X坐标, 整数型
.程序集变量 背景, Age_精灵
.程序集变量 背景X缩放, 整数型
.程序集变量 背景Y缩放, 整数型
.程序集变量 闪烁左, Age_精灵
.程序集变量 闪烁右, Age_精灵
.程序集变量 残影差值, 整数型
.程序集变量 残影加速度, 整数型
.程序集变量 残影速度, 小数型
.程序集变量 残影高度变量, 整数型
.程序集变量 残影宽度变量, 整数型
.程序集变量 坐标差值, 整数型
.程序集变量 弹跳X坐标, 整数型
.程序集变量 logo显示位置, 整数型
.程序集变量 星星, 星星, , "0", 背景的星星
.程序集变量 星星精灵, Age_精灵
.程序集变量 粒子计数, 双精度小数型
.程序集变量 信息精灵, 缩放按钮类
.程序集变量 菜单按钮, 缩放按钮类
.程序集变量 暂停按钮, 缩放按钮类
.程序集变量 设置按钮, 缩放按钮类
.程序集变量 太鼓X坐标, 太鼓坐标, , "0"
.程序集变量 太鼓移动坐标, 整数型

.子程序 UI初始化
.局部变量 纹理

logo缩放 ＝ 1160
残影缩放 ＝ 1000
LOGOX ＝ 250
LOGOY ＝ 110
弹跳X坐标 ＝ 分辨率.logo位置
引擎.读zip (取运行目录 () ＋ “\UI.pak”, “”)  ' 读取资源


' 按钮初始化
' 菜单按钮.缩放 ＝ 800
' 暂停按钮.缩放 ＝ 800
信息精灵.缩放 ＝ 600
' 创建精灵
按钮声音1.句柄 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\menuclick.wav”, 0, 0, 40000)
按钮声音2.句柄 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\menuhit.wav”, 0, 0, 40000)
返回音效 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\menuback.wav”, 0, 0, 40000)
纹理 ＝ 引擎.读纹理 (“back.jpg”)
背景.创建 (纹理, 0, 0, , )
粒子精灵.创建 (引擎.读纹理 (“starblur.png”), 0, 0, 52, 50)
星星精灵.创建 (引擎.读纹理 (“starblur.png”), 0, 0, 52, 50)
星星精灵.置中心 (星星精灵.取宽度 () ÷ 2, 星星精灵.取高度 () ÷ 2)
粒子精灵.置中心 (26, 25)
粒子2.创建 (取运行目录 () ＋ “\psi\gogostarts.psi”, 粒子精灵)
粒子3.创建 (取运行目录 () ＋ “\psi\gogostart.psi”, 粒子精灵)
弹跳图标.创建 (引擎.读纹理 (“Logo.png”), 0, 0, 400, 400)
残影.创建 (引擎.读纹理 (“Logo.png”), 0, 0, 400, 400)
闪烁左.创建 (引擎.读纹理 (“left.png”), 0, 0, 200, 600)
闪烁右.创建 (引擎.读纹理 (“right.png”), 0, 0, 200, 600)
开始按钮.创建 (引擎.读纹理 (“play.png”))
退出按钮.创建 (引擎.读纹理 (“exit.png”))
信息精灵.精灵.创建 (引擎.读纹理 (“About.png”))
菜单按钮.精灵.创建 (引擎.读纹理 (“list.png”))
暂停按钮.精灵.创建 (引擎.读纹理 (“Pause.png”))
设置按钮.精灵.创建 (引擎.读纹理 (“Confi.png”))
' 设定按钮初始位置
按钮1X坐标 ＝ 360
按钮2X坐标 ＝ 360
' 创建文字
文字.创建 (“黑体”, 12 × 分辨率缩放倍率, 假, 假, 真, #颜色_白)
歌手名称.创建 (“黑体”, 12 × 分辨率缩放倍率, 假, 真, 假, #颜色_白)
歌曲名称.创建 (“黑体”, 12 × 分辨率缩放倍率, 假, 真, 假, #颜色_白)
弹跳图标.置中心 (弹跳图标.取宽度 () ÷ 2, 弹跳图标.取高度 () ÷ 2)
暂停按钮.精灵.置中心 (暂停按钮.精灵.取宽度 () ÷ 2, 暂停按钮.精灵.取高度 () ÷ 2)
菜单按钮.精灵.置中心 (菜单按钮.精灵.取宽度 () ÷ 2, 菜单按钮.精灵.取高度 () ÷ 2)
设置按钮.精灵.置中心 (设置按钮.精灵.取宽度 () ÷ 2, 设置按钮.精灵.取高度 () ÷ 2)
残影.置中心 (残影.取宽度 () ÷ 2, 残影.取高度 () ÷ 2)
信息精灵.精灵.置中心 (0, 200)
' 设定混合模式
背景.置混合模式 (#混合_默认)
粒子精灵.置混合模式 (#混合_默认)
弹跳图标.置混合模式 (#混合_默认)
残影.置混合模式 (#混合_默认)
闪烁左.置混合模式 (#混合_Add2X)
闪烁右.置混合模式 (#混合_Add2X)
开始按钮.置混合模式 (#混合_默认)
退出按钮.置混合模式 (#混合_默认)
暂停按钮.精灵.置混合模式 (#混合_默认)
菜单按钮.精灵.置混合模式 (#混合_默认)
设置按钮.精灵.置混合模式 (#混合_默认)


.子程序 LOGO计时
.局部变量 计时, 整数型
.局部变量 计数, 整数型, 静态
.局部变量 暂停计时, 小数型, 静态
.局部变量 闪烁计数, 整数型, 静态


.如果 (BASS_ChannelIsActive (播放句柄) ＝ 1)
    计时 ＝ (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)) ＋ OFFSET) × 1000 ÷ (60000 ÷ MP3的BPM)
    .如果 (计数 ＝ 计时)

    .否则
        .如果 (当前窗口 ＝ “UI”)

            logo缩放 ＝ 1100
            残影缩放 ＝ 1100
            加入星星 (音乐BPM ÷ 10)
            残影透明度 ＝ 50
            .如果真 (高潮开关 ＝ 1)
                LOGO亮透明度 ＝ 50
                震荡一下 ()
            .如果真结束
            .如果 (高潮开关 ＝ 1)
                .如果 (左右变量 ＝ “右”)
                    左右变量 ＝ “左”
                .否则
                    左右变量 ＝ “右”
                .如果结束
                .如果 (左右变量 ＝ “右”)
                    闪烁右透明度 ＝ 100
                .否则

                .如果结束
                .如果 (左右变量 ＝ “左”)
                    闪烁左透明度 ＝ 100
                .否则

                .如果结束

            .否则

            .如果结束





        .否则

        .如果结束
        计数 ＝ 计时
    .如果结束
    计时 ＝ (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)) ＋ OFFSET) × 1000 ÷ 4 ÷ (60000 ÷ MP3的BPM)
    .如果 (闪烁计数 ＝ 计时)

    .否则
        .如果 (高潮开关 ＝ 0)
            闪烁右透明度 ＝ 100
            闪烁左透明度 ＝ 100
        .否则

        .如果结束
        闪烁计数 ＝ 计时
    .如果结束



.否则
    .如果 (暂停计时 ≥ 60000 ÷ 30)
        .如果 (当前窗口 ＝ “UI”)
            logo缩放 ＝ 1050
            残影缩放 ＝ 1050
            加入星星 (音乐BPM ÷ 10)
            .如果真 (高潮开关 ＝ 1)
                LOGO亮透明度 ＝ 50
            .如果真结束
            残影透明度 ＝ 60
        .否则

        .如果结束
        暂停计时 ＝ 0
    .否则
        暂停计时 ＝ 暂停计时 ＋ 引擎.取最后帧时间 () × 1000
    .如果结束

.如果结束


.子程序 按钮逻辑
.局部变量 判断进入, 整数型, 静态
.局部变量 按钮1, 加速度差值
.局部变量 按钮2, 加速度差值

.如果 (logo显示位置 ＝ 1)
    .如果 (按钮透明度 ＋ 帧率数据处理 (10) ≥ 255)
        按钮透明度 ＝ 255
    .否则
        按钮透明度 ＝ 按钮透明度 ＋ 帧率数据处理 (10)
    .如果结束

.否则
.如果结束
.如果 (logo显示位置 ＝ 0)
    .如果 (按钮透明度 － 帧率数据处理 (10) ≤ 0)
        按钮透明度 ＝ 0
    .否则
        按钮透明度 ＝ 按钮透明度 － 帧率数据处理 (10)
    .如果结束
    判断进入 ＝ 0
.否则

.如果结束
开始按钮.置透明度 (按钮透明度)
退出按钮.置透明度 (按钮透明度)

.如果 (logo显示位置 ＝ 1)
    .如果 (判断是否进入区域 (分辨率.窗口宽度 ÷ 2 ＋ 40 × 分辨率缩放倍率, 分辨率.窗口宽度 ÷ 2 ＋ 310 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 150 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 50 × 分辨率缩放倍率) ＝ 真)
        .如果 (判断进入 ＝ 1)
            .如果真 (引擎.键_取按下 (#鼠标左键))
                播放音乐 (按钮声音2.句柄)
                BASS_ChannelPause (播放句柄)
                遮罩切换 (“太鼓游戏”, 10, &音乐初始化)
                遮罩切换 (“太鼓游戏”, 10, &新音乐初始化)
                图标计时 ＝ 0
            .如果真结束

        .否则

            播放音乐 (按钮声音1.句柄)
            判断进入 ＝ 1
            图标计时 ＝ 0
        .如果结束

    .否则

        .如果 (判断是否进入区域 (分辨率.窗口宽度 ÷ 2 ＋ 40 × 分辨率缩放倍率, 分辨率.窗口宽度 ÷ 2 ＋ 310 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 30 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 ＋ 50 × 分辨率缩放倍率) ＝ 真)
            .如果真 (鼠标坐标.x ≥ 分辨率.logo位置 ＋ 30)
                .如果 (判断进入 ＝ 2)
                    .如果真 (引擎.键_取按下 (#鼠标左键))
                        播放音乐 (按钮声音2.句柄)
                        BASS_ChannelPause (播放句柄)
                        遮罩切换 (“”, 20, &退出)
                        图标计时 ＝ 0
                    .如果真结束

                .否则

                    播放音乐 (按钮声音1.句柄)
                    判断进入 ＝ 2
                    图标计时 ＝ 0
                .如果结束

            .如果真结束

        .否则
            判断进入 ＝ 0
        .如果结束

    .如果结束





.否则
    判断进入 ＝ 0
.如果结束

.如果 (判断进入 ＝ 1)
    按钮1.差值 ＝ 分辨率.logo位置 ＋ 10 － 按钮1X坐标
    按钮1.加速度 ＝ 按钮1.差值 × 0.7
    按钮1.速度 ＝ 按钮1.速度 ＋ 按钮1.加速度
    按钮1.速度 ＝ 四舍五入 (按钮1.速度 × 0.4, )
    按钮1.速度 ＝ 按钮1.速度
    按钮1X坐标 ＝ 按钮1X坐标 ＋ 帧率数据处理 (按钮1.速度)
.否则
    按钮1.差值 ＝ 分辨率.logo位置 － 40 － 按钮1X坐标
    按钮1.加速度 ＝ 按钮1.差值 × 0.7
    按钮1.速度 ＝ 按钮1.速度 ＋ 按钮1.加速度
    按钮1.速度 ＝ 四舍五入 (按钮1.速度 × 0.4, )
    按钮1.速度 ＝ 按钮1.速度
    按钮1X坐标 ＝ 按钮1X坐标 ＋ 帧率数据处理 (按钮1.速度)

.如果结束
.如果 (判断进入 ＝ 2)
    按钮2.差值 ＝ 分辨率.logo位置 ＋ 10 － 按钮2X坐标
    按钮2.加速度 ＝ 按钮2.差值 × 0.7
    按钮2.速度 ＝ 按钮2.速度 ＋ 按钮2.加速度
    按钮2.速度 ＝ 四舍五入 (按钮2.速度 × 0.4, )
    按钮2X坐标 ＝ 按钮2X坐标 ＋ 帧率数据处理 (按钮2.速度)

.否则
    按钮2.差值 ＝ 分辨率.logo位置 － 40 － 按钮2X坐标
    按钮2.加速度 ＝ 按钮2.差值 × 0.7
    按钮2.速度 ＝ 按钮2.速度 ＋ 按钮2.加速度
    按钮2.速度 ＝ 四舍五入 (按钮2.速度 × 0.4, )
    按钮2X坐标 ＝ 按钮2X坐标 ＋ 帧率数据处理 (按钮2.速度)
.如果结束

.如果 (判断是否进入区域 (分辨率.窗口宽度 － 60 × 分辨率缩放倍率, 分辨率.窗口宽度 － 10 × 分辨率缩放倍率, 0, 50) ＝ 真)

    .如果真 (引擎.键_取弹起 (#鼠标左键))

        .如果 (是否已创建 (窗口1) ＝ 真 且 窗口1.可视 ＝ 真)

        .否则
            窗口1.可视 ＝ 真
        .如果结束

    .如果真结束
    .如果 (引擎.键_取选中 (#鼠标左键))
        菜单按钮.缩放 ＝ 加速度公式 (菜单按钮.缩放, 750, 0.4, 0.3)
    .否则
        菜单按钮.缩放 ＝ 加速度公式 (菜单按钮.缩放, 1000, 0.4, 0.7)
    .如果结束


.否则
    菜单按钮.缩放 ＝ 加速度公式 (菜单按钮.缩放, 700, 0.4, 0.7)
.如果结束

.如果 (判断是否进入区域 (分辨率.窗口宽度 － 60 × 分辨率缩放倍率, 分辨率.窗口宽度 － 10 × 分辨率缩放倍率, 分辨率.窗口高度 － 60 × 分辨率缩放倍率, 分辨率.窗口高度 － 10 × 分辨率缩放倍率) ＝ 真)

    .如果真 (引擎.键_取弹起 (#鼠标左键))
        BASS_ChannelPlay (按钮声音2.句柄, 真)
        遮罩切换_无执行 (“Setting”, 20, 假)
    .如果真结束
    .如果 (引擎.键_取选中 (#鼠标左键))
        设置按钮.缩放 ＝ 加速度公式 (设置按钮.缩放, 750, 0.4, 0.3)
    .否则
        设置按钮.缩放 ＝ 加速度公式 (设置按钮.缩放, 1000, 0.4, 0.7)
    .如果结束


.否则
    设置按钮.缩放 ＝ 加速度公式 (设置按钮.缩放, 700, 0.4, 0.7)
.如果结束

.如果真 (判断是否进入区域 (弹跳X坐标 － 200 × 分辨率缩放倍率, 弹跳X坐标 ＋ 200 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 － 250 × 分辨率缩放倍率, 分辨率.窗口高度 ÷ 2 ＋ 200 × 分辨率缩放倍率) ＝ 真)
    .如果 (引擎.键_取按下 (#鼠标左键))
        图标计时 ＝ 0
        logo显示位置 ＝ 1
        播放音乐 (按钮声音2.句柄)
    .否则

    .如果结束


.如果真结束
.如果 (判断是否进入区域 (分辨率.窗口宽度 － 75 × 分辨率缩放倍率, 分辨率.窗口宽度 － 65 × 分辨率缩放倍率, 15 × 分辨率缩放倍率, 50 × 分辨率缩放倍率) ＝ 真)

    .如果真 (引擎.键_取弹起 (#鼠标左键))
        .如果 (音乐播放判断 ＝ 0)
            暂停BPM ＝ MP3的BPM
            MP3的BPM ＝ 40
            BASS_ChannelPause (播放句柄)
            音乐播放判断 ＝ 1

        .否则
            .如果 (音乐播放判断 ＝ 1)
                MP3的BPM ＝ 暂停BPM
                BASS_ChannelPlay (播放句柄, 假)
                音乐播放判断 ＝ 0

            .否则

            .如果结束

        .如果结束



    .如果真结束
    .如果 (引擎.键_取选中 (#鼠标左键))
        暂停按钮.缩放 ＝ 加速度公式 (暂停按钮.缩放, 450, 0.4, 0.3)
    .否则
        暂停按钮.缩放 ＝ 加速度公式 (暂停按钮.缩放, 600, 0.4, 0.7)
    .如果结束


.否则
    暂停按钮.缩放 ＝ 加速度公式 (暂停按钮.缩放, 400, 0.4, 0.7)
.如果结束
.如果 (判断是否进入区域 (0, 200 × 分辨率缩放倍率, 分辨率.窗口高度 － 100 × 分辨率缩放倍率, 分辨率.窗口高度) ＝ 真)

    .如果真 (引擎.键_取弹起 (#鼠标左键))


    .如果真结束
    .如果 (引擎.键_取选中 (#鼠标左键))
        信息精灵.缩放 ＝ 加速度公式 (信息精灵.缩放, 540, 0.4, 0.7)

    .否则
        信息精灵.缩放 ＝ 加速度公式 (信息精灵.缩放, 600, 0.3, 0.8)
    .如果结束


.否则
    信息精灵.缩放 ＝ 加速度公式 (信息精灵.缩放, 500, 0.4, 0.7)
.如果结束


.子程序 UI逻辑
.局部变量 最后帧时间, 小数型

LOGO计时 ()
LOGO移动 ()
按钮逻辑 ()
星星逻辑 ()
高潮逻辑 ()
读取进度及判断 ()
最后帧时间 ＝ 引擎.取最后帧时间 ()
粒子2.更新 (最后帧时间)
粒子3.更新 (最后帧时间)

.子程序 启动UI粒子

粒子2.启动到 (200 ÷ 分辨率缩放倍率, 分辨率.窗口高度 ÷ 分辨率缩放倍率)
粒子3.启动到 ((分辨率.窗口宽度 － 200) ÷ 分辨率缩放倍率, 分辨率.窗口高度 ÷ 分辨率缩放倍率)

.子程序 LOGO移动
.局部变量 LOGO移动加速度, 整数型
.局部变量 LOGO移动差值, 整数型
.局部变量 LOGO移动速度, 整数型

.如果 (logo显示位置 ＝ 1)
    .如果 (弹跳X坐标 ≤ 分辨率.窗口宽度 ÷ 2 － 150 × 分辨率缩放倍率)
        弹跳X坐标 ＝ 分辨率.窗口宽度 ÷ 2 － 150 × 分辨率缩放倍率
    .否则
        LOGO移动差值 ＝ 分辨率.窗口宽度 ÷ 2 － 150 × 分辨率缩放倍率 － 弹跳X坐标
        LOGO移动加速度 ＝ LOGO移动差值 × 0.3
        LOGO移动速度 ＝ LOGO移动速度 ＋ LOGO移动加速度
        LOGO移动速度 ＝ 四舍五入 (LOGO移动速度 × 0.4, )
        弹跳X坐标 ＝ 弹跳X坐标 ＋ 帧率数据处理 (LOGO移动速度)
    .如果结束

.否则
.如果结束
.如果 (logo显示位置 ＝ 0)
    .如果 (弹跳X坐标 ≥ 分辨率.窗口宽度 ÷ 2)
        弹跳X坐标 ＝ 分辨率.窗口宽度 ÷ 2
    .否则
        LOGO移动差值 ＝ 分辨率.窗口宽度 ÷ 2 － 弹跳X坐标
        LOGO移动加速度 ＝ LOGO移动差值 × 0.2
        LOGO移动速度 ＝ LOGO移动速度 ＋ LOGO移动加速度
        LOGO移动速度 ＝ 四舍五入 (LOGO移动速度 × 0.4, )
        弹跳X坐标 ＝ 弹跳X坐标 ＋ 帧率数据处理 (LOGO移动速度)
    .如果结束

.否则
.如果结束
.如果 (图标计时 ≥ 5)
    logo显示位置 ＝ 0
.否则
    图标计时 ＝ 图标计时 ＋ 引擎.取最后帧时间 ()
.如果结束


.子程序 LOGO渲染
.局部变量 LOGO差值, 整数型
.局部变量 LOGO加速度, 整数型
.局部变量 LOGO速度, 整数型
.局部变量 logo移动差值, 整数型
.局部变量 LOGO移动加速度, 整数型
.局部变量 LOGO移动速度, 整数型

.如果 (LOGO亮透明度 － 帧率数据处理 (5) ≤ 0)
    LOGO亮透明度 ＝ 0
.否则
    LOGO亮透明度 ＝ LOGO亮透明度 － 帧率数据处理 (5)
.如果结束
.如果 (音乐播放判断 ＝ 0)
    LOGO差值 ＝ 1000 － logo缩放
    LOGO加速度 ＝ LOGO差值 × 0.1
    LOGO速度 ＝ LOGO速度 ＋ LOGO加速度
    LOGO速度 ＝ 四舍五入 (LOGO速度 × 0.2, )
    logo缩放 ＝ logo缩放 ＋ 帧率数据处理 (LOGO速度)
.否则
    LOGO差值 ＝ 1000 － logo缩放
    LOGO加速度 ＝ LOGO差值 × 0.3
    LOGO速度 ＝ LOGO速度 ＋ LOGO加速度
    LOGO速度 ＝ 四舍五入 (LOGO速度 × 0.2, )
    logo缩放 ＝ logo缩放 ＋ 帧率数据处理 (LOGO速度)
.如果结束
弹跳图标.置混合模式 (#混合_默认)
弹跳图标.置透明度 (255)
弹跳图标.显示高级 (弹跳X坐标, 分辨率.窗口高度 ÷ 2 － 50, 0, logo缩放 ÷ 1000 × 分辨率缩放倍率, logo缩放 ÷ 1000 × 分辨率缩放倍率)
弹跳图标.置混合模式 (#混合_Add2X)
弹跳图标.置透明度 (LOGO亮透明度)
弹跳图标.显示高级 (弹跳X坐标, 分辨率.窗口高度 ÷ 2 － 50, 0, logo缩放 ÷ 1000 × 分辨率缩放倍率, logo缩放 ÷ 1000 × 分辨率缩放倍率)
.如果 (音乐播放判断 ＝ 0)
    残影差值 ＝ 2000 － 残影缩放
    残影加速度 ＝ 残影差值 × 0.11
    残影速度 ＝ 残影速度 ＋ 残影加速度
    残影速度 ＝ 四舍五入 (残影速度 × 0.1, )
    残影缩放 ＝ 残影缩放 ＋ 帧率数据处理 (残影速度)
    .如果 (残影透明度 － 帧率数据处理 (4) ≤ 0)
        残影透明度 ＝ 0
    .否则
        残影透明度 ＝ 残影透明度 － 帧率数据处理 (4)
    .如果结束

.否则
    残影差值 ＝ 1200 － 残影缩放
    残影加速度 ＝ 残影差值 × 0.2
    残影速度 ＝ 残影速度 ＋ 残影加速度
    残影速度 ＝ 四舍五入 (残影速度 × 0.1, )
    残影缩放 ＝ 残影缩放 ＋ 帧率数据处理 (残影速度)
    .如果 (残影透明度 － 帧率数据处理 (1) ≤ 0)
        残影透明度 ＝ 0
    .否则
        残影透明度 ＝ 残影透明度 － 帧率数据处理 (1)
    .如果结束

.如果结束
残影.置透明度 (残影透明度)
残影.显示高级 (弹跳X坐标, 分辨率.窗口高度 ÷ 2 － 50, 0, 残影缩放 ÷ 1000 × 分辨率缩放倍率, 残影缩放 ÷ 1000 × 分辨率缩放倍率)

.子程序 时间
.局部变量 ccc, 文本型

MP3进度 ＝ BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0))

MP3进度时间高潮 ＝ 进度转时间 (MP3进度)
当前播放时间 ＝ 进度转时间 (MP3进度)

.子程序 ui渲染

背景.显示区域 (0, 0, 分辨率.窗口宽度, 分辨率.窗口高度)
星星渲染 ()
闪烁动画 ()
按钮渲染 ()
LOGO渲染 ()
粒子2.缩放 (分辨率缩放倍率)
粒子3.缩放 (分辨率缩放倍率)
粒子2.显示 ()
粒子3.显示 ()
关于渲染 ()
时间 ()
文字.显示 (5, 5, “时间：” ＋ 进度转时间无毫秒 (MP3进度) ＋ “/” ＋ 到文本 (MP3分) ＋ “:” ＋ 处理秒数 (到文本 (mp3秒)) ＋ #换行符 ＋ MP3名称 ＋ #换行符 ＋ SONG名称)

.子程序 星星渲染
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (星星), n)
    星星精灵.置透明度 (星星 [n].透明度)
    星星精灵.显示高级 (星星 [n].X, 星星 [n].Y, 星星 [n].旋转度, 0.3 × 分辨率缩放倍率, 0.3 × 分辨率缩放倍率)
.计次循环尾 ()

.子程序 星星逻辑, , , 背景星星的逻辑
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (星星), n)
    .如果 (星星 [n].渐隐 ＝ 假)
        .如果 (星星 [n].透明度 ＋ 帧率数据处理 (星星 [n].速度 × 2) ≥ 255)
            星星 [n].渐隐 ＝ 真
        .否则
            星星 [n].透明度 ＝ 星星 [n].透明度 ＋ 帧率数据处理 (星星 [n].速度 × 2)
        .如果结束

    .否则
        .如果 (星星 [n].透明度 － 帧率数据处理 (星星 [n].速度 × 2) ≤ 0)
            星星 [n].透明度 ＝ 0
        .否则
            星星 [n].透明度 ＝ 星星 [n].透明度 － 帧率数据处理 (星星 [n].速度 × 2)
        .如果结束

    .如果结束
    .如果 (星星 [n].左右 ＝ 1)
        星星 [n].旋转度 ＝ 星星 [n].旋转度 － 帧率数据处理 (星星 [n].速度 ÷ 100)
    .否则
        星星 [n].旋转度 ＝ 星星 [n].旋转度 ＋ 帧率数据处理 (星星 [n].速度 ÷ 100)
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (星星), n)
    .如果 (n ≥ 取数组成员数 (星星))

    .否则
        .如果 (星星 [n].透明度 ＝ 0)
            删除成员 (星星, n, 1)
        .否则

        .如果结束

    .如果结束

.计次循环尾 ()

.子程序 加入星星
.参数 个数, 整数型
.局部变量 临时星星, 星星

.计次循环首 (个数, )
    临时星星.X ＝ 取随机数 (-10, 分辨率.窗口宽度)
    临时星星.Y ＝ 取随机数 (-10, 分辨率.窗口高度)
    临时星星.渐隐 ＝ 假
    临时星星.透明度 ＝ 0
    临时星星.旋转度 ＝ 0
    临时星星.速度 ＝ 取随机数 (3, 6)
    临时星星.左右 ＝ 取随机数 (1, 2)
    加入成员 (星星, 临时星星)
.计次循环尾 ()

.子程序 闪烁动画

.如果 (闪烁左透明度 － 帧率数据处理 (10) ≤ 0)
    闪烁左透明度 ＝ 0
.否则
    闪烁左透明度 ＝ 闪烁左透明度 － 帧率数据处理 (2)
.如果结束
.如果 (闪烁右透明度 － 帧率数据处理 (10) ≤ 0)
    闪烁右透明度 ＝ 0
.否则
    闪烁右透明度 ＝ 闪烁右透明度 － 帧率数据处理 (2)
.如果结束
闪烁左.置透明度 (闪烁左透明度)
闪烁右.置透明度 (闪烁右透明度)
闪烁左.显示区域 (0, 0, 200 × 分辨率缩放倍率, 分辨率.窗口高度)
闪烁右.显示区域 (分辨率.窗口宽度 － 350 × 分辨率缩放倍率, 0, 分辨率.窗口宽度, 分辨率.窗口高度)

.子程序 按钮渲染

.如果 (按钮透明度 ＝ 0)

.否则
    开始按钮.显示高级 (按钮1X坐标, 分辨率.窗口高度 ÷ 2 － 150 × 分辨率缩放倍率, 0, 分辨率缩放倍率, 分辨率缩放倍率)
    退出按钮.显示高级 (按钮2X坐标, 分辨率.窗口高度 ÷ 2 － 50 × 分辨率缩放倍率, 0, 分辨率缩放倍率, 分辨率缩放倍率)
.如果结束
菜单按钮.精灵.显示高级 (分辨率.窗口宽度 － 40 × 分辨率缩放倍率, 20 × 分辨率缩放倍率, 0, 菜单按钮.缩放 ÷ 1000 × 分辨率缩放倍率, 菜单按钮.缩放 ÷ 1000 × 分辨率缩放倍率)
暂停按钮.精灵.显示高级 (分辨率.窗口宽度 － 70 × 分辨率缩放倍率, 24 × 分辨率缩放倍率, 0, 暂停按钮.缩放 ÷ 1000 × 分辨率缩放倍率, 暂停按钮.缩放 ÷ 1000 × 分辨率缩放倍率)
设置按钮.精灵.显示高级 (分辨率.窗口宽度 － 30 × 分辨率缩放倍率, 分辨率.窗口高度 － 30 × 分辨率缩放倍率, 0, 设置按钮.缩放 ÷ 1000 × 分辨率缩放倍率, 设置按钮.缩放 ÷ 1000 × 分辨率缩放倍率)

.子程序 退出程序, 文本型

.如果真 (是否已创建 (窗口1) ＝ 真)
    窗口1.销毁 ()
.如果真结束
返回 (“true”)

.子程序 退出

结束 ()

.子程序 关于渲染

信息精灵.精灵.显示高级 (0, 分辨率.窗口高度, 0, 信息精灵.缩放 ÷ 1000 × 分辨率缩放倍率, 信息精灵.缩放 ÷ 1000 × 分辨率缩放倍率)

.子程序 UI音乐初始化
.参数 音乐名称, 文本型
.局部变量 分割文本, 文本型, , "0"
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 完成文本, 文本型
.局部变量 普面信息, 文本型
.局部变量 普面起始位置, 整数型
.局部变量 普面终止位置, 整数型
.局部变量 共计行数, 整数型
.局部变量 普面分析1, 文本型, , "0"
.局部变量 总坐标, 小数型
.局部变量 临时太鼓坐标, 太鼓坐标
.局部变量 延迟播放, 小数型
.局部变量 文本替换, 文本型
.局部变量 连打判断, 整数型, 静态
.局部变量 连打类型, 整数型, 静态
.局部变量 N3, 整数型
.局部变量 逗号判断, 逻辑型
.局部变量 临时合成, 文本型
.局部变量 i, 整数型
.局部变量 拍数分割, 文本型, , "0"
.局部变量 临时坐标鼓, 坐标鼓
.局部变量 临时BPM, 小数型
.局部变量 卷轴速度, 小数型
.局部变量 计数, 整数型
.局部变量 临时高潮开关, 逻辑型
.局部变量 是否计数, 逻辑型
.局部变量 普面移动倍数, 小数型
.局部变量 去参数长度, 文本型

' 初始化
重定义数组 (太鼓X坐标, 假, 0)
普面移动倍数 ＝ 1
高潮开关 ＝ 0
音乐拍长度 ＝ 100
音乐信息 ＝ 到文本 (读入文件 (取运行目录 () ＋ “\Songs\” ＋ 音乐名称 ＋ “\” ＋ 音乐名称 ＋ “.tja”))
' 截取铺面信息
分割文本 ＝ 分割文本 (音乐信息, #换行符, )
普面起始位置 ＝ 寻找文本 (音乐信息, “#START”, , 假) ＋ 7
普面终止位置 ＝ 寻找文本 (音乐信息, “#END”, , 假) ＋ 4
共计行数 ＝ 普面终止位置 － 普面起始位置
普面信息 ＝ 普面信息 ＋ 取文本中间 (音乐信息, 普面起始位置, 共计行数) ＋ #换行符
普面信息 ＝ 删全部空 (普面信息)
写到文件 (“bb.txt”, 到字节集 (普面信息))
普面分析1 ＝ 分割文本 (普面信息, #换行符, )
' 分析铺面信息
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “WAVE:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “WAVE:”, , , , 真)

        音效 [3].句柄 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Songs\” ＋ 音乐文件夹 ＋ “\” ＋ 完成文本, 0, 0, 40000)
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “BPM:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “BPM:”, , , , 真)
        音乐BPM ＝ 到小数 (完成文本)
        临时BPM ＝ 到小数 (完成文本)
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (分割文本), n)
    .如果 (寻找文本 (分割文本 [n], “COURSE:”, , 假) ＝ -1)

    .否则
        完成文本 ＝ 子文本替换 (分割文本 [n], “COURSE:”, , , , 真)
        .如果 (到整数 (完成文本) ≤ 4)
            谱面难度 ＝ 到整数 (完成文本)
        .否则
            谱面难度 ＝ 4
        .如果结束
        删除成员 (分割文本, n, )
        跳出循环 ()
    .如果结束

.计次循环尾 ()


' 分析铺面

太鼓移动坐标 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60 × 4
.计次循环首 (取数组成员数 (普面分析1), n)
    .如果 (普面分析1 [n] ＝ “”)

    .否则
        临时太鼓坐标.动态BPM ＝ 临时BPM
        临时太鼓坐标.拍数 ＝ 音乐拍长度
        临时太鼓坐标.调试信息 ＝ 普面分析1 [n]
        临时太鼓坐标.卷轴速度 ＝ 卷轴速度
        插入成员 (太鼓X坐标, 1, 临时太鼓坐标)
        ' 下面是先寻找参数，读取出高潮，段数，节拍，延长

        .判断开始 (寻找文本 (到大写 (普面分析1 [n]), “#GOGOSTART”, , 假) ≠ -1)
            临时合成 ＝ 临时合成 ＋ “S”
        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#GOGOEND”, , 假) ≠ -1)
            临时合成 ＝ 临时合成 ＋ “E”
        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#MEASURE”, , 假) ≠ -1)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#MEASURE”, , , , 真)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
            拍数分割 ＝ 分割文本 (普面分析1 [n], “/”, )
            .如果 (取数组成员数 (拍数分割) ＜ 2)

            .否则
                普面移动倍数 ＝ 到小数 (拍数分割 [1]) ÷ 到小数 (拍数分割 [2])
            .如果结束

        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#DELAY”, , 假) ≠ -1)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#DELAY”, , , , 真)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
            总坐标 ＝ 总坐标 ＋ 到小数 (普面分析1 [n]) × 音乐拍长度 × 4 × 临时BPM ÷ 60

        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#SCROLL”, , 假) ≠ -1)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#SCROLL”, , , , 真)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “ ”, , , , 真)
            卷轴速度 ＝ 到小数 (普面分析1 [n])
        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#BPMCHANGE”, , 假) ≠ -1)
            普面分析1 [n] ＝ 子文本替换 (到大写 (普面分析1 [n]), “#BPMCHANGE”, , , , 真)
            临时BPM ＝ 到小数 (普面分析1 [n])

        .判断 (寻找文本 (到大写 (普面分析1 [n]), “#END”, , 假) ≠ -1)

        .判断 (取文本左边 (普面分析1 [n], 1) ＝ “#”)

        .默认
            ' 这里开始时读取谱面了
            .如果 (取文本中间 (普面分析1 [n], 取文本长度 (普面分析1 [n]), 1) ＝ “,”)  ' 因为TJA格式以逗号分一段，因此读取时需要判断一下，当没有分号时要合并一下。
                普面分析1 [n] ＝ 临时合成 ＋ 普面分析1 [n]
                去参数长度 ＝ 子文本替换 (普面分析1 [n], “S”, , , , 假)
                去参数长度 ＝ 子文本替换 (去参数长度, “E”, , , , 假)
                普面分析1 [n] ＝ 子文本替换 (普面分析1 [n], “ ”, , , , 真)
                临时合成 ＝ “”
                .计次循环首 (取文本长度 (普面分析1 [n]) ＋ 1, n2)
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “S”)
                        Debug ＝ Debug ＋ “S”
                        临时坐标鼓.坐标 ＝ 总坐标
                        临时坐标鼓.类型 ＝ “高潮”
                        加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                        调试输出 (“开” ＋ 到文本 (临时坐标鼓.坐标))
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “E”)
                        Debug ＝ Debug ＋ “S”
                        临时坐标鼓.坐标 ＝ 总坐标
                        临时坐标鼓.类型 ＝ “高潮关”
                        加入成员 (太鼓X坐标 [1].坐标鼓, 临时坐标鼓)
                        调试输出 (“关” ＋ 到文本 (临时坐标鼓.坐标))
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “0”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “1”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “2”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “3”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “4”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “5”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “6”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “7”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束
                    .如果 (取文本中间 (普面分析1 [n], n2 － 1, 1) ＝ “8”)
                        总坐标 ＝ 总坐标 ＋ 音乐拍长度 × 16 ÷ (取文本长度 (去参数长度) － 1) × 普面移动倍数
                    .否则

                    .如果结束






                .计次循环尾 ()
            .否则
                临时合成 ＝ 临时合成 ＋ 普面分析1 [n]
            .如果结束

        .判断结束

    .如果结束




.计次循环尾 ()
.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        太鼓X坐标 [n].坐标鼓 [n2].原坐标 ＝ 太鼓X坐标 [n].坐标鼓 [n2].坐标
    .计次循环尾 ()
.计次循环尾 ()








.子程序 高潮逻辑
.局部变量 n, 整数型
.局部变量 n2, 整数型
.局部变量 开关判断, 整数型, 静态
.局部变量 最后开关, 整数型

太鼓移动坐标 ＝ 音乐拍长度 × 4 × 音乐BPM ÷ 60 × (－BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)) － OFFSET)

.计次循环首 (取数组成员数 (太鼓X坐标), n)
    .计次循环首 (取数组成员数 (太鼓X坐标 [n].坐标鼓), n2)
        .如果 (太鼓X坐标 [n].坐标鼓 [n2].坐标 ＋ 太鼓移动坐标 ＋ 220 ≤ 222)
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “高潮”)
                    高潮开关 ＝ 1
                    启动UI粒子 ()
                    太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                .否则

                .如果结束

            .否则

            .如果结束
            .如果 (太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 假)
                .如果 (太鼓X坐标 [n].坐标鼓 [n2].类型 ＝ “高潮关”)
                    高潮开关 ＝ 0
                    太鼓X坐标 [n].坐标鼓 [n2].是否以打击 ＝ 真
                .否则

                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束

    .计次循环尾 ()
.计次循环尾 ()

