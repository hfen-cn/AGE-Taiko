.版本 2
.支持库 EThread
.支持库 spec

.程序集 音乐初始化类
.程序集变量 首次播放, 整数型
.程序集变量 播放音乐, 整数型
.程序集变量 音乐总数, 整数型
.程序集变量 文件名, 文本型
.程序集变量 歌词, 文本型, , "0"
.程序集变量 时间分层, 整数型, , "0"
.程序集变量 插入新音乐, 整数型
.程序集变量 分钟, 整数型
.程序集变量 秒钟, 整数型
.程序集变量 歌词是否存在, 逻辑型
.程序集变量 歌曲文件名, 文本型
.程序集变量 时间毫秒, 文本型
.程序集变量 高潮判定, 音乐高潮, , "0"
.程序集变量 图像处理, Age_图像处理
.程序集变量 图片名称, 文本型

.子程序 播放MP3音乐
.参数 设定, 整数型, 可空
.参数 弹框, 逻辑型, 可空
.局部变量 MP3名称2, 文本型
.局部变量 名称, 文本型
.局部变量 歌手名称, 文本型
.局部变量 歌曲最大长度, 整数型
.局部变量 歌词文本, 字节集
.局部变量 临时文件夹, 文本型
.局部变量 临时文件, 文本型
.局部变量 x, 整数型
.局部变量 i, 整数型
.局部变量 配置文件, 文本型
.局部变量 分割文本, 文本型, , "0"
.局部变量 高潮分组, 文本型, , "0"
.局部变量 n, 整数型
.局部变量 完成文本, 文本型
.局部变量 普面起始位置, 整数型
.局部变量 普面终止位置, 整数型
.局部变量 共计行数, 整数型
.局部变量 普面信息, 文本型
.局部变量 临时高潮, 音乐高潮
.局部变量 高潮序列, 整数型
.局部变量 MP3OFFSET, 小数型
.局部变量 高潮开计数, 整数型
.局部变量 合并记录, 文本型
.局部变量 读取谱面DOMETime, 双精度小数型
.局部变量 多线程句柄, 整数型, 静态
.局部变量 音乐文件名称, 文本型

.如果 (欢迎音乐 ＝ 假)
    MP3名称 ＝ “Welcome”
    SONG名称 ＝ “RGS”
    MP3的BPM ＝ 120.01
    BASS_StreamFree (播放句柄)
    播放句柄 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\WelcomeMusic.ogg”, 0, 0, 40000)
    歌曲最大长度 ＝ 取整 (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetLength (播放句柄, 0)))
    mp3秒 ＝ 歌曲最大长度 ％ 60
    MP3分 ＝ 歌曲最大长度 ＼ 60
    BASS_ChannelPlay (播放句柄, 假)
    UI音乐初始化 (#welcomtja)
    首次播放 ＝ 1
.否则
    .如果 (设定 ＝ 2)

    .否则

    .如果结束
    .如果 (设定 ＝ 1)
        播放音乐 ＝ 取随机数 (1, 取数组成员数 (音乐列表))
        mp3配置文件 ＝ 取运行目录 () ＋ “\Songs\” ＋ 音乐列表 [播放音乐].文件名 ＋ “\”
    .否则

    .如果结束
    .如果 (设定 ＝ 0)
        .如果 (播放音乐 ＝ 取数组成员数 (音乐列表))
            播放音乐 ＝ 1
            mp3配置文件 ＝ 取运行目录 () ＋ “\Songs\” ＋ 音乐列表 [1].文件名 ＋ “\”
        .否则
            播放音乐 ＝ 播放音乐 ＋ 1
            mp3配置文件 ＝ 取运行目录 () ＋ “\Songs\” ＋ 音乐列表 [播放音乐].文件名 ＋ “\”

        .如果结束

    .否则

    .如果结束
    .如果 (设定 ＝ 4)
        .如果 (播放音乐 ＝ 1)
            播放音乐 ＝ 取数组成员数 (音乐列表)
            mp3配置文件 ＝ 取运行目录 () ＋ “\Songs\” ＋ 音乐列表 [播放音乐].文件名 ＋ “\”
        .否则
            播放音乐 ＝ 播放音乐 － 1
            mp3配置文件 ＝ 取运行目录 () ＋ “\Songs\” ＋ 音乐列表 [播放音乐].文件名 ＋ “\”
        .如果结束

    .否则
    .如果结束

    .如果 (设定 ＝ 3)
        播放音乐 ＝ 插入新音乐
        mp3配置文件 ＝ 取运行目录 () ＋ “\Songs\” ＋ 音乐列表 [播放音乐].文件名 ＋ “\”
        .如果 (mp3配置文件 ≠ “”)
            音乐总数 ＝ 音乐总数 ＋ 1
        .否则

        .如果结束

    .否则
    .如果结束


    配置文件 ＝ 到文本 (读入文件 (mp3配置文件 ＋ 音乐列表 [播放音乐].标题))
    音乐文件夹 ＝ 音乐列表 [播放音乐].文件名
    谱面文件名称 ＝ 音乐列表 [播放音乐].标题
    分割文本 ＝ 分割文本 (配置文件, #换行符, )
    MP3名称 ＝ 音乐列表 [播放音乐].歌曲名称
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “WAVE:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “WAVE:”, , , , 真)
            音乐文件名称 ＝ 完成文本
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    .如果真 (音乐文件名称 ＝ “”)
        加入通知 (“播放错误”, 音乐列表 [播放音乐].标题 ＋ “文件中未找到WAVE参数！”)
    .如果真结束

    MP3的BPM ＝ 100
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “BPM:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “BPM:”, , , , 真)
            .如果 (到小数 (完成文本) ＝ 0)
                MP3的BPM ＝ 0
            .否则
                MP3的BPM ＝ 到小数 (完成文本)
            .如果结束
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    歌手名称 ＝ 音乐列表 [播放音乐].演唱者
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “OFFSET:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “OFFSET:”, , , , 真)
            MP3OFFSET ＝ 到小数 (完成文本)
            OFFSET ＝ 到小数 (完成文本)
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    读取谱面DOMETime ＝ 0
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “DEMOSTART:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “DEMOSTART:”, , , , 真)
            读取谱面DOMETime ＝ 到小数 (完成文本)

            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()
    有封面 ＝ 假
    强制结束线程 (多线程句柄)
    .计次循环首 (取数组成员数 (分割文本), n)
        .如果 (寻找文本 (分割文本 [n], “Photo:”, , 假) ＝ -1)

        .否则
            完成文本 ＝ 子文本替换 (分割文本 [n], “Photo:”, , , , 真)
            .如果真 (文件是否存在 (mp3配置文件 ＋ 完成文本) ＝ 真)
                图片名称 ＝ 完成文本
                启动线程 (&多线程背景, , 多线程句柄)
            .如果真结束
            删除成员 (分割文本, n, )
            跳出循环 ()
        .如果结束

    .计次循环尾 ()

    调试输出 (读取谱面DOMETime)
    UI音乐初始化 (音乐列表 [播放音乐].文件名, 音乐列表 [播放音乐].标题)
    重定义数组 (高潮判定, 假, 0)
    普面起始位置 ＝ 寻找文本 (配置文件, “#START”, , 假) ＋ 7
    普面终止位置 ＝ 寻找文本 (配置文件, “#END”, , 假) ＋ 4
    共计行数 ＝ 普面终止位置 － 普面起始位置
    普面信息 ＝ 普面信息 ＋ 取文本中间 (配置文件, 普面起始位置, 共计行数) ＋ #换行符
    分割文本 ＝ 分割文本 (删全部空 (普面信息), #换行符, )

    .如果 (取数组成员数 (分割文本) ＞ n)
        .如果 (删全部空 (分割文本 [n]) ＝ “”)
            删除成员 (分割文本, n, 1)
        .否则

        .如果结束

    .否则

    .如果结束
    高潮开关 ＝ 0
    歌曲文件名 ＝ 名称
    .如果 (歌手名称 ＝ “”)
        SONG名称 ＝ “未知歌手”
    .否则
        SONG名称 ＝ 歌手名称
    .如果结束

    BASS_StreamFree (播放句柄)
    .如果 (文件是否存在 (mp3配置文件 ＋ 音乐文件名称))
        播放句柄 ＝ BASS_StreamCreateFile (假, mp3配置文件 ＋ 音乐文件名称, 0, 0, 40000)
        歌曲最大长度 ＝ 取整 (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetLength (播放句柄, 0)))
        mp3秒 ＝ 歌曲最大长度 ％ 60
        MP3分 ＝ 歌曲最大长度 ＼ 60
        BASS_ChannelPlay (播放句柄, 假)
        .如果 (首次播放 ＝ 0)
            首次播放 ＝ 1
            BASS_ChannelSetPosition (播放句柄, BASS_ChannelSeconds2Bytes (播放句柄, 读取谱面DOMETime), 0)
        .否则

        .如果结束

        音乐播放判断 ＝ 0
        闪烁模式 ＝ 2
        去多余鼓面判断 ()
        .如果 (弹框 ＝ 真)
            加入通知 (“正在播放”, SONG名称 ＋ “ － ” ＋ MP3名称)
        .否则

        .如果结束

    .否则
        加入通知 (“播放错误”, “无法加载：” ＋ 音乐文件名称)
    .如果结束


.如果结束



.子程序 多线程背景
.局部变量 文件号, 整数型

文件号 ＝ 打开文件 (mp3配置文件 ＋ 图片名称, , )
图像处理.从字节集解码 (读入字节集 (文件号, 取文件长度 (文件号)), )

歌曲封面无处理 ＝ 引擎.读纹理_字节集 (图像处理.取图像 (#格式_TGA))
图像处理.高斯模糊 (50, 图像处理)
歌曲封面 ＝ 引擎.读纹理_字节集 (图像处理.取图像 (#格式_TGA))
图像记录 ＝ 图片名称
图像处理.销毁 ()
关闭文件 (文件号)
封面偏移 ＝ 引擎.取图片宽 (歌曲封面无处理) ÷ (引擎.取图片高 (歌曲封面无处理) ÷ 300)
有封面 ＝ 真


.子程序 图像处理毛玻璃, 整数型
.参数 字节集, 字节集
.局部变量 字节集1, 整数型

图像处理.从字节集解码 (字节集, )
图像处理.高斯模糊 (10, 图像处理)
字节集1 ＝ 引擎.读纹理_字节集 (图像处理.取图像 (#格式_TGA))
图像处理.销毁 ()
返回 (字节集1)


.子程序 毛玻璃_字节集, 字节集
.参数 字节集, 字节集
.参数 半径, 整数型
.参数 格式, 整数型
.局部变量 字节集1, 字节集

图像处理.从字节集解码 (字节集, )
图像处理.高斯模糊 (半径, 图像处理)
字节集1 ＝ 图像处理.取图像 (格式)
图像处理.销毁 ()
返回 (字节集1)

.子程序 遮罩切换播放

播放MP3音乐 (2)

.子程序 读取音乐
.局部变量 数据, 文本型
.局部变量 分割数据, 文本型, , "0"
.局部变量 i, 整数型
.局部变量 分割, 文本型, , "0"
.局部变量 子目录, 文本型, , "0"
.局部变量 索引, 整数型
.局部变量 临时音乐列表, 音乐列表
.局部变量 配置文件, 文本型
.局部变量 分割文本, 文本型, , "0"
.局部变量 n, 整数型
.局部变量 取参数文本, 文本型
.局部变量 读入文本文件号, 整数型
.局部变量 找参数分割文本, 文本型, , "0"
.局部变量 完成文本, 文本型

重定义数组 (子目录, 假, 0)
重定义数组 (音乐列表, 假, 0)
文件名 ＝ 寻找文件 (取运行目录 () ＋ “\Songs\*”, 16)
数据 ＝ 到文本 (读入文件 (文件名))
分割数据 ＝ 分割文本 (数据, #换行符, )
.判断循环首 (文件名 ≠ “”)
    文件名 ＝ 寻找文件 (, 16)
    .如果真 (文件名 ≠ “”)
        .如果真 (文件名 ≠ “.” 且 文件名 ≠ “..”)
            加入成员 (子目录, 文件名)
        .如果真结束

    .如果真结束

.判断循环尾 ()
.计次循环首 (取数组成员数 (子目录), i)
    文件名 ＝ 寻找文件 (取运行目录 () ＋ “\Songs\” ＋ 子目录 [i] ＋ “\*.tja”, )
    .判断循环首 (文件名 ≠ “”)
        .如果真 (文件名 ≠ “”)
            临时音乐列表.标题 ＝ 文件名
            临时音乐列表.文件名 ＝ 子目录 [i]
            读入文本文件号 ＝ 打开文件 (取运行目录 () ＋ “\Songs\” ＋ 子目录 [i] ＋ “\” ＋ 文件名, 1, )
            取参数文本 ＝ 读入文本 (读入文本文件号, )
            关闭文件 (读入文本文件号)
            找参数分割文本 ＝ 分割文本 (取参数文本, #换行符, )
            临时音乐列表.歌曲名称 ＝ 文件名
            .计次循环首 (取数组成员数 (找参数分割文本), n)
                .如果 (寻找文本 (找参数分割文本 [n], “TITLE:”, , 假) ＝ -1)

                .否则
                    完成文本 ＝ 子文本替换 (找参数分割文本 [n], “TITLE:”, , , , 真)
                    临时音乐列表.歌曲名称 ＝ 完成文本
                    删除成员 (分割文本, n, )
                    跳出循环 ()
                .如果结束

            .计次循环尾 ()
            临时音乐列表.演唱者 ＝ “”
            .计次循环首 (取数组成员数 (找参数分割文本), n)
                .如果 (寻找文本 (找参数分割文本 [n], “SUBTITLE:”, , 假) ＝ -1)

                .否则
                    完成文本 ＝ 子文本替换 (找参数分割文本 [n], “SUBTITLE:”, , , , 真)
                    临时音乐列表.演唱者 ＝ 完成文本
                    删除成员 (分割文本, n, )
                    跳出循环 ()
                .如果结束

            .计次循环尾 ()

            加入成员 (音乐列表, 临时音乐列表)
        .如果真结束
        文件名 ＝ 寻找文件 (, )
    .判断循环尾 ()
.计次循环尾 ()
音乐总数 ＝ 取数组成员数 (音乐列表)
.如果真 (音乐总数 ＝ 0)
    加入通知 (“提示”, “没有扫描到可用的音乐，请确认一下哦！”)
.如果真结束


.子程序 读取进度及判断
.局部变量 a, 文本型, 静态
.局部变量 b, 文本型
.局部变量 ddd, 文本型
.局部变量 sss, 文本型
.局部变量 编号, 整数型
.局部变量 ccc, 文本型
.局部变量 毫秒, 小数型
.局部变量 ccc2, 文本型
.局部变量 n, 整数型



.如果真 (BASS_ChannelGetLength (播放句柄, 0) ＝ BASS_ChannelGetPosition (播放句柄, 0))
    .如果 (首次播放 ＝ 1)
        .如果 (欢迎音乐 ＝ 假)

        .否则
            .如果 (音乐单曲循环)
                播放MP3音乐 (2)
            .否则
                播放MP3音乐 (0, 真)

            .如果结束

        .如果结束

    .否则
        播放MP3音乐 (1)

    .如果结束

.如果真结束

MP3进度 ＝ BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0))
时间毫秒 ＝ 进度转毫秒 (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)))
MP3进度时间高潮 ＝ 进度转时间 (MP3进度)
当前播放时间 ＝ 进度转时间无毫秒 (MP3进度)
分钟 ＝ 进度转分 (MP3进度)
秒钟 ＝ 进度转秒 (MP3进度)
sss ＝ 读配置项 (mp3配置文件, “Flicker”, 进度转时间无毫秒 (MP3进度), )
.如果 (到整数 (sss) ＝ 1)
    闪烁模式 ＝ 1
.否则

.如果结束
.如果 (到整数 (sss) ＝ 2)
    闪烁模式 ＝ 2
.否则

.如果结束


.子程序 片头曲循环

.如果 (BASS_ChannelIsActive (播放句柄) ＝ 0 且 欢迎音乐 ＝ 假)
    BASS_ChannelPlay (播放句柄, 假)
    UI音乐初始化 (#welcomtja)
.否则

.如果结束


.子程序 音乐菜单播放音乐
.参数 音乐, 整数型

播放音乐 ＝ 音乐 － 1
欢迎音乐 ＝ 真
播放MP3音乐 (, 真)


.子程序 指定播放音乐
.参数 音乐, 整数型

播放音乐 ＝ 音乐 － 1
欢迎音乐 ＝ 真
播放MP3音乐 (, 假)


.子程序 取当前播放音乐, 整数型

返回 (播放音乐)
