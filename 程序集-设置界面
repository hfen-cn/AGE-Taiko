.版本 2

.程序集 设置界面
.程序集变量 背景精灵, Age_精灵
.程序集变量 边栏精灵, Age_精灵
.程序集变量 大背景精灵, Age_精灵
.程序集变量 选中边栏精灵, Age_精灵
.程序集变量 后退箭头, 缩放按钮类
.程序集变量 首选项, Age_精灵
.程序集变量 选择钮文字, Age_文字
.程序集变量 选择钮未选中纹理, 整数型
.程序集变量 选择钮选中纹理, 整数型
.程序集变量 选择钮精灵, Age_精灵
.程序集变量 按钮滑动偏移, 整数型
.程序集变量 按钮滑动偏移设定, 整数型
.程序集变量 按钮滑动尽头, 整数型
.程序集变量 按钮透明度, 整数型
.程序集变量 按钮页面, 整数型
.程序集变量 边栏位移, 整数型
.程序集变量 边栏选中项, 整数型
.程序集变量 通用文字, Age_文字
.程序集变量 十五号文字, Age_文字
.程序集变量 关于界面兔子LOGO精灵, Age_精灵
.程序集变量 AGE引擎LOGO精灵, Age_精灵
.程序集变量 选中特效, 设置界面选中特效, , "0"
.程序集变量 更换按键事件, 逻辑型
.程序集变量 OFFSET节拍, 逻辑型
.程序集变量 节拍计数, 整数型
.程序集变量 节拍音效, 整数型
.程序集变量 输入框, Age_输入框
.程序集变量 黑色背景, Age_精灵
.程序集变量 黑色背景透明度, 整数型
.程序集变量 输入框开关, 逻辑型
.程序集变量 滑块, Age_精灵
.程序集变量 OFFSET滑块选中, 逻辑型
.程序集变量 OFFSET滑块数值, 整数型
.程序集变量 滑块坐标, 整数型
.程序集变量 滑块条背景, Age_精灵

.子程序 设置界面初始化

按钮滑动尽头 ＝ 0
边栏位移 ＝ 100
按钮透明度 ＝ 255
引擎.读zip (取运行目录 () ＋ “\UI.pak”, “”)
背景精灵.创建 (引擎.读纹理 (“SETT.png”))
边栏精灵.创建 (引擎.读纹理 (“SETTB.png”))
大背景精灵.创建 (引擎.读纹理 (“SETTBL.png”))
选中边栏精灵.创建 (引擎.读纹理 (“SETTXZ.png”))
关于界面兔子LOGO精灵.创建 (引擎.读纹理 (“About2.png”))
AGE引擎LOGO精灵.创建 (引擎.读纹理 (“age.png”))
后退箭头.精灵.创建 (引擎.读纹理 (“后退箭头.png”))
首选项.创建 (引擎.读纹理 (“首选项.png”))
选择钮未选中纹理 ＝ 引擎.读纹理 (“选择钮.png”)
选择钮选中纹理 ＝ 引擎.读纹理 (“选择钮选中.png”)
选择钮文字.创建 (“黑体”, 25, 假, 假, 真, #颜色_白)
通用文字.创建 (“黑体”, 50, 假, 假, 真, #颜色_白)
十五号文字.创建 (“黑体”, 15, 假, 假, 真, #颜色_白)
选择钮精灵.创建 (选择钮未选中纹理)
黑色背景.创建 (引擎.读纹理_字节集 (#遮罩), , , )
输入框.创建 (380, #颜色_白, “宋体”, 25, 假, 假, 假)
滑块.创建 (引擎.读纹理 (“8.png”))
滑块条背景.创建 (引擎.读纹理 (“7.png”))

背景精灵.置混合模式 (#混合_默认)
边栏精灵.置混合模式 (#混合_默认)
大背景精灵.置混合模式 (#混合_默认)
选中边栏精灵.置混合模式 (#混合_默认)
后退箭头.精灵.置混合模式 (#混合_默认)
关于界面兔子LOGO精灵.置混合模式 (#混合_默认)
AGE引擎LOGO精灵.置混合模式 (#混合_默认)
首选项.置混合模式 (#混合_默认)
选择钮精灵.置混合模式 (#混合_默认)
黑色背景.置混合模式 (#混合_默认)
滑块.置混合模式 (#混合_默认)
滑块条背景.置混合模式 (#混合_默认)

后退箭头.精灵.置中心 (后退箭头.精灵.取宽度 () ÷ 2, 后退箭头.精灵.取高度 () ÷ 2)

节拍音效 ＝ BASS_StreamCreateFile (假, 取运行目录 () ＋ “\Sound\normal-slidertick.wav”, 0, 0, 40000)

.子程序 设置界面逻辑

读取进度及判断 ()
黑色背景逻辑 ()
.如果 (输入框开关 ＝ 假)
    设置界面鼠标按键逻辑 ()
    滑动逻辑 ()
    选项逻辑 ()
    边栏逻辑 ()
    选中特效逻辑 ()
    OFFSET音效 ()
    滑块逻辑 ()
.否则
    输入框.更新 (引擎.取最后帧时间 ())
.如果结束


.子程序 滑块逻辑

.如果 (OFFSET滑块选中 ＝ 真)
    .如果 (引擎.键_取选中 (#鼠标左键))
        .如果 (鼠标坐标.x ≤ 450)
            滑块坐标 ＝ 450
        .否则
            .如果 (鼠标坐标.x ≥ 615)
                滑块坐标 ＝ 615
            .否则
                滑块坐标 ＝ 鼠标坐标.x － 6

            .如果结束

        .如果结束
        全局OFFSET ＝ (滑块坐标 － 532) ÷ 100
    .否则

    .如果结束

.否则

.如果结束



.子程序 选中特效逻辑
.局部变量 n, 整数型

.计次循环首 (取数组成员数 (选中特效), n)
    .如果 (n ＞ 取数组成员数 (选中特效))

    .否则
        .如果 (选中特效 [n].透明度 ＝ 0)
            删除成员 (选中特效, n, 1)
        .否则
            .如果 (选中特效 [n].透明度 － 帧率数据处理 (10) ≤ 0)
                选中特效 [n].透明度 ＝ 0
            .否则
                选中特效 [n].透明度 ＝ 选中特效 [n].透明度 － 帧率数据处理 (10)
            .如果结束

        .如果结束

    .如果结束

.计次循环尾 ()




.子程序 OFFSET音效
.局部变量 计时, 整数型
.局部变量 计数, 整数型, 静态
.局部变量 暂停计时, 小数型, 静态
.局部变量 闪烁计数, 整数型, 静态

计时 ＝ (BASS_ChannelBytes2Seconds (播放句柄, BASS_ChannelGetPosition (播放句柄, 0)) ＋ OFFSET ＋ 全局OFFSET) × 1000 ÷ (60000 ÷ MP3的BPM)
.如果 (计数 ＝ 计时)

.否则
    .如果 (OFFSET节拍 ＝ 真)
        .如果 (节拍计数 ＝ 4)
            节拍计数 ＝ 1
        .否则
            节拍计数 ＝ 节拍计数 ＋ 1
        .如果结束
        BASS_ChannelPlay (节拍音效, 真)
    .否则

    .如果结束
    计数 ＝ 计时
.如果结束


.子程序 边栏逻辑
.局部变量 数值差值, 双精度小数型
.局部变量 数值加速度, 双精度小数型
.局部变量 数值速度, 双精度小数型
.局部变量 反数值, 双精度小数型
.局部变量 判断, 整数型, 静态

边栏位移 ＝ 加速度公式 (边栏位移, 100 ＋ 边栏选中项 × 50, 0.7, 0.7)

.如果真 (判断是否进入区域 (0, 150, 100, 140) ＝ 真)
    .如果真 (引擎.键_取按下 (#鼠标左键))
        边栏选中项 ＝ 0
        按钮滑动尽头 ＝ 0
    .如果真结束

.如果真结束
.如果真 (判断是否进入区域 (0, 150, 150, 190) ＝ 真)
    .如果真 (引擎.键_取按下 (#鼠标左键))
        边栏选中项 ＝ 1
        按钮滑动尽头 ＝ 0
    .如果真结束

.如果真结束
.如果真 (判断是否进入区域 (0, 150, 200, 240) ＝ 真)
    .如果真 (引擎.键_取按下 (#鼠标左键))
        边栏选中项 ＝ 2
        按钮滑动尽头 ＝ 0
    .如果真结束

.如果真结束
.如果真 (判断是否进入区域 (0, 150, 250, 290) ＝ 真)
    .如果真 (引擎.键_取按下 (#鼠标左键))
        边栏选中项 ＝ 3
        按钮滑动尽头 ＝ 0
    .如果真结束

.如果真结束
.如果真 (判断是否进入区域 (0, 150, 300, 340) ＝ 真)
    .如果真 (引擎.键_取按下 (#鼠标左键))
        边栏选中项 ＝ 4
        按钮滑动尽头 ＝ 100
    .如果真结束

.如果真结束


.如果 (按钮页面 ＝ 边栏选中项 且 判断 ≠ 2)
    判断 ＝ 0
.否则
    .如果 (判断 ＝ 0)
        .如果 (按钮透明度 － 帧率数据处理 (30) ≤ 0)
            按钮透明度 ＝ 0
            判断 ＝ 1
        .否则
            按钮透明度 ＝ 按钮透明度 － 帧率数据处理 (30)
        .如果结束

    .否则

    .如果结束
    .如果 (判断 ＝ 1)
        判断 ＝ 2
        边栏位移 ＝ 100 ＋ 边栏选中项 × 50
        按钮滑动偏移 ＝ 0
        按钮滑动偏移设定 ＝ 0
        按钮页面 ＝ 边栏选中项
    .否则

    .如果结束
    .如果 (判断 ＝ 2)
        .如果 (按钮透明度 ＋ 帧率数据处理 (30) ≥ 255)
            按钮透明度 ＝ 255
            判断 ＝ 0
        .否则
            按钮透明度 ＝ 按钮透明度 ＋ 帧率数据处理 (30)
        .如果结束

    .否则

    .如果结束

.如果结束


.子程序 设置界面鼠标按键逻辑

' ESC返回界面
.如果真 (引擎.键_取按下 (#Esc键))
    BASS_ChannelPlay (返回音效, 真)
    遮罩切换_无执行 (“UI”, 20, 假)
.如果真结束

.如果 (判断是否进入区域 (0, 70, 0, 70) ＝ 真)
    .如果真 (引擎.键_取弹起 (#鼠标左键))
        BASS_ChannelPlay (返回音效, 真)
        遮罩切换_无执行 (“UI”, 20, 假)
    .如果真结束
    .如果 (引擎.键_取选中 (#鼠标左键))
        后退箭头.缩放 ＝ 加速度公式 (后退箭头.缩放, 900, 0.4, 0.7)
    .否则
        后退箭头.缩放 ＝ 加速度公式 (后退箭头.缩放, 1000, 0.4, 0.7)
    .如果结束


.否则
    后退箭头.缩放 ＝ 加速度公式 (后退箭头.缩放, 700, 0.4, 0.7)
.如果结束


.子程序 设置界面渲染

大背景精灵.显示区域 (0, 0, 分辨率.窗口宽度, 分辨率.窗口高度)
选项渲染 ()
边栏精灵.显示区域 (0, 0, 215, 分辨率.窗口高度)
边栏按钮渲染 ()
背景精灵.显示区域 (0, 0, 分辨率.窗口宽度, 147)
后退箭头.精灵.显示高级 (40, 35, 0, 后退箭头.缩放 ÷ 1000, 后退箭头.缩放 ÷ 1000)
首选项.显示高级 (70, 5, 0, 1, 1)
输入框背景渲染 ()

.子程序 输入框背景渲染

.如果 (黑色背景透明度 ＝ 0)

.否则
    黑色背景.显示区域 (0, 0, 分辨率.窗口宽度, 分辨率.窗口高度)
    输入框.显示 (0, 0)
.如果结束


.子程序 选项渲染
.局部变量 n, 整数型

' 选项特效渲染

.计次循环首 (取数组成员数 (选中特效), n)
    选中边栏精灵.置颜色 (ARGB (选中特效 [n].透明度, 255, 255, 255))
    选中边栏精灵.显示区域 (170, 选中特效 [n].坐标 ＋ 按钮滑动偏移, 分辨率.窗口宽度, 选中特效 [n].坐标 ＋ 50 ＋ 按钮滑动偏移)
.计次循环尾 ()

选择钮文字.置颜色 (ARGB (按钮透明度, 255, 255, 255))
选择钮精灵.置透明度 (按钮透明度)
选中边栏精灵.置颜色 (ARGB (按钮透明度, 96, 96, 96))
滑块.置透明度 (按钮透明度)
滑块条背景.置透明度 (按钮透明度)
.如果真 (按钮页面 ＝ 0)
    ' 常规选项页面
    选中边栏精灵.显示区域 (170, 100 ＋ 按钮滑动偏移, 分辨率.窗口宽度, 150 ＋ 按钮滑动偏移)
    选择钮文字.显示 (200, 113 ＋ 按钮滑动偏移, “游戏”)
    选择钮文字.显示 (230, 158 ＋ 按钮滑动偏移, “自动模式”)
    .如果 (自动模式 ＝ 真)
        选择钮精灵.置纹理 (选择钮选中纹理)
    .否则
        选择钮精灵.置纹理 (选择钮未选中纹理)
    .如果结束
    选择钮精灵.显示 (180, 150 ＋ 按钮滑动偏移)

    选择钮文字.显示 (230, 208 ＋ 按钮滑动偏移, “LightMod”)
    .如果 (MOD开关.灯光MOD ＝ 真)
        选择钮精灵.置纹理 (选择钮选中纹理)
    .否则
        选择钮精灵.置纹理 (选择钮未选中纹理)
    .如果结束
    选择钮精灵.显示 (180, 200 ＋ 按钮滑动偏移)

    选择钮文字.显示 (230, 258 ＋ 按钮滑动偏移, “红蓝交换”)
    .如果 (MOD开关.红蓝交换 ＝ 真)
        选择钮精灵.置纹理 (选择钮选中纹理)
    .否则
        选择钮精灵.置纹理 (选择钮未选中纹理)
    .如果结束
    选择钮精灵.显示 (180, 250 ＋ 按钮滑动偏移)

    选择钮文字.显示 (230, 308 ＋ 按钮滑动偏移, “低密度模式”)
    .如果 (MOD开关.密度减少 ＝ 真)
        选择钮精灵.置纹理 (选择钮选中纹理)
    .否则
        选择钮精灵.置纹理 (选择钮未选中纹理)
    .如果结束
    选择钮精灵.显示 (180, 300 ＋ 按钮滑动偏移)

    选中边栏精灵.显示区域 (170, 350 ＋ 按钮滑动偏移, 分辨率.窗口宽度, 400 ＋ 按钮滑动偏移)
    选择钮文字.显示 (200, 363 ＋ 按钮滑动偏移, “开发者”)

    选择钮文字.显示 (230, 408 ＋ 按钮滑动偏移, “调试信息”)
    .如果 (调试信息显示 ＝ 真)
        选择钮精灵.置纹理 (选择钮选中纹理)
    .否则
        选择钮精灵.置纹理 (选择钮未选中纹理)
    .如果结束
    选择钮精灵.显示 (180, 400 ＋ 按钮滑动偏移)

.如果真结束
.如果真 (按钮页面 ＝ 1)
    ' 视频选项页面
    选中边栏精灵.显示区域 (170, 100 ＋ 按钮滑动偏移, 分辨率.窗口宽度, 150 ＋ 按钮滑动偏移)
    选择钮文字.显示 (200, 113 ＋ 按钮滑动偏移, “特效”)

    选择钮文字.显示 (230, 158 ＋ 按钮滑动偏移, “魂满闪光特效”)
    .如果 (开关.魂满闪光 ＝ 真)
        选择钮精灵.置纹理 (选择钮选中纹理)
    .否则
        选择钮精灵.置纹理 (选择钮未选中纹理)
    .如果结束
    选择钮精灵.显示 (180, 150 ＋ 按钮滑动偏移)

    选择钮文字.显示 (230, 208 ＋ 按钮滑动偏移, “UI震撼特效”)
    .如果 (视频开关.UIGOGO特效 ＝ 真)
        选择钮精灵.置纹理 (选择钮选中纹理)
    .否则
        选择钮精灵.置纹理 (选择钮未选中纹理)
    .如果结束
    选择钮精灵.显示 (180, 200 ＋ 按钮滑动偏移)

.如果真结束
.如果真 (按钮页面 ＝ 2)
    选中边栏精灵.显示区域 (170, 100 ＋ 按钮滑动偏移, 分辨率.窗口宽度, 150 ＋ 按钮滑动偏移)
    选择钮文字.显示 (200, 113 ＋ 按钮滑动偏移, “音量”)
    选择钮文字.显示 (230, 158 ＋ 按钮滑动偏移, “全局音量：” ＋ 到文本 (全局音量))
    选择钮文字.显示 (230, 208 ＋ 按钮滑动偏移, “音乐音量：” ＋ 到文本 (音乐音量))
    选择钮文字.显示 (230, 258 ＋ 按钮滑动偏移, “音效音量：” ＋ 到文本 (音效音量))

    选中边栏精灵.显示区域 (170, 300 ＋ 按钮滑动偏移, 分辨率.窗口宽度, 350 ＋ 按钮滑动偏移)
    选择钮文字.显示 (200, 313 ＋ 按钮滑动偏移, “OFFset”)
    选择钮文字.显示 (230, 358 ＋ 按钮滑动偏移, “全局偏移：” ＋ 取文本左边 (到文本 (全局OFFSET), 5) ＋ “秒”)

    滑块条背景.显示 (450, 360 ＋ 按钮滑动偏移)
    滑块.显示 (532 ＋ 100 × 全局OFFSET, 355 ＋ 按钮滑动偏移)


    .如果 (OFFSET节拍 ＝ 真)
        选择钮文字.显示 (230, 408 ＋ 按钮滑动偏移, “偏移设定助手：” ＋ 到文本 (节拍计数) ＋ “拍”)
    .否则
        选择钮文字.显示 (230, 408 ＋ 按钮滑动偏移, “偏移设定助手”)
    .如果结束
    .如果 (OFFSET节拍 ＝ 真)
        选择钮精灵.置纹理 (选择钮选中纹理)
    .否则
        选择钮精灵.置纹理 (选择钮未选中纹理)
    .如果结束
    选择钮精灵.显示 (180, 400 ＋ 按钮滑动偏移)

    选择钮文字.显示 (230, 458 ＋ 按钮滑动偏移, “复位数值”)

.如果真结束
.如果真 (按钮页面 ＝ 3)
    选中边栏精灵.显示区域 (170, 100 ＋ 按钮滑动偏移, 分辨率.窗口宽度, 150 ＋ 按钮滑动偏移)
    选择钮文字.显示 (200, 113 ＋ 按钮滑动偏移, “游戏控制”)
    选择钮文字.显示 (230, 158 ＋ 按钮滑动偏移, “蓝色（左）：” ＋ 取按键设定 (1))
    选择钮文字.显示 (230, 208 ＋ 按钮滑动偏移, “蓝色（右）：” ＋ 取按键设定 (2))
    选择钮文字.显示 (230, 258 ＋ 按钮滑动偏移, “红色（左）：” ＋ 取按键设定 (3))
    选择钮文字.显示 (230, 308 ＋ 按钮滑动偏移, “红色（右）：” ＋ 取按键设定 (4))
    选中边栏精灵.显示区域 (170, 350 ＋ 按钮滑动偏移, 分辨率.窗口宽度, 400 ＋ 按钮滑动偏移)
    选择钮文字.显示 (200, 363 ＋ 按钮滑动偏移, “全局”)
    选择钮文字.显示 (230, 408 ＋ 按钮滑动偏移, “游戏暂停：” ＋ 取按键设定 (5))
.如果真结束


.如果真 (按钮页面 ＝ 4)
    ' 关于页面

    通用文字.置颜色 (ARGB (按钮透明度, 255, 255, 255))
    通用文字.显示 (480, 100 ＋ 按钮滑动偏移, “T-Aiko HD”)

    关于界面兔子LOGO精灵.置透明度 (按钮透明度)
    关于界面兔子LOGO精灵.显示 (260, 200 ＋ 按钮滑动偏移)
    AGE引擎LOGO精灵.置透明度 (按钮透明度)
    AGE引擎LOGO精灵.显示 (600, 300 ＋ 按钮滑动偏移)

    十五号文字.置颜色 (ARGB (按钮透明度, 255, 255, 255))
    十五号文字.显示 (200, 500 ＋ 按钮滑动偏移, “T-Aiko HD ” ＋ #版本号 ＋ #换行符 ＋ #关于文字)


.如果真结束



.子程序 选项逻辑
.局部变量 选择判断, 逻辑型, 静态
.局部变量 临时特效, 设置界面选中特效
.局部变量 选项, 整数型

临时特效.透明度 ＝ 255
.如果真 (按钮页面 ＝ 0)
    ' 自动模式
    选项 ＝ 1
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)

        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)
                .如果 (自动模式 ＝ 真)
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “Game”, “Auto”, “0”)
                    自动模式 ＝ 假
                .否则
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “Game”, “Auto”, “1”)
                    自动模式 ＝ 真
                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

    ' LightMod
    选项 ＝ 2
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)

        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

                .如果 (MOD开关.灯光MOD ＝ 真)
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “MOD”, “LightMod”, “0”)
                    MOD开关.灯光MOD ＝ 假
                .否则
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “MOD”, “LightMod”, “1”)
                    MOD开关.灯光MOD ＝ 真
                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束
    ' 红蓝交换
    选项 ＝ 3
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)

        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

                .如果 (MOD开关.红蓝交换 ＝ 真)
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “MOD”, “LightMod”, “0”)
                    MOD开关.红蓝交换 ＝ 假
                .否则
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “MOD”, “LightMod”, “1”)
                    MOD开关.红蓝交换 ＝ 真
                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

    ' 低密度模式
    选项 ＝ 4
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)

        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

                .如果 (MOD开关.密度减少 ＝ 真)
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “MOD”, “LightMod”, “0”)
                    MOD开关.密度减少 ＝ 假
                .否则
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “MOD”, “LightMod”, “1”)
                    MOD开关.密度减少 ＝ 真
                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

    ' 调试信息
    选项 ＝ 6
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)

        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

                .如果 (调试信息显示 ＝ 真)
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “Debug”, “Debug”, “0”)
                    调试信息显示 ＝ 假
                .否则
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “Debug”, “Debug”, “1”)
                    调试信息显示 ＝ 真
                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

.如果真结束
.如果真 (按钮页面 ＝ 1)
    ' 魂满闪光
    选项 ＝ 1
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

                .如果 (开关.魂满闪光 ＝ 真)
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “effect”, “FlashH”, “0”)
                    开关.魂满闪光 ＝ 假
                .否则
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “effect”, “FlashH”, “1”)
                    开关.魂满闪光 ＝ 真
                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束
    选项 ＝ 2
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

                .如果 (视频开关.UIGOGO特效 ＝ 真)
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “effect”, “Shock”, “0”)
                    视频开关.UIGOGO特效 ＝ 假
                .否则
                    写配置项 (取运行目录 () ＋ “\Config.ini”, “effect”, “Shock”, “1”)
                    视频开关.UIGOGO特效 ＝ 真
                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

.如果真结束

.如果真 (按钮页面 ＝ 2)
    选项 ＝ 1
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

    选项 ＝ 2
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束
    选项 ＝ 3
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

    .如果 (判断是否进入区域 (532 ＋ 100 × 全局OFFSET, 552 ＋ 5 × 全局OFFSET, 355 ＋ 按钮滑动偏移, 381 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                OFFSET滑块选中 ＝ 真
            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
            OFFSET滑块选中 ＝ 假
            写配置项 (取运行目录 () ＋ “\Config.ini”, “Game”, “Offset”, 到文本 (全局OFFSET))
        .如果真结束

    .否则
        .如果真 (引擎.键_取弹起 (#鼠标左键) 且 OFFSET滑块选中 ＝ 真)
            OFFSET滑块选中 ＝ 假
            写配置项 (取运行目录 () ＋ “\Config.ini”, “Game”, “Offset”, 到文本 (全局OFFSET))
        .如果真结束
        .如果 (判断是否进入区域 (453, 614, 356 ＋ 按钮滑动偏移, 375 ＋ 按钮滑动偏移) ＝ 真)
            .如果 (选择判断 ＝ 假)
                .如果 (引擎.键_取选中 (#鼠标左键))
                    全局OFFSET ＝ (鼠标坐标.x － 532) ÷ 100
                .否则

                .如果结束

            .否则

            .如果结束
            .如果真 (引擎.键_取弹起 (#鼠标左键))
                选择判断 ＝ 假
            .如果真结束

        .否则

        .如果结束


    .如果结束


    选项 ＝ 6
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)
                .如果 (OFFSET节拍 ＝ 真)
                    OFFSET节拍 ＝ 假
                .否则
                    OFFSET节拍 ＝ 真
                    节拍计数 ＝ 0
                .如果结束

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束
    选项 ＝ 7
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 101 ＋ 50 × 选项 ＋ 按钮滑动偏移, 100 ＋ 50 × 选项 ＋ 50 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 100 ＋ 50 × 选项
                加入成员 (选中特效, 临时特效)
                全局OFFSET ＝ 0
                写配置项 (取运行目录 () ＋ “\Config.ini”, “Game”, “Offset”, 到文本 (全局OFFSET))
            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

.如果真结束
.如果真 (按钮页面 ＝ 3)

    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 151 ＋ 按钮滑动偏移, 200 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 150
                加入成员 (选中特效, 临时特效)
                更换按键事件 ＝ 真
            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 201 ＋ 按钮滑动偏移, 250 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 200
                加入成员 (选中特效, 临时特效)

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 251 ＋ 按钮滑动偏移, 300 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 250
                加入成员 (选中特效, 临时特效)

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束

    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 301 ＋ 按钮滑动偏移, 350 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 300
                加入成员 (选中特效, 临时特效)

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束
    .如果 (判断是否进入区域 (175, 分辨率.窗口宽度, 401 ＋ 按钮滑动偏移, 450 ＋ 按钮滑动偏移) ＝ 真)
        .如果 (选择判断 ＝ 假)
            .如果 (引擎.键_取选中 (#鼠标左键))
                选择判断 ＝ 真
                临时特效.坐标 ＝ 400
                加入成员 (选中特效, 临时特效)

            .否则

            .如果结束

        .否则

        .如果结束
        .如果真 (引擎.键_取弹起 (#鼠标左键))
            选择判断 ＝ 假
        .如果真结束

    .否则

    .如果结束


.如果真结束



.子程序 滑动逻辑
.局部变量 计数, 小数型, 静态


.如果 (判断是否进入区域 (176, 分辨率.窗口宽度, 74, 分辨率.窗口高度))
    .如果 (按钮滑动偏移设定 ＋ 引擎.键_取滚轮事件 () × 20 ＜ 0 － 按钮滑动尽头)
        .如果 (按钮滑动偏移设定 ＋ 引擎.键_取滚轮事件 () × 20 ≤ 0 － 按钮滑动尽头 － 100)
            按钮滑动偏移设定 ＝ 0 － 按钮滑动尽头 － 100
        .否则
            按钮滑动偏移设定 ＝ 按钮滑动偏移设定 ＋ 引擎.键_取滚轮事件 () × 20
        .如果结束

    .否则
        .如果 (按钮滑动偏移设定 ＋ 引擎.键_取滚轮事件 () × 20 ＞ 0)
            .如果 (按钮滑动偏移设定 ＋ 引擎.键_取滚轮事件 () × 20 ≥ 100)
                按钮滑动偏移设定 ＝ 100
            .否则
                按钮滑动偏移设定 ＝ 按钮滑动偏移设定 ＋ 引擎.键_取滚轮事件 () × 20
            .如果结束

        .否则
            按钮滑动偏移设定 ＝ 按钮滑动偏移设定 ＋ 引擎.键_取滚轮事件 () × 20
        .如果结束

    .如果结束


.否则

.如果结束
.如果 (按钮滑动偏移设定 ＞ 0)

    .如果 (计数 ≥ 0.3)
        按钮滑动偏移设定 ＝ 0
        计数 ＝ 0
    .否则
        计数 ＝ 计数 ＋ 引擎.取最后帧时间 ()
    .如果结束

.否则

.如果结束

.如果 (按钮滑动偏移设定 ＜ 0 － 按钮滑动尽头)

    .如果 (计数 ≥ 0.3)
        按钮滑动偏移设定 ＝ 0 － 按钮滑动尽头
        计数 ＝ 0
    .否则
        计数 ＝ 计数 ＋ 引擎.取最后帧时间 ()
    .如果结束

.否则

.如果结束
.如果 (按钮滑动偏移设定 ＜ 0 且 按钮滑动偏移设定 ＞ 0 － 按钮滑动尽头)
    计数 ＝ 0
.否则

.如果结束
按钮滑动偏移 ＝ 加速度公式 (按钮滑动偏移, 按钮滑动偏移设定, 0.6, 0.3)


.子程序 边栏按钮渲染

选择钮文字.置颜色 (ARGB (255, 255, 255, 255))
选择钮精灵.置透明度 (255)
选中边栏精灵.置透明度 (255)

选中边栏精灵.显示区域 (0, 边栏位移, 151, 边栏位移 ＋ 40)
选择钮文字.显示 (40, 108, “常规”)
选择钮文字.显示 (40, 158, “视频”)
选择钮文字.显示 (40, 208, “声音”)
选择钮文字.显示 (40, 258, “按键”)
选择钮文字.显示 (40, 308, “关于”)

.子程序 黑色背景逻辑

.如果 (输入框开关 ＝ 真)
    .如果 (黑色背景透明度 ＋ 帧率数据处理 (20) ≥ 100)
        黑色背景透明度 ＝ 100
    .否则
        黑色背景透明度 ＝ 黑色背景透明度 ＋ 帧率数据处理 (20)
    .如果结束

.否则
    .如果 (黑色背景透明度 － 帧率数据处理 (20) ≤ 0)
        黑色背景透明度 ＝ 0
    .否则
        黑色背景透明度 ＝ 黑色背景透明度 － 帧率数据处理 (20)
    .如果结束

.如果结束
黑色背景.置透明度 (黑色背景透明度)

.子程序 取按键设定, 文本型
.参数 类型, 整数型
.局部变量 按键文本, 整数型

.判断开始 (类型 ＝ 1)
    按键文本 ＝ 按键蓝1
.判断 (类型 ＝ 2)
    按键文本 ＝ 按键蓝2
.判断 (类型 ＝ 3)
    按键文本 ＝ 按键红1
.判断 (类型 ＝ 4)
    按键文本 ＝ 按键红2
.判断 (类型 ＝ 5)
    按键文本 ＝ 暂停按键

.默认

.判断结束

.判断开始 (按键文本 ＝ #A键)
    返回 (“A”)
.判断 (按键文本 ＝ #B键)
    返回 (“B”)
.判断 (按键文本 ＝ #C键)
    返回 (“C”)
.判断 (按键文本 ＝ #D键)
    返回 (“D”)
.判断 (按键文本 ＝ #E键)
    返回 (“E”)
.判断 (按键文本 ＝ #F键)
    返回 (“F”)
.判断 (按键文本 ＝ #G键)
    返回 (“G”)
.判断 (按键文本 ＝ #H键)
    返回 (“H”)
.判断 (按键文本 ＝ #I键)
    返回 (“I”)
.判断 (按键文本 ＝ #J键)
    返回 (“J”)
.判断 (按键文本 ＝ #K键)
    返回 (“K”)
.判断 (按键文本 ＝ #L键)
    返回 (“L”)
.判断 (按键文本 ＝ #M键)
    返回 (“M”)
.判断 (按键文本 ＝ #N键)
    返回 (“N”)
.判断 (按键文本 ＝ #O键)
    返回 (“O”)
.判断 (按键文本 ＝ #P键)
    返回 (“P”)
.判断 (按键文本 ＝ #Q键)
    返回 (“Q”)
.判断 (按键文本 ＝ #R键)
    返回 (“R”)
.判断 (按键文本 ＝ #S键)
    返回 (“S”)
.判断 (按键文本 ＝ #T键)
    返回 (“T”)
.判断 (按键文本 ＝ #U键)
    返回 (“U”)
.判断 (按键文本 ＝ #V键)
    返回 (“V”)
.判断 (按键文本 ＝ #W键)
    返回 (“W”)
.判断 (按键文本 ＝ #X键)
    返回 (“X”)
.判断 (按键文本 ＝ #Y键)
    返回 (“Y”)
.判断 (按键文本 ＝ #Z键)
    返回 (“Z”)
.判断 (按键文本 ＝ #Esc键)
    返回 (“Esc”)
.判断 (按键文本 ＝ #F1键)
    返回 (“F1”)
.判断 (按键文本 ＝ #F2键)
    返回 (“F2”)
.判断 (按键文本 ＝ #F3键)
    返回 (“F3”)
.判断 (按键文本 ＝ #F4键)
    返回 (“F4”)
.判断 (按键文本 ＝ #F5键)
    返回 (“F5”)
.判断 (按键文本 ＝ #F6键)
    返回 (“F6”)
.判断 (按键文本 ＝ #F7键)
    返回 (“F7”)
.判断 (按键文本 ＝ #F8键)
    返回 (“F8”)
.判断 (按键文本 ＝ #F9键)
    返回 (“F9”)
.判断 (按键文本 ＝ #F10键)
    返回 (“F10”)
.判断 (按键文本 ＝ #F11键)
    返回 (“F11”)
.判断 (按键文本 ＝ #F12键)
    返回 (“F12”)
.判断 (按键文本 ＝ #Tab键)
    返回 (“Tab”)
.判断 (按键文本 ＝ #Shift键)
    返回 (“Shift”)
.判断 (按键文本 ＝ #回车键)
    返回 (“Enter”)
.判断 (按键文本 ＝ #逗号键)
    返回 (“<”)
.判断 (按键文本 ＝ #等号键)
    返回 (“=”)
.判断 (按键文本 ＝ #End键)
    返回 (“End”)
.判断 (按键文本 ＝ #Ins键)
    返回 (“Ins”)
.默认
    返回 (“未知”)
.判断结束


