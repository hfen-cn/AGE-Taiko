.版本 2

.程序集 其他
.程序集变量 对象, 对象

.子程序 函数初始化

对象.创建 (“ScriptControl”, )
对象.写属性 (“Language”, “JScript”)
对象.数值方法 (“AddCode”, “function 取文本长度(t){ return t.length ;};function 取文本中间(t,i,s){ return t.substr(i-1,s);};function 取文本左边(t,s){ return t.slice(0,s);};function 取文本右边(t,s){ return t.slice(t.length-s-1,-1);};”)
对象.数值方法 (“AddCode”, “function 排序(t,s){ tt = t.split(s); return tt.sort(function(a,b){return a.localeCompare(b)}).join(s); };”)


.子程序 取文本左边_高级, 文本型, 公开
.参数 欲取其部分的文本, 文本型
.参数 欲取出字符的数目, 整数型

返回 (对象.文本方法 (“Run”, “取文本左边”, 欲取其部分的文本, 欲取出字符的数目))

.子程序 取文本右边_高级, 文本型, 公开
.参数 欲取其部分的文本, 文本型
.参数 欲取出字符的数目, 整数型

返回 (对象.文本方法 (“Run”, “取文本右边”, 欲取其部分的文本, 欲取出字符的数目))

.子程序 取文本中间_高级, 文本型, 公开, 返回一个文本，其中包含指定文本中从指定位置算起指定数量的字符。本命令为初级命令。
.参数 欲取其部分的文本, 文本型
.参数 起始取出位置, 整数型
.参数 欲取出字符的数目, 整数型

返回 (对象.文本方法 (“Run”, “取文本中间”, 欲取其部分的文本, 起始取出位置, 欲取出字符的数目))

.子程序 取文本长度_高级, 整数型, 公开, 返回文本的实际整字符数量。
.参数 文本, 文本型

返回 (到整数 (对象.文本方法 (“Run”, “取文本长度”, 文本)))

.子程序 进度转时间, 文本型
.参数 进度, 双精度小数型
.局部变量 秒, 整数型
.局部变量 _文本, 文本型
.局部变量 毫秒, 整数型

秒 ＝ 绝对取整 (进度 ％ 60)
毫秒 ＝ 取整 ((进度 － 取整 (进度)) × 10)
.如果 (秒 ＜ 10)
    _文本 ＝ “0” ＋ 到文本 (秒)
.否则
    _文本 ＝ 到文本 (秒)
.如果结束
返回 (到文本 (绝对取整 (进度 ÷ 60)) ＋ “:” ＋ _文本 ＋ “:” ＋ 到文本 (毫秒))

.子程序 画方块
.参数 左上角X, 整数型
.参数 左上角Y, 整数型
.参数 右下角X, 整数型
.参数 右下角Y, 整数型
.参数 颜色, 整数型
.局部变量 n, 整数型

.计次循环首 (右下角X － 左上角X, n)
    引擎.画线 (左上角X ＋ n, 左上角Y, 左上角X ＋ n, 右下角Y, 颜色)
.计次循环尾 ()

.子程序 播放音乐, 逻辑型
.参数 音乐句柄, 整数型
.参数 开始时间, 小数型, 可空
.局部变量 a, 逻辑型

a ＝ BASS_ChannelPlay (音乐句柄, 真)
BASS_ChannelSetAttribute (音效 [1].句柄, 2, 音效音量 ÷ 100 × 全局音量 ÷ 100)
BASS_ChannelSetAttribute (音效 [2].句柄, 2, 音效音量 ÷ 100 × 全局音量 ÷ 100)
加入控制台文本 (“BASS_ChannelPlay -->” ＋ 到文本 (音乐句柄) ＋ “-->” ＋ 到文本 (a))
返回 (a)

.子程序 加速度公式, 双精度小数型, 公开
.参数 初始数值, 双精度小数型
.参数 目标数值, 双精度小数型
.参数 速度, 双精度小数型
.参数 加速度, 双精度小数型
.局部变量 数值差值, 双精度小数型
.局部变量 数值加速度, 双精度小数型
.局部变量 数值速度, 双精度小数型


数值差值 ＝ 目标数值 － 初始数值
数值加速度 ＝ 数值差值 × 速度
数值速度 ＝ 数值速度 ＋ 数值加速度
数值速度 ＝ 四舍五入 (数值速度 × 加速度, )
初始数值 ＝ 初始数值 ＋ 帧率数据处理 (数值速度)
.如果 (数值速度 ＝ 0)
    初始数值 ＝ 目标数值
.否则

.如果结束
返回 (初始数值)

.子程序 帧率数据处理, 双精度小数型, , 用于处理不同帧率下保证数据时间相同
.参数 数据, 双精度小数型
.局部变量 数据处理, 双精度小数型

数据处理 ＝ 数据 × 60 × 引擎.取最后帧时间 ()
返回 (数据处理)

.子程序 判断是否进入区域, 逻辑型
.参数 起点X, 整数型
.参数 终点X, 整数型
.参数 起点Y, 整数型
.参数 终点Y, 整数型

.如果 (鼠标坐标.x ≥ 起点X 且 鼠标坐标.x ≤ 终点X 且 鼠标坐标.y ≤ 终点Y 且 鼠标坐标.y ≥ 起点Y)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 进度转分, 整数型
.参数 进度, 双精度小数型
.局部变量 秒, 整数型
.局部变量 _文本, 文本型

秒 ＝ 绝对取整 (进度 ％ 60)
.如果 (秒 ＜ 10)
    _文本 ＝ “0” ＋ 到文本 (秒)
.否则
    _文本 ＝ 到文本 (秒)
.如果结束
返回 (绝对取整 (进度 ÷ 60))

.子程序 进度转毫秒, 文本型
.参数 进度, 双精度小数型
.局部变量 毫秒, 整数型
.局部变量 _文本, 文本型

毫秒 ＝ 取整 ((进度 － 取整 (进度)) × 10)
.如果 (毫秒 ＜ 10)
    _文本 ＝ “0” ＋ 到文本 (毫秒)
.否则
    _文本 ＝ 到文本 (毫秒)
.如果结束
返回 (_文本)

.子程序 进度转时间无毫秒, 文本型
.参数 进度, 双精度小数型
.局部变量 秒, 整数型
.局部变量 _文本, 文本型
.局部变量 毫秒, 整数型

秒 ＝ 绝对取整 (进度 ％ 60)
.如果 (秒 ＜ 10)
    _文本 ＝ “0” ＋ 到文本 (秒)
.否则
    _文本 ＝ 到文本 (秒)
.如果结束
返回 (到文本 (绝对取整 (进度 ÷ 60)) ＋ “:” ＋ _文本)

.子程序 进度转秒, 整数型
.参数 进度, 双精度小数型
.局部变量 秒, 整数型
.局部变量 _文本, 文本型

秒 ＝ 绝对取整 (进度 ％ 60)
返回 (秒)

.子程序 处理秒数, 文本型
.参数 秒数, 文本型
.局部变量 _文本, 文本型

.如果 (到整数 (秒数) ＜ 10)
    _文本 ＝ “0” ＋ 秒数
.否则
    _文本 ＝ 秒数
.如果结束
返回 (_文本)

.子程序 检查文件, , , 检查游戏或资源是否完整
.局部变量 分割, 文本型, , "0"
.局部变量 n, 整数型
.局部变量 Time, SYSTEMTIME
.局部变量 时, 文本型
.局部变量 分, 文本型
.局部变量 秒, 文本型

分割 ＝ 分割文本 (#检查文件, #换行符, )
.计次循环首 (取数组成员数 (分割), n)
    .如果 (分割 [n] ＝ “”)

    .否则
        .如果 (取文本左边 (分割 [n], 1) ＝ “\”)
            .如果 (文件是否存在 (取运行目录 () ＋ 分割 [n]))

            .否则
                缺少文件 ＝ 缺少文件 ＋ “Could not open file ” ＋ 分割 [n] ＋ “.Does not exist.” ＋ #换行符
            .如果结束

        .否则
            .如果 (文件是否存在 (取运行目录 () ＋ “\” ＋ 分割 [n]))

            .否则
                缺少文件 ＝ 缺少文件 ＋ “Could not open file ” ＋ 分割 [n] ＋ “.Does not exist.” ＋ #换行符
            .如果结束

        .如果结束

    .如果结束

.计次循环尾 ()
.如果 (缺少文件 ＝ “”)

.否则
    ' 信息框 (“读取游戏时发生错误，缺少以下文件：” ＋ #换行符 ＋ 缺少文件 ＋ #换行符 ＋ “你可以通过重新安装游戏客户端从而修复此问题。” ＋ #换行符 ＋ #换行符 ＋ “游戏版本：” ＋ #版本号 ＋ #换行符 ＋ “Rabbit Game Console版本：” ＋ #RBC, #错误图标, “Rabbit Game Console Error”)
    载入出错 ＝ 真
    GetLocalTime (Time)
    时 ＝ 到文本 (Time.wHour)
    .如果真 (取文本长度 (时) ＜ 2)
        时 ＝ “0” ＋ 时
    .如果真结束
    分 ＝ 到文本 (Time.wMinute)
    .如果真 (取文本长度 (分) ＜ 2)
        分 ＝ “0” ＋ 分
    .如果真结束
    秒 ＝ 到文本 (Time.wSecond)
    .如果真 (取文本长度 (秒) ＜ 2)
        秒 ＝ “0” ＋ 秒
    .如果真结束

    写到文件 (取运行目录 () ＋ “\Log\Log” ＋ 到文本 (Time.wYear) ＋ 时 ＋ 分 ＋ 秒 ＋ “.RLOG”, 到字节集 (“Rabbit Engine Ver.” ＋ #引擎版本 ＋ #换行符 ＋ #换行符 ＋ 缺少文件))
.如果结束


.子程序 取播放时间

播放时间 ＝ BASS_ChannelBytes2Seconds (音效 [3].句柄, BASS_ChannelGetPosition (音效 [3].句柄, 0))

.子程序 取音乐播放时间, 小数型
.局部变量 时间, 整数型

时间 ＝ BASS_ChannelBytes2Seconds (音效 [3].句柄, BASS_ChannelGetPosition (音效 [3].句柄, 0))
返回 (时间)
